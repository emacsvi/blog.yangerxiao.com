{"pageContext":{"group":[{"node":{"fields":{"slug":"/posts/upgrade-hexo-to-3-2"},"html":"<p><img src=\"https://zerosoul.github.io/2016/06/15/upgrade-hexo-to-3-2/crazy.jpg\" alt=\"crazy\"></p>\n<h1 id=\"动机\"><a href=\"#%E5%8A%A8%E6%9C%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>动机</h1>\n<p>好久没去<a href=\"https://hexo.io\">Hexo官网</a>逛逛了，陡然发现有<a href=\"https://hexo.io/news/2016/02/28/hexo-3-2-released/\">新版本</a>了，其重要的改进在于生成静态文件的速度，对于文章越写越多，生成时间越来越长的我，是个极大的诱惑。作为一个还停留在2.X版本的Hexo党，毅然决然地要尝一下鲜。</p>\n<h1 id=\"思路\"><a href=\"#%E6%80%9D%E8%B7%AF\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思路</h1>\n<ol>\n<li>\n<p>先全局升级<code class=\"language-text\">hexo-cli</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i hexo-cli -g</code></pre>\n      </div>\n<p>通过<code class=\"language-text\">hexo version</code>查看下版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">hexo: 3.2.0 //版本号已变\n\nhexo-cli: 1.0.2\n\nos: Darwin 15.5.0 darwin x64\n\nhttp_parser: 2.7.0\n\nnode: 6.2.1 \n\nv8: 5.0.71.52\n\nuv: 1.9.1\n\nzlib: 1.2.8\n\nares: 1.10.1-DEV\n\nicu: 57.1\n\nmodules: 48\n\nopenssl: 1.0.2h</code></pre>\n      </div>\n<p>注：我的node版本略高，不建议使用高版本，因为经常踩坑，5就足够了。当然，可以使用nvm工具来管理node版本。</p>\n</li>\n<li>\n<p>找个风水宝地，初始化一个新版本的hexo博客目录：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">hexo init new\\_blog <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cd</span> new\\_blog <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> i <span class=\"token operator\">&amp;&amp;</span> hexo s</code></pre>\n      </div>\n</li>\n<li>\n<p>访问下<code class=\"language-text\">http://localhost:4000</code>，确认下初始化成功了么。正常的话，看到的是默认主题的首页。</p>\n</li>\n<li>\n<p>把原博客目录<code class=\"language-text\">source</code>下的东西全部拷贝到新目录对应位置上。这是关键的一步，相当于迁移数据源。</p>\n</li>\n<li>\n<p>接下来，是容易踩坑的地方了，不要把原Hexo的配置文件<code class=\"language-text\">_config.yml</code>直接覆盖过来，因为新版本的Hexo有些插件不走配置文件了，容易出错。所以我在踩了这个坑之后，索性基于新<code class=\"language-text\">_config.yml</code>来更新对应值，至于插件的配置，全部放弃。</p>\n</li>\n<li>\n<p>接下来，是主题的更新，我使用的是<a href=\"http://theme-next.iissnan.com/\">Next</a>。发现这个也有新版本了，索性一起更新了。具体步骤请参照<a href=\"http://theme-next.iissnan.com/getting-started.html\">这里</a>。另，原有主题我更改了一些地方，又花了点时间把琐碎的增量更改也做了。</p>\n</li>\n<li>\n<p>接下来，<code class=\"language-text\">hexo g</code>一下，发现有报错，看了下报错信息和我使用<a href=\"https://github.com/gyk001/hexo-qiniu-sync\"><code class=\"language-text\">hexo-qiniu-sync</code></a>插件有关，于是把七牛插件给装上：<code class=\"language-text\">npm install hexo-qiniu-sync --save</code>。注意，别忘了更新<code class=\"language-text\">_config.yml</code>对应的配置，这个可以从原来的地方拷贝过来。</p>\n</li>\n<li>\n<p>另外，我还用到了两个插件<code class=\"language-text\">hexo-generator-sitemap</code>，<code class=\"language-text\">hexo-generator-feed</code>，一行代码搞定：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i hexo-generator-sitemap hexo-generator-feed --save</code></pre>\n      </div>\n</li>\n<li>\n<p>下面到了最坑的地方了，平时使用<code class=\"language-text\">hexo-browsersync</code>来边写边看效果，所以升级后自然也得想着它。装上这个插件在我的环境下会导致大部分页面白板，动画效果也没有了。查看了下生成的页面代码，底部有乱码。估计是我的node版本太高导致的，使用nvm降到5，问题依旧。然后去插件<a href=\"https://github.com/hexojs/hexo-browsersync\">Github地址</a>逛逛有没有遇到类似问题的同学，很遗憾，就四个提问题的，和我遇到的问题无关。转变思路，看看是不是版本依赖问题，<code class=\"language-text\">hexo-browsersync</code>最重要的依赖便是<code class=\"language-text\">browsersync</code>，将其升级到最新版本：修改该模块的<code class=\"language-text\">package.json</code>对应的<code class=\"language-text\">browsersync</code>版本号为<code class=\"language-text\">*</code>，然后<code class=\"language-text\">npm update --save</code>。接下来，试试问题有没有解决，果然！不出所料！这样做并没有什么卵用…o(╯□╰)o。<br>\n纠结到最后，还是暂时去掉了这一功能：<code class=\"language-text\">npm uninstall hexo-browsersync --save</code>。以后会看一下里面源码，看看到底哪儿的问题。而现在，我需要的就是一个可以写文章和发布的Hexo，虽然用起来不是很便捷，但这已足够了。</p>\n</li>\n<li>\n<p>最后：<code class=\"language-text\">npm i --save hexo-deployer-git</code>，配置下<code class=\"language-text\">_config.yml</code>对应的git选项。</p>\n</li>\n</ol>\n<h1 id=\"感想\"><a href=\"#%E6%84%9F%E6%83%B3\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感想</h1>\n<p>断断续续折腾了两天，才升级成功。所以，如果有啥感想，那就是：<strong>没事别瞎TM升级！</strong>当然，如果一定要升级，最好做增量升级：另起炉灶，一项一项地加功能，这样好定位问题，也容易回滚。</p>","frontmatter":{"title":"Hexo升级之坑","date":"2016-06-15T09:31:37.000Z","category":"技术","tags":["hexo","备忘"],"cover":"https://zerosoul.github.io/2016/06/15/upgrade-hexo-to-3-2/crazy.jpg"},"tableOfContents":"<ul>\n<li><a href=\"/posts/upgrade-hexo-to-3-2/#%E5%8A%A8%E6%9C%BA\">动机</a></li>\n<li><a href=\"/posts/upgrade-hexo-to-3-2/#%E6%80%9D%E8%B7%AF\">思路</a></li>\n<li><a href=\"/posts/upgrade-hexo-to-3-2/#%E6%84%9F%E6%83%B3\">感想</a></li>\n</ul>","excerpt":"动机 好久没去 Hexo官网 逛逛了，陡然发现有 新版本 了，其重要的改进在于生成静态文件的速度，对于文章越写越多，生成时间越来越长的我，是个极大的诱惑。作为一个还停留在2.X版本的Hexo党，毅然决然地要尝一下鲜。 思路 先全局升级 ： 通过 查看下版本： 注：我的node…"}},{"node":{"fields":{"slug":"/posts/build-personal-site-with-hexo-and-github-pages"},"html":"<h1 id=\"准备工作\"><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>准备工作</h1>\n<h2 id=\"githubgithub\"><a href=\"#githubgithub\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#Github\" title=\"Github\"></a><a href=\"http://github.com\">Github</a></h2>\n<ol>\n<li>登陆你的Github</li>\n<li>新建一个Repository</li>\n<li>将之命名为<em>yourGithubName.github.io</em>(注意替换yourGithubName)</li>\n<li>关键步骤已经完成，其他选项随意啦。点击新建后，别忘了把<em>SSH</em>的地址copy一份，后面有用到</li>\n</ol>\n<h1 id=\"hexo\"><a href=\"#hexo\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"http://hexo.io\">Hexo</a></h1>\n<ol>\n<li>打开终端</li>\n<li>Hexo依赖 Node 环境，如果没有先安装 Node &#x26; npm，参考<a href=\"http://nodejs.org\">官网</a></li>\n<li>安装 Hexo<br>\n<code class=\"language-text\">npm install -g hexo</code></li>\n<li>齐活，Hexo准备完毕</li>\n</ol>\n<h1 id=\"使用hexo撸github需要的东西\"><a href=\"#%E4%BD%BF%E7%94%A8hexo%E6%92%B8github%E9%9C%80%E8%A6%81%E7%9A%84%E4%B8%9C%E8%A5%BF\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用Hexo撸Github需要的东西</h1>\n<ol>\n<li>进入到你想放置github pages repository的目录</li>\n<li>在此创建Hexo Project<br>\n<code class=\"language-text\">hexo init yourGithubName.github.io</code></li>\n<li>切换到刚刚创建的目录<br>\n<code class=\"language-text\">cd yourGithubName.github.io</code></li>\n<li>安装依赖&#x26;生成静态文件&#x26;启动本地服务器<br>\n<code class=\"language-text\">npm install &amp; hexo g &amp; hexo s</code></li>\n<li>目测现在就可以通过访问localhost:4000来瞅瞅网站啥样了</li>\n</ol>\n<h1 id=\"部署到github上\"><a href=\"#%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>部署到Github上</h1>\n<ol>\n<li>首先，停掉Hexo <code class=\"language-text\">Control + C</code></li>\n<li>打开根目录的_config.yml，设置Github地址<br>\n<code class=\"language-text\">deploy: type: git repo: git@github.com:yourGithubName/yourGithubName.github.io.git</code></li>\n<li>部署前，先确认有没有安装<em><a href=\"https://github.com/hexojs/hexo-deployer-git\">hexo-deployer-git</a></em><br>\n<code class=\"language-text\">npm install hexo-deployer-git --save</code></li>\n<li>部署<br>\n<code class=\"language-text\">hexo d</code></li>\n<li>打开浏览器，访问 <em>yourGithubName.github.io</em></li>\n</ol>\n<h1 id=\"写作\"><a href=\"#%E5%86%99%E4%BD%9C\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写作</h1>\n<ol>\n<li>使用Markdown写作，完事后保存到source/_posts/</li>\n<li>重新生成静态文件<br>\n<code class=\"language-text\">hexo g</code></li>\n<li>运行<code class=\"language-text\">hexo s</code>在本地查看刚刚写的文章</li>\n<li>木问题的话，更新至Github<br>\n<code class=\"language-text\">hexo d</code></li>\n</ol>\n<h1 id=\"绑定自己的域名\"><a href=\"#%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>绑定自己的域名</h1>\n<blockquote>\n<p>我通过淘宝代理<a href=\"https://www.godaddy.com/\">Godaddy</a>购买了 <a href=\"http://zerosou.us\">zerosoul.github.io</a> 域名，就拿这个举例如何绑定吧</p>\n</blockquote>\n<ol>\n<li>Github上进入 zerosoul.github.io</li>\n<li>创建并提交CNAME文件，里面只有一行内容，就是域名：<code class=\"language-text\">zerosoul.github.io</code></li>\n<li>去Godaddy网站管理域名页面<br>\n<img src=\"https://zerosoul.github.io/2015/11/05/build-personal-site-with-hexo-and-github-pages/godaddy_setting.jpg\" alt=\"godaddy setting\"></li>\n<li>增加一条 A 记录:host=<code class=\"language-text\">@</code>，Points to=<code class=\"language-text\">192.30.252.153</code></li>\n<li>增加一条 CNAME 记录:host=<code class=\"language-text\">www</code>，Points to=<code class=\"language-text\">zerosoul.github.io</code></li>\n<li>最后，一定要记得保存更改！<br>\n<img src=\"https://zerosoul.github.io/2015/11/05/build-personal-site-with-hexo-and-github-pages/godaddy_saving.jpg\" alt=\"godaddy saving\"></li>\n<li>静待更改生效，大概一两个小时。</li>\n</ol>\n<h1 id=\"两个小时后\"><a href=\"#%E4%B8%A4%E4%B8%AA%E5%B0%8F%E6%97%B6%E5%90%8E\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>两个小时后…</h1>\n<p><strong>装X成功！</strong></p>\n<h1 id=\"相关链接\"><a href=\"#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>相关链接</h1>\n<p><a href=\"https://hexo.io/docs/\">hexo doc</a><br>\n<a href=\"https://help.github.com/categories/github-pages-basics/\">github pages basic</a><br>\n<a href=\"http://andrewsturges.com/blog/jekyll/tutorial/2014/11/06/github-and-godaddy.html\">Configuring a Godaddy domain name with github pages</a></p>","frontmatter":{"title":"科学地使用 Hexo 和 Github Pages 装X","date":"2015-11-05T09:31:37.000Z","category":"技术","tags":["hexo","github","nodejs","前端"],"cover":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/posts/build-personal-site-with-hexo-and-github-pages/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\">准备工作</a></p>\n<ul>\n<li><a href=\"/posts/build-personal-site-with-hexo-and-github-pages/#githubgithub\">GithubGithub</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/build-personal-site-with-hexo-and-github-pages/#hexo\">Hexo</a></li>\n<li><a href=\"/posts/build-personal-site-with-hexo-and-github-pages/#%E4%BD%BF%E7%94%A8hexo%E6%92%B8github%E9%9C%80%E8%A6%81%E7%9A%84%E4%B8%9C%E8%A5%BF\">使用Hexo撸Github需要的东西</a></li>\n<li><a href=\"/posts/build-personal-site-with-hexo-and-github-pages/#%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A\">部署到Github上</a></li>\n<li><a href=\"/posts/build-personal-site-with-hexo-and-github-pages/#%E5%86%99%E4%BD%9C\">写作</a></li>\n<li><a href=\"/posts/build-personal-site-with-hexo-and-github-pages/#%E7%BB%91%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D\">绑定自己的域名</a></li>\n<li><a href=\"/posts/build-personal-site-with-hexo-and-github-pages/#%E4%B8%A4%E4%B8%AA%E5%B0%8F%E6%97%B6%E5%90%8E\">两个小时后…</a></li>\n<li><a href=\"/posts/build-personal-site-with-hexo-and-github-pages/#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5\">相关链接</a></li>\n</ul>","excerpt":"准备工作 Github 登陆你的Github 新建一个Repository 将之命名为 yourGithubName.github.io (注意替换yourGithubName) 关键步骤已经完成，其他选项随意啦。点击新建后，别忘了把 SSH 的地址copy一份，后面有用到 Hexo…"}},{"node":{"fields":{"slug":"/posts/convert-query-params-to-json"},"html":"<h1 id=\"引子\"><a href=\"#%E5%BC%95%E5%AD%90\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引子</h1>\n<p>工作中经常需要获取浏览器地址栏URL的参数，常用的套路便是将这些参数转化为键值对，方法有许多，我喜欢简单明了，所以尝试自己总结下。</p>\n<h1 id=\"过程\"><a href=\"#%E8%BF%87%E7%A8%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>过程</h1>\n<p>首先，获取参数字符串</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>这里用到了<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.location\">location</a>和<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\">slice</a></p>\n<p>然后，将参数转为数组，然后在数组里做文章。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> pairs<span class=\"token operator\">=</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>接下来，使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">forEach</a>遍历<code class=\"language-text\">pairs</code>，并在每次遍历时使用<code class=\"language-text\">=</code>分隔符，来提取键值对。当然，一些可能遇到的场景也需要考虑下，比如，<strong>值为空</strong>和<strong>使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent</a>解码一下</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> pairs <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\npairs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    pair <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    result<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>最后一步，相当简单，使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON.stringify</a>解析一下，然后用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\">JSON.parse</a>再转化回来。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h1 id=\"最终代码\"><a href=\"#%E6%9C%80%E7%BB%88%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最终代码</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">QueryStringToJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>            \n\n    <span class=\"token keyword\">var</span> pairs <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    pairs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        pair <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        result<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> query_string <span class=\"token operator\">=</span> <span class=\"token function\">QueryStringToJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","frontmatter":{"title":"查询字符串参数转化为JSON对象","date":"2014-07-29T09:31:37.000Z","category":"技术","tags":["hexo","github","nodejs","前端"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/convert-query-params-to-json/#%E5%BC%95%E5%AD%90\">引子</a></li>\n<li><a href=\"/posts/convert-query-params-to-json/#%E8%BF%87%E7%A8%8B\">过程</a></li>\n<li><a href=\"/posts/convert-query-params-to-json/#%E6%9C%80%E7%BB%88%E4%BB%A3%E7%A0%81\">最终代码</a></li>\n</ul>","excerpt":"引子 工作中经常需要获取浏览器地址栏URL的参数，常用的套路便是将这些参数转化为键值对，方法有许多，我喜欢简单明了，所以尝试自己总结下。 过程 首先，获取参数字符串 这里用到了 location 和 slice 然后，将参数转为数组，然后在数组里做文章。 接下来，使用 forEach…"}}],"pathPrefix":"tags/hexo","first":true,"last":true,"index":1,"pageCount":1,"additionalContext":{"total":3,"tag":"hexo"}}}