{"pageContext":{"group":[{"node":{"fields":{"slug":"/posts/new-web-features-in-safari-10-1"},"html":"<p><img src=\"https://zerosoul.github.io/2017/03/31/new-web-features-in-safari-10-1/qiaobusi.jpg\" alt=\"乔布斯与HTML5\"></p>\n<p>伴随着 iOS 10.3 和 macOS Sierra 10.12.4 的更新，一个新版本的Safari也随之而来，其中有许多值得一提的web新特性让前端工程师激动不已，恩，值得唠唠。</p>\n<p>这次新版本的发布不仅让web更为强大，同时也简化了当前代码的维护，使得web开发更得心应手。前端工程师利用这些改进能够给用户带来更好的体验，想想都有些小激动呢。</p>\n<p>好了，废话不多说，下面看看都有哪些新特性：</p>\n<h1 id=\"fetch\"><a href=\"#fetch\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetch</h1>\n<p>Fetch是<code class=\"language-text\">XMLHttpRequest</code>的改进版本。它能够以更简洁的方式异步获取资源，不仅如此，它还利用ECMAScript 2015(ES6)中的<a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects\">Promises</a>,简化和链式响应操作。相对于<code class=\"language-text\">XMLHttpRequest</code>，Fetch API更简洁，更具有可读性，从而也就更易维护。  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> jsonURLEndpoint <span class=\"token operator\">=</span> <span class=\"token string\">\"https://svn.webkit.org/repository/webkit/trunk/Source/WebCore/features.json\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>jsonURLEndpoint<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\n    method<span class=\"token punctuation\">:</span> <span class=\"token string\">\"get\"</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>想了解更多请参考：<a href=\"https://fetch.spec.whatwg.org/\">Fetch标准</a></p>\n<h1 id=\"css栅格css-grid-layout\"><a href=\"#css%E6%A0%85%E6%A0%BCcss-grid-layout\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS栅格(CSS Grid Layout)</h1>\n<p>CSS栅格基于容器的行与列，给前端工程师带来一种强大的新布局方式。通过CSS提供的这种可控的页面布局工具，可以针对不同视口做出复杂的平面排版设计。以前利用CSS中的奇淫技巧才能实现的打印样式，像浮动和Flexbox，现在可以通过CSS栅格轻松实现。</p>\n<p>想了解更多请参考：<a href=\"https://webkit.org/blog/7434/css-grid-layout-a-new-layout-module-for-the-web/\">CSS栅格系统: 一种新的布局方式</a></p>\n<h1 id=\"ecmascript-2016--ecmascript-2017\"><a href=\"#ecmascript-2016--ecmascript-2017\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECMAScript 2016 &#x26; ECMAScript 2017</h1>\n<p>ECMAScript 2016 和 ECMAScript 2017是Javascript的最新语言标准，Safari 10.1新增了一些支持。当然，对ECMAScript 2016只是做了些微小的工作，毕竟2016版的标准由来已久，但2017版的标准却带来了不小的改进。</p>\n<p><a href=\"https://www.ecma-international.org/ecma-262/7.0/\">ECMAScript 2016</a>带来的改进包括：</p>\n<ul>\n<li>求幂运算符（<code class=\"language-text\">x ** y</code>可以替代<code class=\"language-text\">Math.pow(x,y)</code>，更简洁了！）</li>\n<li><code class=\"language-text\">Array.prototype.includes</code>（与<code class=\"language-text\">Array.prototype.indexOf</code>类似，只不过能对<code class=\"language-text\">NaN</code>做出识别）</li>\n</ul>\n<p><a href=\"https://tc39.github.io/ecma262/\">ECMAScript 2017</a>带来了:</p>\n<ul>\n<li><code class=\"language-text\">async</code>和<code class=\"language-text\">await</code>语法，</li>\n<li>共享内存对象，包括原子类型（Atomics）和（缓冲数组）Shared Array Buffers</li>\n<li><code class=\"language-text\">String.prototype.padStart</code>,<code class=\"language-text\">String.prototype.padEnd</code>,<code class=\"language-text\">String.prototype.values</code>和<code class=\"language-text\">String.prototype.entries</code></li>\n<li>允许在函数参数列表和调用中使用逗号</li>\n</ul>\n<h1 id=\"indexdb-20\"><a href=\"#indexdb-20\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IndexDB 2.0</h1>\n<p>新版本的IndexDB有了更大的提升。它更快，与标准更兼容，并且支持IndexDB 2.0的新特性。IndexedDB 2.0加入了对二进制数据的支持，比如索引键，这样就不用再将其序列化为字符串或者对象数组。不仅如此，还有对象存储和索引重命名，<code class=\"language-text\">IDBObjectStore</code>的<code class=\"language-text\">getKey()</code>和<code class=\"language-text\">IDBIndex</code>的<code class=\"language-text\">getPrimaryKey()</code>。</p>\n<p>想了解更多请参考文档：<a href=\"https://www.w3.org/TR/IndexedDB-2/\">Indexed Database API 2.0</a></p>\n<h1 id=\"自定义元素custom-elements\"><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%83%E7%B4%A0custom-elements\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自定义元素(Custom Elements)</h1>\n<p>前端工程师不用再依赖Javascript框架来创建可复用组件啦，自定义元素可以轻松做到。和那些内置元素一样，自定义元素也可以通过特性（attributes）设置和获取值，并且还可以通过回调函数响应用户的交互。</p>\n<p>了解更多请参考：<a href=\"https://webkit.org/blog/7027/introducing-custom-elements/\">自定义元素简介</a></p>\n<h1 id=\"游戏手柄（gamepad）\"><a href=\"#%E6%B8%B8%E6%88%8F%E6%89%8B%E6%9F%84%EF%BC%88gamepad%EF%BC%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>游戏手柄（Gamepad）</h1>\n<p>Gamepad API 让Web App使用游戏手柄成为可能。在macOS中任何无需通过额外驱动就可以使用的游戏手柄，Web App都可以完美兼容，当然，iOS中的MFi游戏手柄也同样支持。</p>\n<p>了解更多请参考：<a href=\"https://www.w3.org/TR/gamepad/\">Gamepad规范</a></p>\n<h1 id=\"指针锁\"><a href=\"#%E6%8C%87%E9%92%88%E9%94%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>指针锁</h1>\n<p>macOS中的Safari通过在元素中使用指针锁，可以让鼠标指针隐藏，同时还可以获取鼠标移动的数据。这个在开发Web游戏中特别有用。指针锁还扩展了<code class=\"language-text\">MouseEvents</code>接口，新增了<code class=\"language-text\">movementX</code>和<code class=\"language-text\">movementY</code>两个属性，即使鼠标移出了可视区域，依然能获取流信息。鼠标锁于某个元素时，Safari还会显示提示栏通知用户鼠标指针已隐藏。第一次按<code class=\"language-text\">ESC</code>键，会关闭提示栏，再次按<code class=\"language-text\">ESC</code>，将会释放指针锁。</p>\n<p>更多信息请移步：<a href=\"https://www.w3.org/TR/pointerlock/\">Pointer Lock 规范</a></p>\n<h1 id=\"全屏下的键盘输入\"><a href=\"#%E5%85%A8%E5%B1%8F%E4%B8%8B%E7%9A%84%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>全屏下的键盘输入</h1>\n<p>WebKit通常会限制在全屏模式下的键盘输入，随着macOS Safari 10.1的更新，这一限制已去掉。</p>\n<h1 id=\"交互式的表单验证\"><a href=\"#%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>交互式的表单验证</h1>\n<p>在旧浏览器时代，你知道我指的是哪一款o(╯□╰)o，表单验证一直是件头痛的事情，后来HTML5引入了一些表单元素的特性，解决了一些常见的验证需求，比如必填，约束数据类型等。Safari 10.1更进一步，引入了<code class=\"language-text\">checkValidity()</code>和<code class=\"language-text\">reportValidity()</code>两个扩展接口，让提示更标准化，大大减少了Javascript代码。</p>\n<p>了解更多：<a href=\"https://webkit.org/blog/7099/html-interactive-form-validation/\">HTML交互式表单验证</a></p>\n<h1 id=\"输入事件\"><a href=\"#%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>输入事件</h1>\n<p>输入事件简化了富文本输入的实现。新增的<code class=\"language-text\">beforeinput</code>监听并截获默认的输入行为，并通过新特性强化了该事件。</p>\n<p>了解更多：<a href=\"https://webkit.org/blog/7358/enhanced-editing-with-input-events/\">使用输入事件增强编辑体验</a></p>\n<h1 id=\"html5的下载特性\"><a href=\"#html5%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%89%B9%E6%80%A7\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML5的下载特性</h1>\n<p><code class=\"language-text\">a</code>标签中的<code class=\"language-text\">download</code>特性标识了是个可下载的链接，用户点击后往往会直接下载资源而非跳转新页面。不仅如此，前端工程师也可以完全使用Javascript来创建blob数据当做文件资源来下载。如果<code class=\"language-text\">download</code>指定了值，那么就相当于重命名了下载文件的名字。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://webkit.org/favicon.ico<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">download</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>webkit-favicon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Download Favicon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>了解更多：<a href=\"https://html.spec.whatwg.org/multipage/semantics.html#downloading-resources\">HTML5中下载资源</a></p>\n<h1 id=\"html媒体捕捉\"><a href=\"#html%E5%AA%92%E4%BD%93%E6%8D%95%E6%8D%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML媒体捕捉</h1>\n<p>在新版的Safari中，HTML媒体捕捉扩展了其捕捉类型，可以使用设备上的相机和麦克来获取用户输入。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>imageCapture<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>image/*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">capture</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>videoCapture<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>video/*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">capture</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>audioCapture<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>audio/*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">capture</span><span class=\"token punctuation\">></span></span>`</code></pre>\n      </div>\n<p>更多细节请移步：<a href=\"https://www.w3.org/TR/html-media-capture/\">HTML媒体捕捉</a></p>\n<h1 id=\"改进了code-classlanguage-textfixedcode和code-classlanguage-textstickycode元素的定位\"><a href=\"#%E6%94%B9%E8%BF%9B%E4%BA%86code-classlanguage-textfixedcode%E5%92%8Ccode-classlanguage-textstickycode%E5%85%83%E7%B4%A0%E7%9A%84%E5%AE%9A%E4%BD%8D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>改进了<code class=\"language-text\">fixed</code>和<code class=\"language-text\">sticky</code>元素的定位</h1>\n<p>当捏合放大（pinch-to-zoom）时，固定和粘连元素的定位表现有了提升，这得归功于<strong>视觉窗口</strong>(visual viewports)。有了视觉窗口，输入元素获取焦点时不再会禁用固定和粘连元素的定位了。</p>\n<h1 id=\"改进的web调试\"><a href=\"#%E6%94%B9%E8%BF%9B%E7%9A%84web%E8%B0%83%E8%AF%95\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>改进的Web调试</h1>\n<p>WebKit新增了针对Web Worker的调试支持，同时对正在调试和即将执行的语句高亮，这样，就能清楚看出哪条代码即将执行，在一些控制流程非常复杂或者多条语句写在了一行中，这种改进的体验非常棒。</p>\n<p>更详细的介绍请移步：<a href=\"https://webkit.org/blog/7219/javascript-debugging-improvements/\">Javascript调试改进</a></p>\n<h1 id=\"css全范围色彩（wide-gamut-colors）\"><a href=\"#css%E5%85%A8%E8%8C%83%E5%9B%B4%E8%89%B2%E5%BD%A9%EF%BC%88wide-gamut-colors%EF%BC%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS全范围色彩（Wide-Gamut Colors）</h1>\n<p>现在的设备能够支持色域更广的颜色。随着新版本Safari的发行，前端工程师能够扩展出更多的色彩想象力，包括Display P3色彩域。通过<code class=\"language-text\">color-gamut</code>媒体查询可以测试出显示器是否支持该特性，然后用CSS新增的<code class=\"language-text\">color()</code>函数，定义出新的颜色。</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">color-gamut</span><span class=\"token punctuation\">:</span>p3<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">.brightred</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">color</span><span class=\"token punctuation\">(</span>display-p3 1.0 0 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>更多请访问：<a href=\"https://drafts.csswg.org/css-color/\">CSS颜色模块标准</a></p>\n<h1 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>后记</h1>\n<p>这篇文章翻译自<a href=\"https://webkit.org/blog/7477/new-web-features-in-safari-10-1/\">New Web Features in Safari 10.1</a>，内容略有删减，有些特性我也没搞懂，比如<code class=\"language-text\">color-gamut</code>，所以可能会有词不达意的地方，望见谅。</p>","frontmatter":{"title":"你可能不知道的Safari 10.1(iOS 10.3)Web开发新特性","date":"2017-03-31T09:31:37.000Z","category":"它山之石","tags":["前端","翻译","html5"],"cover":"https://zerosoul.github.io/2017/03/31/new-web-features-in-safari-10-1/qiaobusi.jpg"},"tableOfContents":"<ul>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#fetch\">Fetch</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#css%E6%A0%85%E6%A0%BCcss-grid-layout\">CSS栅格(CSS Grid Layout)</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#ecmascript-2016--ecmascript-2017\">ECMAScript 2016 &#x26; ECMAScript 2017</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#indexdb-20\">IndexDB 2.0</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%83%E7%B4%A0custom-elements\">自定义元素(Custom Elements)</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#%E6%B8%B8%E6%88%8F%E6%89%8B%E6%9F%84%EF%BC%88gamepad%EF%BC%89\">游戏手柄（Gamepad）</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#%E6%8C%87%E9%92%88%E9%94%81\">指针锁</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#%E5%85%A8%E5%B1%8F%E4%B8%8B%E7%9A%84%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5\">全屏下的键盘输入</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81\">交互式的表单验证</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6\">输入事件</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#html5%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%89%B9%E6%80%A7\">HTML5的下载特性</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#html%E5%AA%92%E4%BD%93%E6%8D%95%E6%8D%89\">HTML媒体捕捉</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#%E6%94%B9%E8%BF%9B%E4%BA%86code-classlanguage-textfixedcode%E5%92%8Ccode-classlanguage-textstickycode%E5%85%83%E7%B4%A0%E7%9A%84%E5%AE%9A%E4%BD%8D\">改进了&#x3C;code class=\"language-text\">fixed&#x3C;/code>和&#x3C;code class=\"language-text\">sticky&#x3C;/code>元素的定位</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#%E6%94%B9%E8%BF%9B%E7%9A%84web%E8%B0%83%E8%AF%95\">改进的Web调试</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#css%E5%85%A8%E8%8C%83%E5%9B%B4%E8%89%B2%E5%BD%A9%EF%BC%88wide-gamut-colors%EF%BC%89\">CSS全范围色彩（Wide-Gamut Colors）</a></li>\n<li><a href=\"/posts/new-web-features-in-safari-10-1/#%E5%90%8E%E8%AE%B0\">后记</a></li>\n</ul>","excerpt":"伴随着 iOS 10.3 和 macOS Sierra 10.12.4 的更新，一个新版本的Safari也随之而来，其中有许多值得一提的web新特性让前端工程师激动不已，恩，值得唠唠。 这次新版本的发布不仅让web更为强大，同时也简化了当前代码的维护，使得web…"}},{"node":{"fields":{"slug":"/posts/array-filter-map-reduce-in-js"},"html":"<h1 id=\"写在前面的话\"><a href=\"#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写在前面的话</h1>\n<p>前几天<a href=\"/array-filter-trick\">写了篇文章</a>科普了下Javascript中<code class=\"language-text\">Array.filter()</code>的妙用，后来无意间发现了<a href=\"http://atendesigngroup.com/blog/array-map-filter-and-reduce-js\">一篇好文章</a>，一次性科普了三个API：<code class=\"language-text\">filter</code>、<code class=\"language-text\">map</code>和<code class=\"language-text\">reduce</code>，生动形象，尤其是配图，显然是用了心思。下面是译文：</p>\n<h1 id=\"译文\"><a href=\"#%E8%AF%91%E6%96%87\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>译文</h1>\n<p><img src=\"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/array-1.png\" alt=\"array top image\"></p>\n<p>最近，一直在为一个客户做一个视觉化数据的项目，从服务端API拉取数据回来然后转换出视觉效果，自然少不了大量的数据操作，为此我一再使用Javascript中的Array 三个API：<code class=\"language-text\">filter</code>、<code class=\"language-text\">map</code>和<code class=\"language-text\">reduce</code>。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Map</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">Filter</a>和<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">Reduce</a>常常被用于对一个数组做一些操作，进而转换成某个新的东西（数据类型不一定还是数组哦~）。下面是我对这三个API的直观认识：</p>\n<h1 id=\"map\"><a href=\"#map\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map</h1>\n<p><img src=\"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/array-map.png\" alt=\"array-map\"><br>\n你想将一个数组中的每一项做个转换，结果生成了一个新数组，并且新数组的长度和原数组一致。</p>\n<h1 id=\"filter\"><a href=\"#filter\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter</h1>\n<p><img src=\"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/array-filter.png\" alt=\"array-filter\"><br>\n你想将一个数组做一个过滤，按照某规则提取出一些特定的项来。结果也生成了一个新数组，但新数组的长度小于或等于原数组。</p>\n<h1 id=\"reduce\"><a href=\"#reduce\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reduce</h1>\n<p><img src=\"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/array-reduce.png\" alt=\"array-reduce\"><br>\n你想通过遍历一个数组的每一项来计算出一个新东西，最后生成的结果可以是任何类型的变量：一个新数组，一个新对象，一个新布尔值…</p>\n<p><code class=\"language-text\">filter</code>、<code class=\"language-text\">map</code>和<code class=\"language-text\">reduce</code>共同点就是并不会对原数组做任何改动，结果都是生成一个新变量。让我们来看一些例子：</p>\n<h1 id=\"arraymap\"><a href=\"#arraymap\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.map()</h1>\n<p>现在我们有一个对象列表，其中每个对象代表的是一种变形金刚（译注：看来这位歪果仁是个变形金刚粉丝）：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> transformers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Optimus Prime'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Freightliner Truck'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Autobot'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Megatron'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Gun'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Bumblebee'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'VW Beetle'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Autobot'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Soundwave'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Walkman'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>那么，问题来了，如果想得到一个包含所有变形（form）的列表该怎么做呢？<code class=\"language-text\">Array.map()</code>让一切变得简单。它的基本使用语法是这样的：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>当然，还有种更复杂点的语法场景，只不过不常用到：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><code class=\"language-text\">callback</code>会遍历数组的每个元素，在其中返回的每一个数值将会组成新数组。<code class=\"language-text\">callback</code>有多种书写方式：<br>\n命名函数：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getForm</span><span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> transformer<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> robotsInDisguise <span class=\"token operator\">=</span> transformers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* robosInDisguise === ['Freightliner Truck', 'Gun', 'VW Beetle', 'Walkman'] */</span></code></pre>\n      </div>\n<p>匿名函数：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">robotsInDisguise <span class=\"token operator\">=</span> transformers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> transformer<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>箭头函数：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">robotsInDisguise <span class=\"token operator\">=</span> transformers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>transformer <span class=\"token operator\">=></span> transformer<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>ES2015的箭头函数和<code class=\"language-text\">Array.map()</code>搭配使用简直不能更爽了！</p>\n<h1 id=\"arrayfilter\"><a href=\"#arrayfilter\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.filter()</h1>\n<p>语法：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><code class=\"language-text\">callback</code>将数组元素当参数传入，并返回一个布尔值。当返回值为真时，该元素被加入新数组中，反之则被过滤掉。<br>\n现在我们把这些变形金刚过滤出<strong>汽车人</strong>(Autobots)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isAutobot</span><span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> transformer<span class=\"token punctuation\">.</span>team <span class=\"token operator\">===</span> ‘Autobot’<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> autobots <span class=\"token operator\">=</span> transformers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isAutobot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n\nautobots ==  [\n\n  {\n\n    name: 'Optimus Prime',\n\n    form: 'Freightliner Truck',\n\n    team: 'Autobot'\n\n  },\n\n  {\n\n    name: 'Bumblebee',\n\n    form: 'VW Beetle',\n\n    team: 'Autobot'\n\n  }\n\n]\n\n*/</span></code></pre>\n      </div>\n<h1 id=\"arrayreduce\"><a href=\"#arrayreduce\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.reduce()</h1>\n<p><code class=\"language-text\">Array.reduce()</code>是通过遍历每个数组元素对其做运算，因此，也是三个API之间最富有技巧的，其使用语法也略显复杂：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>谨记一条：我们是将数组元素通过遍历减少到一个值。比如现在有一组<strong>可组合变形金刚</strong>（译者注：我也不知道什么鬼，该怎么翻译，原词：Construction Transformers），它们能够组合成更大的变形金刚，我们可以通过代码来做出这样的组合：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> constructicons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Scrapper'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Freightliner Truck'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'rightLeg'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hook'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Mobile Crane'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'upperTorso'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Bonecrusher'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Bulldozer'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'leftArm'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Scavenger'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Excavator'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'rightArm'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Mixmaster'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Concrete Mixer'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'leftLeg'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Long Haul'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Dump Truck'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'lowerTorso'</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Reduce的<code class=\"language-text\">callback</code>需要至少两个参数。第一个是从上次遍历中返回的一个值，第二个是当前数组遍历到的一个值，返回值又将当做第一个参数被传入到下一次遍历。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">assemble</span><span class=\"token punctuation\">(</span>combiner<span class=\"token punctuation\">,</span> transformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">//每次遍历都会将当前的变形金刚（transformer）的名字加入到组合器（combiner）的form中去。</span>\n\n  combiner<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span>transformer<span class=\"token punctuation\">.</span>bodyPart<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> transformer<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> combiner<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这样，我们可以在调用reduce的时候，将<code class=\"language-text\">assemble</code>当做第一个参数传入，第二个参数是用来初次调用时的初始数据。接下来的例子便是我们提供一个仅仅有名字（name）和派别（team）的变形金刚，通过reduce中的<code class=\"language-text\">assemble</code>我们来组合成一个强大的变形金刚吧！</p>\n<p><img src=\"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/transform.gif\" alt=\"transforming\"></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> devastator <span class=\"token operator\">=</span> constructicons<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>assemble<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\n  name<span class=\"token punctuation\">:</span> ‘Devastator’<span class=\"token punctuation\">,</span>\n\n  team<span class=\"token punctuation\">:</span> ‘Decepticon’<span class=\"token punctuation\">,</span>\n\n  form<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\ndevastator == {\n\n  name: ‘Devastator’,\n\n  team: ‘Decepticon’,\n\n  form: {\n\n    leftArm: \"Bonecrusher\"\n\n    leftLeg: \"Mixmaster\"\n\n    lowerTorso: \"Long Haul\"\n\n    rightArm: \"Scavenger\"\n\n    rightLeg: \"Scrapper\"\n\n    upperTorso: \"Hook\"\n\n  }\n\n}\n\n*/</span></code></pre>\n      </div>\n<p>这些三个基本API一旦组合起来使用，也是很强大的。在此只是根据自己的使用经验抛砖引玉，想进一步了解的同学可以移步万能的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">MDN有关Array API的文档</a>。</p>","frontmatter":{"title":"Javascript Array中的filter、map和reduce","date":"2016-12-06T09:31:37.000Z","category":"它山之石","tags":["译文","技术","javascript","array"],"cover":"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/array-1.png"},"tableOfContents":"<ul>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D\">写在前面的话</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#%E8%AF%91%E6%96%87\">译文</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#map\">Map</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#filter\">Filter</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#reduce\">Reduce</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#arraymap\">Array.map()</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#arrayfilter\">Array.filter()</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#arrayreduce\">Array.reduce()</a></li>\n</ul>","excerpt":"写在前面的话 前几天 写了篇文章 科普了下Javascript中 的妙用，后来无意间发现了 一篇好文章 ，一次性科普了三个API： 、 和 ，生动形象，尤其是配图，显然是用了心思。下面是译文： 译文 最近，一直在为一个客户做一个视觉化数据的项目，从服务端API…"}},{"node":{"fields":{"slug":"/posts/building-my-first-ios-app-with-react-native-part-two"},"html":"<p><img src=\"https://zerosoul.github.io/2016/06/07/building-my-first-ios-app-with-react-native-part-two/rn.png\" alt=\"React Native\"></p>\n<h1 id=\"再续前缘\"><a href=\"#%E5%86%8D%E7%BB%AD%E5%89%8D%E7%BC%98\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>再续前缘</h1>\n<p><a href=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/\">第一篇文章</a>，我们从零开始，一步一步走到最后，构建了一个似乎并没有卵用的APP。但是，我们做了大量的基础工作，不就是为了在接下来的继续更轻松自信些嘛！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/zdw.jpg\" alt=\"wtf\"><br>\n其实，第一篇的信息量还是很大的，里面的每一个链接都是通往一个新知的大门，如果你觉得掌握得差不多了，那就开始新的旅（Che）程（Dan）吧！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/haha.png\" alt=\"你懂的\"><br>\n第二篇文章也是分五小节叙述，每一节完成一个小功能，最终召唤出还算有点卵用的APP。</p>\n<h1 id=\"1召唤出壁纸和作者\"><a href=\"#1%E5%8F%AC%E5%94%A4%E5%87%BA%E5%A3%81%E7%BA%B8%E5%92%8C%E4%BD%9C%E8%80%85\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.召唤出壁纸和作者</h1>\n<p>首先，我们先研究下数据，下面是从<a href=\"https://unsplash.it/list\">Unsplash</a>获取的一个数据实例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n\n    author<span class=\"token punctuation\">:</span><span class=\"token string\">\"Ben Moore\"</span>\n\n    author_url<span class=\"token punctuation\">:</span><span class=\"token string\">\"https://unsplash.com/@benmoore\"</span>\n\n    filename<span class=\"token punctuation\">:</span><span class=\"token string\">\"0102_pJILiyPdrXI.jpeg\"</span>\n\n    format<span class=\"token punctuation\">:</span><span class=\"token string\">\"jpeg\"</span>\n\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">3240</span>\n\n    id<span class=\"token punctuation\">:</span><span class=\"token number\">102</span>\n\n    post_url<span class=\"token punctuation\">:</span><span class=\"token string\">\"https://unsplash.com/photos/pJILiyPdrXI\"</span>\n\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">4320</span> \n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>要想获取该实例的图片，在浏览器中输入以下格式的URL<code class=\"language-text\">http://unsplash.it/{width}/{height}?image={id}</code>，换算到该实例即：<a href=\"http://unsplash.it/4320/3240?image=102\"><code class=\"language-text\">http://unsplash.it/4320/3240?image=102</code></a>。这样，我们就能拿到一张壁纸的地址了。我们可以用<code class=\"language-text\">Image</code>组件中的<code class=\"language-text\">source</code>来把图片加载出来。</p>\n<p>但是，进一步想了想，这么大的图片会有一定的加载时间，最好能有个图片的加载进度什么的，让用户不再一脸懵逼地等着。一开始就做对，后面的修改成本会小很多，有两个组件的组合能够做到预期效果：</p>\n<p><a href=\"https://github.com/oblador/react-native-image-progress\"><strong>image-native-progress</strong></a>和<a href=\"https://github.com/oblador/react-native-progress\"><strong>react-native-progress</strong></a>。</p>\n<p>在项目根目录下运行命令：<code class=\"language-text\">npm i --save react-native-image-progress react-native-progress</code>，然后，我们在<strong>index.ios.js</strong>中引用：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> NetworkImage <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-native-image-progress'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Progress <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-native-progress'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>既然要做手机壁纸应用，那么就应该得到手机屏幕的长和宽：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>Dimensions<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>'window’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>哦对了，为了去掉烦人的<code class=\"language-text\">React.Dimensions</code>，可以在头部引入<code class=\"language-text\">Dimensions</code>组件：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n\n  AppRegistry<span class=\"token punctuation\">,</span>\n\n  StyleSheet<span class=\"token punctuation\">,</span>\n\n  Text<span class=\"token punctuation\">,</span>\n\n  View<span class=\"token punctuation\">,</span>\n\n  ActivityIndicatorIOS<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/***/</span>\n\n  Dimensions \n\n  <span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>这样，我们就可以在<code class=\"language-text\">renderResults</code>中使用<code class=\"language-text\">NetworkImage</code>了：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Swiper</span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">></span></span>\n\n  <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wallpaper<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n\n    <span class=\"token comment\">/***/</span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>View</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NetworkImage</span>\n\n          <span class=\"token attr-name\">source</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>uri<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`https://unsplash.it/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>width<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>height<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?image=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n\n          <span class=\"token attr-name\">indicator</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Progress<span class=\"token punctuation\">.</span>Circle<span class=\"token punctuation\">}</span></span>\n\n          <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>wallpaperImage<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NetworkImage</span><span class=\"token punctuation\">></span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>View</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">/***/</span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Swiper</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p><strong>注：此处<code class=\"language-text\">NetworkImage</code>的<code class=\"language-text\">uri</code>特性用到了ES6的模板字符串特性，懵逼的同学去<a href=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/#%E5%85%88%E8%B0%88%E8%B0%88%E9%9C%80%E6%B1%82\">上一篇文章</a>找链接复习一下哈。</strong></p>\n<p>再加个样式：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">wallpaperImage<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\n  flex<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n  width<span class=\"token punctuation\">:</span> width<span class=\"token punctuation\">,</span>\n\n  height<span class=\"token punctuation\">:</span> height<span class=\"token punctuation\">,</span>\n\n  backgroundColor<span class=\"token punctuation\">:</span> ‘#<span class=\"token number\">000</span>’\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>保存然后刷新模拟器，不出意外的话…你将看到一堆报错的页面。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/long.jpg\" alt=\"成龙\"><br>\n别慌，我们来研究下刚刚加的代码，注意到<code class=\"language-text\">indicator={Progress.Circle}</code>没有？在<code class=\"language-text\">react-native-progress</code>文档里有提到（别告诉我你没看<a href=\"https://github.com/oblador/react-native-progress\">文档</a>(╯‵□′)╯︵┻━┻），<code class=\"language-text\">Progress.Circle</code>需要<strong>ReactART</strong>：使用React来画矢量图的类库。我们不需要下载任何新东西，只需要通过Xcode将其引入到项目中。<br>\n很简单，只是有点繁琐：</p>\n<ol>\n<li>移步 <code class=\"language-text\">node_modules/react-native/Libraries/ART/</code><br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/dir.png\" alt=\"art目录\"></li>\n<li>将<em>ART.xcodeproj</em>拖拽到Xcode的<em>PIW/Libraries</em>下<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/libs.png\" alt=\"libs\"></li>\n<li>定位到<em>Build Phases</em>，友情提示：它与<em>General</em>,<em>Capabilities</em>等同级。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/buildphase.png\"></li>\n<li>将<em>ART.xcodeproj/Products</em>下的<em>libART.a</em>拖拽到<em>Build Phases</em>下的<em>Link Binary With Libraries</em>条目下：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/linklib.png\"></li>\n</ol>\n<p>就这么简单，全是些拖拖拽拽的活儿。</p>\n<p>然后，刷新模拟器。酷！我们已经能够看到带加载进度的壁纸，并且能左右滑动浏览。有没有碰到心动的图片？载下来？莫慌，待会儿来满足你。现在，我们先修改下进度提示的样式，这个在<code class=\"language-text\">NetworkImage</code>下的<code class=\"language-text\">indicatorProps</code>可以设置：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NetworkImage</span>\n\n  <span class=\"token attr-name\">source</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>uri<span class=\"token punctuation\">:</span><span class=\"token template-string\"><span class=\"token string\">`https://unsplash.it/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>width<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>height<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?image=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n\n  <span class=\"token attr-name\">indicator</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Progress<span class=\"token punctuation\">.</span>Circle<span class=\"token punctuation\">}</span></span>\n\n  <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>wallpaperImage<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token comment\">/***/</span>\n\n  indicatorProps<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n\n    color<span class=\"token punctuation\">:</span><span class=\"token string\">'rgba(255,255,255,0.8)'</span><span class=\"token punctuation\">,</span>\n\n    size<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n\n    thickness<span class=\"token punctuation\">:</span><span class=\"token number\">4</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/***/</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NetworkImage</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>修改后进度提示应该长这样：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/indicator.png\" alt=\"indicator\"></p>\n<p>接下来，把图片的作者名字加上，我们要做尊重知识版权的好公民：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NetworkImage</span>\n\n<span class=\"token attr-name\">...</span>\n\n<span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">/***/</span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Text</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Photo by<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Text</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Text</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>label\\_author\\_name<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>wallpaper<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Text</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NetworkImage</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>别忘了创建各自对应的样式对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">label:</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span><span class=\"token string\">'absolute'</span>,\n\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span><span class=\"token string\">'#fff'</span>,\n\n    <span class=\"token property\">fontSize</span><span class=\"token punctuation\">:</span>13,\n\n    <span class=\"token property\">backgroundColor</span><span class=\"token punctuation\">:</span><span class=\"token string\">'#000'</span>,\n\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span>5,\n\n    <span class=\"token property\">paddingLeft</span><span class=\"token punctuation\">:</span>8,\n\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>20,\n\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>20\n\n  <span class=\"token punctuation\">}</span><span class=\"token selector\">,\n\nlabel_author_name:</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span><span class=\"token string\">'absolute'</span>,\n\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span><span class=\"token string\">'#fff'</span>,\n\n    <span class=\"token property\">fontSize</span><span class=\"token punctuation\">:</span>15,\n\n    <span class=\"token property\">backgroundColor</span><span class=\"token punctuation\">:</span><span class=\"token string\">'#000'</span>,\n\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span>5,\n\n    <span class=\"token property\">paddingLeft</span><span class=\"token punctuation\">:</span>8,\n\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>52,\n\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>20,\n\n    <span class=\"token property\">fontWeight</span><span class=\"token punctuation\">:</span><span class=\"token string\">'bold'</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>来来来，我们瞅瞅加了作者后的效果：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/withauthor.png\"></p>\n<p>有木有瞬间感觉像那么回事儿了！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/dese.png\"></p>\n<p>走到这儿，这一节算完事儿了，为了能下载壁纸，我们将在下一节做一些更加有技术含量的事儿。</p>\n<h1 id=\"2-捕捉双击操作double-taps\"><a href=\"#2-%E6%8D%95%E6%8D%89%E5%8F%8C%E5%87%BB%E6%93%8D%E4%BD%9Cdouble-taps\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 捕捉双击操作(Double-Taps)</h1>\n<p>这一节我们要用到的是PanResponder，这个API能做一些很酷的事情，比如捕捉双击操作。</p>\n<p>其实，如果偷懒，完全可以在页面上放一个下载按钮，点击就下载，完活儿！但是，我们要做就做有逼格的事儿，双击图片下载就很符合这个档次，恩，撸起袖子干吧！</p>\n<p>在开始之前，最好阅读一遍<a href=\"https://facebook.github.io/react-native/docs/panresponder.html\">PanResponder API</a>文档，因为你不读一遍，也不知道这个文档其实也没啥卵用o(╯□╰)o。不过我们至少知道了PanResponder的基本用法，这就够了。</p>\n<p>废话少说，开始撸代码。首先，在构造函数里声明一个新对象：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imagePanResponder <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>别忘了在顶部引入<code class=\"language-text\">PanResponder</code>的声明：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n\n  AppRegistry<span class=\"token punctuation\">,</span>\n\n  StyleSheet<span class=\"token punctuation\">,</span>\n\n  Text<span class=\"token punctuation\">,</span>\n\n  View<span class=\"token punctuation\">,</span>\n\n  ActivityIndicatorIOS<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/***/</span>\n\n  PanResponder\n\n  <span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>接下来我们要做两件事：</p>\n<ul>\n<li>创建一个<code class=\"language-text\">PanResponder</code>并赋值<code class=\"language-text\">imagePanResponder</code></li>\n<li>将<code class=\"language-text\">imagePanResponder</code>关联到<code class=\"language-text\">&lt;NetworkImage&gt;</code>组件</li>\n</ul>\n<p>为了完成第一件事，需要新增一个生命周期函数:<code class=\"language-text\">componentWillMount</code>。这个函数只有在组件首次渲染时才会触发，所以非常适合用于初始化<code class=\"language-text\">PanResponder</code>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imagePanResponder <span class=\"token operator\">=</span> PanResponder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n      onStartShouldSetPanResponder<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStartShouldSetPanResponder<span class=\"token punctuation\">,</span>\n\n      onPanResponderGrant<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlePanResponderGrant<span class=\"token punctuation\">,</span>\n\n      onPanResponderRelease<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlePanResponderEnd<span class=\"token punctuation\">,</span>\n\n      onPanResponderTerminate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlePanResponderEnd\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>初始化完了，就可以将这些事件关联到<code class=\"language-text\">NetworkImage</code>组件了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imagePanResponder<span class=\"token punctuation\">.</span>panHandlers<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre>\n      </div>\n<p>注：<code class=\"language-text\">...</code>是ES6中的扩展运算符，如果懵逼，请移步<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator\">这里</a>充电。</p>\n<p>一般来说，一个触摸事件有三个阶段：开始（start）、移动（move）、释放（release），一个组件能够通过声明响应特定的触摸事件。<code class=\"language-text\">PanResponder.create({...</code>下提到的第一个事件<code class=\"language-text\">onStartShouldSetPanResponder</code>，从英文名字的意思大概也能猜出，这是在请求是否能将<code class=\"language-text\">PanResponder</code>绑定在该组件上。紧跟其后是一个方法<code class=\"language-text\">this.handleOnStartShouldSetPanResponder</code>，用于响应该事件，若该方法返回<code class=\"language-text\">true</code>，则通过请求，然后才能谈下一步，<code class=\"language-text\">false</code>则相反。所以，你应该知道在此我们应该返回什么，认清你的阶级立场，同志，老大哥在看着你：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">handleStartShouldSetPanResponder</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> gestureState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>紧随其后的<code class=\"language-text\">onPanResponderGrant</code>是在一旦有了触摸时触发，在此我们先打印一个信息占个坑：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">handlePanResponderGrant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手指触摸到屏幕啦~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>最后两个事件从字面上也都能自解释，在手指离开屏幕时，都能触发，在此我们还是先打印信息占个坑：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">handlePanResponderEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手指离开屏幕啦~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>保存代码，壁纸一旦加载完毕，点击一下，应该会看到如下打印信息：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/touched.png\"></p>\n<p>OK，基于这些认知，我们可以开始捕捉双击操作了。判断是否为双击操作的关键是需要知道上一操作的信息：触摸发生的<strong>坐标</strong>和<strong>时间戳</strong>。在构造函数新增对象<code class=\"language-text\">prevTouchInfo</code>用于保存触摸信息：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prevTouchInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token constant\">X</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token constant\">Y</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n  timeStamp<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>然后，在<code class=\"language-text\">handlePanResponderGrant</code>更新这个对象(注意代码的次序)：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">handlePanResponderGrant</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> gestureState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token keyword\">var</span> currentTouchTimeStamp <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDoubleTap</span><span class=\"token punctuation\">(</span>currentTouchTimeStamp<span class=\"token punctuation\">,</span> gestureState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> \n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'双击操作'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prevTouchInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token constant\">X</span><span class=\"token punctuation\">:</span> gestureState<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">,</span>\n\n    <span class=\"token constant\">Y</span><span class=\"token punctuation\">:</span> gestureState<span class=\"token punctuation\">.</span>y0<span class=\"token punctuation\">,</span>\n\n    timeStamp<span class=\"token punctuation\">:</span> currentTouchTimeStamp\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"language-text\">handlePanResponderGrant</code>在每次单击时都会触发，但是有个地方需要特别注意：此处的<code class=\"language-text\">this</code>并不是指向<code class=\"language-text\">PIW</code>类，而是<code class=\"language-text\">PanResponder</code>，为了正确的引用，我们需要在构造函数使用<code class=\"language-text\">bind</code>重新定向一下。而如果我们一开始选用<code class=\"language-text\">React.createClass({ ... })</code>来创建组件，就不会存在这个问题，<strong>autobinding</strong>会帮我们搞定这个问题。也算有得有失吧:</p>\n<p>1</p>\n<p>this.handlePanResponderGrant = this.handlePanResponderGrant.bind(this);</p>\n<p><code class=\"language-text\">isDoubleTap</code>是我们预先埋好的坑，下面我们填上它：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">isDoubleTap</span><span class=\"token punctuation\">(</span>currentTouchTimeStamp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token punctuation\">,</span> timeStamp<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prevTouchInfo<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> dt <span class=\"token operator\">=</span> currentTouchTimeStamp <span class=\"token operator\">-</span> timeStamp<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>dt <span class=\"token operator\">&lt;</span> <span class=\"token constant\">DOUBLE</span>\\_TAP\\_DELAY <span class=\"token operator\">&amp;&amp;</span> Utils<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">DOUBLE</span>\\_TAP\\_RADIUS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>好吧，你可能会注意到了，坑里有坑：</p>\n<ul>\n<li>\n<p><code class=\"language-text\">DOUBLE_TAP_DELAY</code>和<code class=\"language-text\">DOUBLE_TAP_RADIUS</code>是我们定义的常量，需要在头部初始化一下:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">DOUBLE</span>\\_TAP\\_DELAY <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// milliseconds</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DOUBLE</span>\\_TAP\\_RADIUS <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n</li>\n<li>\n<p>新建一个模块<strong>utils.js</strong>，暴露出<code class=\"language-text\">distance</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> x1 <span class=\"token operator\">-</span> x0 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> y1 <span class=\"token operator\">-</span> y0 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n</li>\n</ul>\n<p><code class=\"language-text\">distance</code>是用来计算两个坐标之间的直线距离，还记得中学的几何公式吗？<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/distance.png\" alt=\"distance\"></p>\n<p><code class=\"language-text\">handlePanResponderGrant</code>最后一步是更新<code class=\"language-text\">prevTouchInfo</code>。</p>\n<p>保存代码，等壁纸加载完毕，双击屏幕，如果不出意外的话，控制台里会输出:<strong>双击操作</strong>。</p>\n<h1 id=\"3将壁纸保存到本地相册\"><a href=\"#3%E5%B0%86%E5%A3%81%E7%BA%B8%E4%BF%9D%E5%AD%98%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.将壁纸保存到本地相册</h1>\n<p>现在我们能捕捉到双击的手势了，也就可以开始着手撸保存壁纸的代码了。首先，我们把console代码替换成一个调用的方法，先占坑。  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isDoubleTap</span><span class=\"token punctuation\">(</span>currentTouchTimeStamp<span class=\"token punctuation\">,</span> gestureState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveCurrentWallpaperToCameraRoll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>一会儿我们再来实现<code class=\"language-text\">saveCurrentWallpaperToCameraRoll</code>，下面我们先来看另一个问题：壁纸有五张，如何定位当前的这一张？<br>\n我们可以通过从零开始的索引来定位当前图片，每滑动一次就加1或者减1:  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>还记得上一篇我们预留的一个坑位吗？<code class=\"language-text\">Swiper</code>里的<code class=\"language-text\">onMomentumScrollEnd</code>，在该方法里更新<code class=\"language-text\">currentWallIndex</code>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">onMomentumScrollEnd</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>同样的，别忘了在<code class=\"language-text\">constructor</code>里绑定<code class=\"language-text\">this</code>:</p>\n<p>1</p>\n<p>this.onMomentumScrollEnd = this.onMomentumScrollEnd.bind(this);</p>\n<p>好了，我们开始为<code class=\"language-text\">saveCurrentWallpaperToCameraRoll</code>填坑了。为了能访问相册，需要先引入<code class=\"language-text\">Camera Roll</code>类库，还记得开头是怎么引入<code class=\"language-text\">ReactART</code>的吗？没错，照做一遍就可以：<code class=\"language-text\">node_modules/react-native/Libraries/CameraRoll</code><br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/cameraroll.png\"></p>\n<p>然后就可以导入了：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n\n  View<span class=\"token punctuation\">,</span>\n\n  Text<span class=\"token punctuation\">,</span>\n\n  StyleSheet<span class=\"token punctuation\">,</span>\n\n  Dimensions<span class=\"token punctuation\">,</span>\n\n  PanResponder<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/***/</span>\n\n  CameraRoll<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 访问相册</span>\n\n  AlertIOS <span class=\"token comment\">// iOS的弹出框</span>\n\n  <span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>一旦壁纸保存到相册，我们需要给用户一个保存成功的提示，<code class=\"language-text\">AlertIOS</code>帮我们做到这一点。现在，我们可以着手实现<code class=\"language-text\">saveCurrentWallpaperToCameraRoll</code>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">saveCurrentWallpaperToCameraRoll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> currentWall <span class=\"token operator\">=</span> wallsJSON<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> currentWallURL <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`http://unsplash.it/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>width<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>height<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?image=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  CameraRoll<span class=\"token punctuation\">.</span><span class=\"token function\">saveImageWithTag</span><span class=\"token punctuation\">(</span>currentWallURL<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    AlertIOS<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>\n\n      <span class=\"token string\">'保存成功'</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token string\">'壁纸已保存到本地相册'</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token punctuation\">[</span>\n\n        <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">:</span> <span class=\"token string\">'好哒!'</span><span class=\"token punctuation\">,</span> onPress<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK Pressed!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">]</span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error saving to camera roll'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>以上代码都能做到自解释，不懂的地方移步：<a href=\"https://facebook.github.io/react-native/docs/cameraroll.html\">CameraRoll</a>和<a href=\"https://facebook.github.io/react-native/docs/alertios.html\">AlertIOS</a>，你懂的。</p>\n<p>好啦，保存代码，去模拟器体验一下保存壁纸功能：（首次保存需要手动同意获取访问相册的权限）<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/saved.png\"><br>\n完美！额，等等，从双击到壁纸保存成功，好像有那么几秒的等待时间，用户可能会认为双击不成功，然后再双击一次，这不是我们的期望，下一节专门解决这个问题！</p>\n<h1 id=\"4创建一个等待组件：waitingjs\"><a href=\"#4%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AD%89%E5%BE%85%E7%BB%84%E4%BB%B6%EF%BC%9Awaitingjs\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.创建一个等待组件：Waiting.js</h1>\n<p>如果没记错的话，我们将创建第一个组件：Waiting.js。这个组件用于异步操作的等待时间，比如保存壁纸到相册的操作，就很有必要加一个等待提示，让用户知道APP在做什么。</p>\n<p>在项目根目录新建文件：<strong>Waiting.js</strong>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n\n  View<span class=\"token punctuation\">,</span>\n\n  Text<span class=\"token punctuation\">,</span>\n\n  Component<span class=\"token punctuation\">,</span>\n\n  ActivityIndicatorIOS<span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">default</span> Waiting <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> isVisible<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> isVisible <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n\n        <span class=\"token operator\">&lt;</span>View \n\n         style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n\n          flex<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n          flexDirection<span class=\"token punctuation\">:</span> <span class=\"token string\">'row'</span><span class=\"token punctuation\">,</span>\n\n          justifyContent<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n          alignItems<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n          width<span class=\"token punctuation\">:</span> width<span class=\"token punctuation\">,</span>\n\n          height<span class=\"token punctuation\">:</span> height<span class=\"token punctuation\">,</span>\n\n          position<span class=\"token punctuation\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span>\n\n          top<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n          left<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n          backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'rgba(0, 0, 0, 0.5)'</span>\n\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n\n         <span class=\"token operator\">&lt;</span>ActivityIndicatorIOS\n\n            animating<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n\n            color<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'#fff'</span><span class=\"token punctuation\">}</span>\n\n            size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'large'</span><span class=\"token punctuation\">}</span> \n\n            style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>margin<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n           <span class=\"token operator\">&lt;</span>Text style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">:</span>’#fff’<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>正在保存，请稍后<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span> \n\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>View<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span> \n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Waiting<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><code class=\"language-text\">render</code>第一行代码作用是从组件的<code class=\"language-text\">props</code>中获取相应的属性，其中<code class=\"language-text\">isVisible</code>用于判断是否显示该组件，使用该组件的格式：  </p>\n<p>1</p>\n<Waiting width={width} height={height} isVisible={isWaitingVisible}/>\n<p>在<strong>index.ios.js</strong>中引入<strong>Waiting.js</strong>  </p>\n<p>1</p>\n<p>var Waiting = require('./Waiting.js');</p>\n<p>为了能控制Waiting组件的显示与隐藏，需要在<strong>index.ios.js</strong>新增一个状态：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  wallsJSON<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  isLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/***/</span>\n\n  isWaitngVisible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 默认不显示</span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>现在，我们可以在<code class=\"language-text\">&lt;/Swiper</code>之后放入<code class=\"language-text\">&lt;Waiting&gt;</code>组件了，不过，直接这样做会导致报错，因为<a href=\"https://facebook.github.io/react/tips/maximum-number-of-jsx-root-nodes.html\">React不允许返回多个组件</a>。为了解决这个问题，我们需要用<code class=\"language-<view\">&lt;/View</code>再做一个简单的包裹：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">renderResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">,</span> isWaitngVisible<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\n  <span class=\"token comment\">/***/</span>\n\n    <span class=\"token operator\">&lt;</span>View<span class=\"token operator\">></span>\n\n  <span class=\"token comment\">/***/</span>\n\n    <span class=\"token operator\">&lt;</span>Swiper\n\n      <span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n<span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">.</span>\n\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Swiper<span class=\"token operator\">></span>\n\n  <span class=\"token comment\">/***/</span>\n\n    <span class=\"token operator\">&lt;</span>Waiting width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span> isVisible<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isWaitngVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n\n  <span class=\"token comment\">/***/</span>\n\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>既然有了<code class=\"language-text\">isWaitngVisible</code>状态，我们就应该想一想在哪些时机来改变它的状态：双击触发时置为<code class=\"language-text\">true</code>，保存成功时置为<code class=\"language-text\">false</code>，对应到代码就是：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">saveCurrentWallpaperToCameraRoll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token comment\">// Waiting 组件显示</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isWaitingVisible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> currentWall <span class=\"token operator\">=</span> wallsJSON<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> currentWallURL <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`http://unsplash.it/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>width<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>height<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?image=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  CameraRoll<span class=\"token punctuation\">.</span><span class=\"token function\">saveImageWithTag</span><span class=\"token punctuation\">(</span>currentWallURL<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n    <span class=\"token comment\">// Waiting 组件隐藏</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isWaitingVisible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span>\n\n    AlertIOS<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>\n\n      <span class=\"token string\">'保存成功'</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token string\">'壁纸已保存到本地相册'</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token punctuation\">[</span>\n\n        <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">:</span> <span class=\"token string\">'好哒！'</span><span class=\"token punctuation\">,</span> onPress<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK Pressed!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">]</span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error saving to camera roll'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>模拟器刷新，双击壁纸，等待组件出现，稍后保存成功的弹窗出现，等待组件消失，完美！</p>\n<p>额，等等，真的很完美吗？有没有注意到保存完图片，屏幕跳到了第一张图片。这是因为我们在<code class=\"language-text\">saveWallpaperToCameraRoll</code>调用<code class=\"language-text\">this.setState()</code>，改变了<code class=\"language-text\">isWaitingVisible</code>的状态，触发了<code class=\"language-text\">render()</code>，从而<code class=\"language-text\">swiper</code>重新加载数据并从第一张图显示。</p>\n<p>为了解决这个bug，我们可以通过<code class=\"language-text\">Swiper</code>的<code class=\"language-text\">index</code>入手：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Swiper</span> <span class=\"token attr-name\">...</span>\n\n        <span class=\"token attr-name\">index</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>这样，就保证了每次重新渲染，都从保存的那张开始。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/saving.png\" alt=\"saving\"><br>\n好了，写到这里，我们基本完工一个核心功能完备的小应用：</p>\n<ul>\n<li>能加载随机精美壁纸</li>\n<li>能浏览</li>\n<li>能保存</li>\n</ul>\n<p>如果对随机的五张壁纸无感，想换一批，怎么破？当然，我们可以放置一个按钮，点击便能更新随机的壁纸数据，可是…能不能做得酷一些呢？比如只需要摇一摇手机，便更新了一批壁纸！</p>\n<p>年轻人，下一节我们做这件酷酷的事儿…<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/maomi.jpg\"></p>\n<h1 id=\"5摇一摇动作（shake）和真机测试\"><a href=\"#5%E6%91%87%E4%B8%80%E6%91%87%E5%8A%A8%E4%BD%9C%EF%BC%88shake%EF%BC%89%E5%92%8C%E7%9C%9F%E6%9C%BA%E6%B5%8B%E8%AF%95\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.摇一摇动作（Shake）和真机测试</h1>\n<p>为了使我们的APP能够捕捉到摇一摇的动作，需要新增一个模块：<a href=\"https://www.npmjs.com/package/react-native-shake-event-ios\">react-native-shake-event-ios</a>。项目根目录运行：<code class=\"language-text\">npm install --save react-native-shake-event-ios</code>。</p>\n<p>另外，我们还需要做的是链接相应的类库。如果没记错的话，这是第三次，也是最后一次做这样的操作，我就不多说了，应该熟练了，少年。温馨提示：<code class=\"language-text\">node_modules/react-native-shake-event-ios/</code>下的<code class=\"language-text\">RNShakeEvent.xcodeproj</code></p>\n<p>引用该类库：  </p>\n<p>1</p>\n<p>var ShakeEvent = require('react-native-shake-event-ios');</p>\n<p>我们在<code class=\"language-text\">componentWillMount</code>新增摇一摇的监听动作：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">...</span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token comment\">// 摇一摇，更新数据</span>\n\n  ShakeEvent<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shake'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchWallsJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"language-text\">initialize</code>填坑，其实就是初始化各种状态：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n    wallsJSON<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    isLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n    isWaitingVisible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>保存代码，接下来我们开始真机测试。当然，如果没有真机，也可以通过快捷键组合：<code class=\"language-text\">CMD + Ctrl + Z</code>模拟摇一摇操作。不过，我还是期望你有一部真机，因为…这样可以拿来装X啊，少年！</p>\n<p>真机测试意味着我们将脱离开发环境，像平时通过AppStore安装APP那样把我们的APP放到手机内。按照<a href=\"https://facebook.github.io/react-native/docs/running-on-device-ios.html#using-offline-bundle\">官方文档</a>来做，其实很简单：</p>\n<ol>\n<li>\n<p>找到<code class=\"language-text\">Xcode/PIW/PIW/AppDeletegate.m</code>，做以下操作：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/uncomment.png\"></p>\n</li>\n<li>\n<p><code class=\"language-text\">Product → Scheme → Edit Scheme</code>或者直接快捷键：<code class=\"language-text\">CMD + Shift + ,</code>，划入的窗口中将<code class=\"language-text\">Build Configuration</code>从<code class=\"language-text\">debug</code>改为<code class=\"language-text\">Release</code>:<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/schema.png\"><br>\n这样做的目的是为了防止摇一摇弹出调试菜单。</p>\n</li>\n<li>\n<p>转向<code class=\"language-text\">Build Setting</code>，禁掉<code class=\"language-text\">Dead Code Stripping</code>，别问我这是为啥，我也不清楚，可能这就是人生，年轻人。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/deadcode.png\"></p>\n</li>\n</ol>\n<p>联接你的iPhone到Mac上，选择真机运行：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/runmyphone.png\"></p>\n<p>好啦，万事俱备，只欠一个点击。首次打包和安装会持续较长时间，请耐心等候。安装过程中甭管蹦出什么，选择<strong>相信</strong>就行。注意，如果想恢复到开发环境，把上面的步骤1和步骤2撤销就可以了。</p>\n<p>安装完毕，手机桌面上就应该多出一个巨丑的APP图标，没错，那就是这么长时间我们辛苦做出的APP，快快打开体验一番吧！</p>\n<p>最后，我们把图标也加上：</p>\n<ol>\n<li>下载<a href=\"http://7xo6wq.com1.z0.glb.clouddn.com/SplashWallIcons.zip\">图标文件</a>。当然，你也可以自己按照<a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html\">苹果图标规定</a>来设计一套</li>\n<li>调转到Xcode<code class=\"language-text\">PIW/PIW/Images.xcassets</code>，选择AppIcon</li>\n<li>将图标文件按照规格拖拽到对应的框内，一个萝卜一个坑，so easy!<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/icons.png\"></li>\n</ol>\n<p>再次打包和运行，这次那个巨丑无比的图标应该不见了。</p>\n<p>卧槽，我们目前是不是可以说正式完成了一个APP版本的迭代？是的，我们做到了！</p>\n<h1 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h1>\n<p>又到了总结时间了，这一次我们都做了哪些事情呢：</p>\n<ul>\n<li><code class=\"language-text\">NetworkImage</code>组件让我们能够显示出带加载进度的图片</li>\n<li><code class=\"language-text\">PanResponder</code>API让我们能够捕捉到双击操作</li>\n<li><code class=\"language-text\">Camera Roll</code>让我们能够将壁纸保存到本地相册</li>\n<li><code class=\"language-text\">Waiting</code>是我们首个自定义的组件，让用户在保存壁纸的同时不再懵逼</li>\n<li><code class=\"language-text\">react-native-shake-event-ios</code>让我们能够检测到摇一摇操作，并在恰当的时机，更新随机数据</li>\n</ul>\n<p>目前为止，我们已经完成了一个功能较完备的APP，同时也学习了许多新知，没有过多地深入，但均给出了深入的入口，也就是文章中的链接。其实，这个APP还可以加入许多好玩的特性，比如：</p>\n<ul>\n<li>既然有双击操作，是不是可以考虑加一个单击操作：单击壁纸，隐藏顶部的两个小黑条和底部的分页，也就是全屏显示壁纸，看得更爽一些，再次单击，恢复隐藏的元素。</li>\n<li>有没有可能做一个设置壁纸前的预览功能呢？虽然可能从API上有所限制，但我们可以通过一些hack的方式来达到类似的目的，至于什么方式，发挥你的脑洞去试试吧。</li>\n<li>每次打开APP都要从第三方获取数据，对于在非WiFi环境，用户可能会有所顾虑，是不是应该做一个本地缓存第三方数据的功能，甚至图片？</li>\n<li>现在我们的代码组织并不很模块化，这一点可不可以做些优化？</li>\n<li>React Native 也可以做安卓开发，尝尝鲜？</li>\n</ul>\n<p>以上是我能想到的一些功能点和优化点，如果我们能一步一步走到现在，相信这些好玩的特性也不会那么难实现。或许，我还会写个番外篇，讲一讲如何继续迭代<strong>PIW</strong>。</p>\n<p>通过这个简单的APP，我们接触到了许多知识点，但React Native的学习远不止这些，一些高级话题我们还没涉猎，比如<code class=\"language-text\">Flux/Redux</code>。但万变不离阅读官方文档，加之实例练习，边学边总结，是我的节奏。Hey，man，你的节奏找到了吗？好了，我累了，打烊了…<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/tired.jpg\" alt=\"姚明\"><br>\n哦对了，最新代码放在了<a href=\"https://github.com/zerosoul/PIW\">Github上</a>，欢迎指正。</p>\n<h1 id=\"原文链接\"><a href=\"#%E5%8E%9F%E6%96%87%E9%93%BE%E6%8E%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原文链接</h1>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2016/04/how-to-build-your-first-ios-app-with-javascript/#\">The Beauty Of React Native: Building Your First iOS App With JavaScript (Part 2)</a></li>\n</ul>","frontmatter":{"title":"React Native之美：构建我的第一个iOS APP（2）","date":"2016-06-07T09:31:37.000Z","category":"它山之石","tags":["react native","react","翻译"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#%E5%86%8D%E7%BB%AD%E5%89%8D%E7%BC%98\">再续前缘</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#1%E5%8F%AC%E5%94%A4%E5%87%BA%E5%A3%81%E7%BA%B8%E5%92%8C%E4%BD%9C%E8%80%85\">1.召唤出壁纸和作者</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#2-%E6%8D%95%E6%8D%89%E5%8F%8C%E5%87%BB%E6%93%8D%E4%BD%9Cdouble-taps\">2. 捕捉双击操作(Double-Taps)</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#3%E5%B0%86%E5%A3%81%E7%BA%B8%E4%BF%9D%E5%AD%98%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C\">3.将壁纸保存到本地相册</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#4%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AD%89%E5%BE%85%E7%BB%84%E4%BB%B6%EF%BC%9Awaitingjs\">4.创建一个等待组件：Waiting.js</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#5%E6%91%87%E4%B8%80%E6%91%87%E5%8A%A8%E4%BD%9C%EF%BC%88shake%EF%BC%89%E5%92%8C%E7%9C%9F%E6%9C%BA%E6%B5%8B%E8%AF%95\">5.摇一摇动作（Shake）和真机测试</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#%E5%8E%9F%E6%96%87%E9%93%BE%E6%8E%A5\">原文链接</a></li>\n</ul>","excerpt":"再续前缘 第一篇文章 ，我们从零开始，一步一步走到最后，构建了一个似乎并没有卵用的APP。但是，我们做了大量的基础工作，不就是为了在接下来的继续更轻松自信些嘛！ 其实，第一篇的信息量还是很大的，里面的每一个链接都是通往一个新知的大门，如果你觉得掌握得差不多了，那就开始新的旅（Che）程（Dan…"}},{"node":{"fields":{"slug":"/posts/building-my-first-ios-app-with-react-native-part-one"},"html":"<p><img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/rn.png\" alt=\"React Native\"></p>\n<h1 id=\"写在前面的话\"><a href=\"#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写在前面的话</h1>\n<p>严格来说这是一篇译文，但与一般的翻译有所不同，我会修正原文中一些小错误，也会指出没有提及的一些坑，还会基于原文的想法做一些扩展开发。所以，读的时候有些是原作者的话，有些是我的添油加醋，但整体绝对保证流畅。另，基于原文改动较多，也就懒得一一标注出来，或许显得有些不负责，但是…<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/ldwy.jpg\" alt=\"来打我呀\"><br>\n好了，下面开始进入正题：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/zb.jpg\" alt=\"装逼\"></p>\n<h1 id=\"之前的困惑\"><a href=\"#%E4%B9%8B%E5%89%8D%E7%9A%84%E5%9B%B0%E6%83%91\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>之前的困惑</h1>\n<p>使用<code class=\"language-text\">Javascript</code>来构建移动应用已经不是什么新鲜事了。<a href=\"http://ionicframework.com/\">Ionic</a>和<a href=\"http://phonegap.com/\">Phonegap</a>已经做了大量的探索，建立了各自的开发生态圈，吸引了相当多的开发者，不得不说都获得了一定程度的成功。</p>\n<p>但是，尝试做了一些小Demo后，这些框架变得毫无吸引力，主要原因应该是<strong>很难做到原生体验</strong>。后来，转念一想，为啥不使用<code class=\"language-text\">Swift/Objective-C</code>或者<code class=\"language-text\">Java</code>构建原生app呢，诚然，这对于从前端开发转向app开发，需要学习的挺多，但这不正是一名现代Web开发者所擅长的吗：快速学习。那么，从哪儿开头呢？在Google过程中遇到了一篇文章：<a href=\"https://medium.com/ios-os-x-development/an-ios-developer-on-react-native-1f24786c29f0#.avhlz9qsr\">An iOS Developer on React Native</a>，其中一句话打动了我：</p>\n<blockquote>\n<p>Fast-forward a couple of months, and I’m confident enough to say I may never write an iOS app in Objective-C or Swift again.（快进几个月，我有足够的信心说：再也不会用Objective-C或者Swift来写iOS app了！）</p>\n</blockquote>\n<p>一切的遇见都不是偶然的。看来，官方语言也有不少坑，那为啥不选择<code class=\"language-text\">React Native</code>呢，更何况自己是前端工（Ban）程（Zhuan）师（De）。好吧，我承认绕了个不必要的圈子，但走一些弯路能看到更多的风景，不是吗？<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/ym.png\" alt=\"姚明\"><br>\n好的，下面先了解下需求。（难道不应该是先说一下<code class=\"language-text\">React Native</code>么 (╯‵□′)╯︵┻━┻）</p>\n<h1 id=\"先谈谈需求\"><a href=\"#%E5%85%88%E8%B0%88%E8%B0%88%E9%9C%80%E6%B1%82\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先谈谈需求</h1>\n<p>很不幸，我从未在苹果商店找到过一个设置手机壁纸的完美APP。在Mac上，<a href=\"http://unsplash.com/\">Unsplash</a>承包了我的所有这方面的需求，很完美，然而在手机上…对不起，打开<code class=\"language-text\">Setting</code>，找到<code class=\"language-text\">Wallpaper</code>…。</p>\n<p>为何不试着做一个满足自己需求的APP呢？下面是我目前希望有的功能点：</p>\n<ul>\n<li>随机展示适合当做手机壁纸的图片</li>\n<li>可以滑动浏览</li>\n<li>可以保存到相册</li>\n<li>保存前可以预览设置后的效果</li>\n</ul>\n<p>虽然最后一项不知道能否做到，但至少可以开始撸其它功能点了。额，等等，开始之前，我觉得有必要提醒一下你应该知道的事情：</p>\n<ul>\n<li>Javascript</li>\n<li>一些<code class=\"language-text\">ES6</code>的特性：<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\">类</a>，<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">箭头函数</a>,<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">解构</a>和<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/template_strings\">模板字符串</a></li>\n<li>Mac OS X 终端 （好吧，你应该有个Mac或者Macbook）</li>\n<li>CSS：flexbox (<a href=\"http://flexboxfroggy.com/\">这里</a>有个非常棒的flexbox游戏教程)</li>\n<li><a href=\"https://facebook.github.io/react/\">React</a>：React的一些基本概念需要知道，比如<code class=\"language-text\">JSX</code>、<code class=\"language-text\">state</code>和<code class=\"language-text\">prop</code>的区别、<code class=\"language-text\">Virtual DOM</code>。</li>\n</ul>\n<h1 id=\"再谈谈文章的规划\"><a href=\"#%E5%86%8D%E8%B0%88%E8%B0%88%E6%96%87%E7%AB%A0%E7%9A%84%E8%A7%84%E5%88%92\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>再谈谈文章的规划</h1>\n<p>由于涉及的知识点较多，<code class=\"language-text\">构建我的第一个iOS app</code>将分为两篇来完成。每一篇有<strong>五个章节</strong>，每个章节会推进一步，直至完成预期。文章略长，一旦开始，最好以章节为单位来进行。建议先收藏，回家坐在电脑前慢慢品。</p>\n<h2 id=\"1first-blood建一个空react-native项目\"><a href=\"#1first-blood%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A9%BAreact-native%E9%A1%B9%E7%9B%AE\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.First Blood:建一个空React Native项目</h2>\n<p>首先确认已安装：</p>\n<ul>\n<li><a href=\"https://developer.apple.com/xcode/\">XCode 7.0或更高版本</a></li>\n<li><a href=\"https://nodejs.org/en/\">Node</a></li>\n</ul>\n<p>然后，在终端输入：<code class=\"language-text\">npm install -g react-native-cli</code>，全局安装React Native。</p>\n<p>如果你觉得我说的不够详细，请移步<a href=\"https://facebook.github.io/react-native/docs/getting-started.html#content\">React Native的官方安装文档</a></p>\n<p>在你电脑找块风水宝地，用于初始化项目目录。在该文件夹下执行命令：<code class=\"language-text\">react-native init PIW</code>。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/init.png\" alt=\"init\"><br>\n（<code class=\"language-text\">PIW</code>是<code class=\"language-text\">Pick Image as Wallpaper</code>的缩写，不要在意这个细节，我为了装X起的。另，鉴于网络因素，等待时间应该较长，此时可以去小个便，或者逗逗你的宠物。）</p>\n<p><code class=\"language-text\">init</code>后的项目目录：</p>\n<p><img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/dir.png\" alt=\"项目目录\"></p>\n<p>很显然，<code class=\"language-text\">index.android.js</code>和<code class=\"language-text\">index.ios.js</code>分别是安卓和苹果应用的入口执行文件，由于我们构建的是iOS APP，所以接下来只跟<code class=\"language-text\">index.ios.js</code>打交道。接下来，移步<code class=\"language-text\">ios</code>文件夹，并双击打开<code class=\"language-text\">PIW.xcodeproj</code>。（Xcode的工程文件）<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/xcode.png\" alt=\"第一眼看到的xcode项目页面\"><br>\n注意有个警告：<code class=\"language-text\">No matching provisioning profiles found.</code>。得想办法修复它。先改个名字，<strong>Bundle Identifier</strong>：<code class=\"language-text\">com.zerosoul.me.tutorial.PIW</code>怎么样？有木有感觉很高大上！只要遵循<a href=\"https://en.wikipedia.org/wiki/Reverse_domain_name_notation\">Reverse DNS Convention</a>，请随意。然后选择<strong>Team</strong>，没有则按照指示新建一个。最后，点击<strong>Fix Issue</strong>。</p>\n<p><strong>Deployment Info</strong>一栏需要改动些默认设置，让app不能横屏，并且隐藏顶部的状态栏，下图红框已标出：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/deployinfo.png\" alt=\"deployment info\"></p>\n<p>好了，可以点击左上角的<strong>Run</strong>，看一看模拟器的效果了。中途应该会蹦出一个终端弹窗，不要慌，正常现象。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/popup.png\" alt=\"terminal popup\"></p>\n<p>一旦Xcode构建完，在模拟器里你会看到这一幕：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/welcome.jpg\" alt=\"welcome to React Native\"></p>\n<p><strong>注：此处有坑，如果你用真机模拟，会出现这么一幕：</strong><br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/localhost.png\" alt=\"大红的懵逼\"><br>\n大红的懵逼！不过别慌，官方文档有对应的解决方法，移步<a href=\"https://facebook.github.io/react-native/docs/running-on-device-ios.html\">这里</a>可以找到解决方式。</p>\n<h2 id=\"2-从第三方获取壁纸数据\"><a href=\"#2-%E4%BB%8E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96%E5%A3%81%E7%BA%B8%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 从第三方获取壁纸数据</h2>\n<p>既然要做壁纸APP，大量适合做手机壁纸的图片从哪里来？还记得前面提到的Unsplash吗？一切的遇见都不是偶然，好心的歪果仁做了一个<a href=\"https://unsplash.it/\">Unsplash图片调用接口</a>，用于生成一些精美占位图，非常方便！</p>\n<h3 id=\"有关code-classlanguage-textes6code中类的解释\"><a href=\"#%E6%9C%89%E5%85%B3code-classlanguage-textes6code%E4%B8%AD%E7%B1%BB%E7%9A%84%E8%A7%A3%E9%87%8A\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>有关<code class=\"language-text\">ES6</code>中“类”的解释</h3>\n<p>你可能会注意到，有些React代码会出现<code class=\"language-text\">var PIW = React.createClass({ ... })</code>，有些会是<code class=\"language-text\">class PIW extends Component{ ... }</code>。呵呵，这是个历史遗留问题，用哪种风格是个人选择问题，不存在孰优孰劣，有选择恐惧症的同学可以看看<a href=\"https://reactjsnews.com/composing-components\">这篇文章</a>。</p>\n<p>此处，我选择<code class=\"language-text\">Recat.Component</code>风格，别问我为什么，就这么任性！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/renxing.jpg\" alt=\"任性\"></p>\n<h3 id=\"开始做一些改动\"><a href=\"#%E5%BC%80%E5%A7%8B%E5%81%9A%E4%B8%80%E4%BA%9B%E6%94%B9%E5%8A%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>开始做一些改动</h3>\n<p>在<code class=\"language-text\">PIW</code>类里面，第一件事情便是加个构造函数<code class=\"language-text\">constructor</code>，在此初始化两个State：<code class=\"language-text\">wallsJSON</code>和<code class=\"language-text\">isLoading</code>。<code class=\"language-text\">wallsJSON</code>用于存储从第三方接口获取的json数组数据，<code class=\"language-text\">isLoading</code>是个布尔变量，用于标识数据是否加载完毕。  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PIW</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n      wallsJSON<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n      isLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><strong>注：方便起见，涉及的代码改动，我用`/*</strong>/<code class=\"language-text\">隔离标识出，下同。** 既然有存放数据的变量了，就得有给之赋值的函数，好吧，在</code>constructor<code class=\"language-text\">下面加一个占位函数</code>fetchWallsJSON`:  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetchWallsJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>‘壁纸数据从这里加载<span class=\"token operator\">...</span>’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>从业务逻辑来讲，组件一旦加载完毕，就应该触发该函数。那么，该<code class=\"language-text\">componentDidMount</code>上场了，它是React Native组件的生命周期函数之一，在首次渲染（<code class=\"language-text\">render</code>）成功后会触发。想要更系统地理解组件的生命周期，请移步<a href=\"https://facebook.github.io/react/docs/component-specs.html\">这里</a>。注意，既然我们用的ES6的类语法，就可以省略<code class=\"language-text\">getInitialState</code>了，取而代之的是在<code class=\"language-text\">constructor</code>中给<code class=\"language-text\">this.state</code>赋值。  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchWallsJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"language-text\">fetchWallsJSON</code>里会打印信息，我们应该从哪儿看到呢？首先，让模拟器获取焦点，使用<code class=\"language-text\">CMD + D</code>组合键调出调试菜单，选择<strong>Debug in Chrome</strong>，好吧，顺便把<strong>Enable live reload</strong>也打开吧，妈妈再也不用担心每次都要手动重启APP了。将会在Chrome里打开一个新标签，按照上面的说明调出<strong>console</strong>的界面。啊哈！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/console.png\" alt=\"console data loaded tip\"><br>\n坑占好了，下面，可以开始考虑引入真实数据了。访问URL：<a href=\"http://unsplash.it/list\">unsplash.it/list</a> ，你将会看到铺满全屏的数据，接下来我们就基于这些数据做文章啦~~~<br>\n首先，替换掉<code class=\"language-text\">console</code>:  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetchWallsJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/***/</span>\n\n    <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://unsplash.it/list'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> jsonData <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> error <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>‘获取数据有误： ‘ <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/***/</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><strong>注：用到了<code class=\"language-text\">fetch</code>函数，不熟悉的同学请参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">这里</a></strong><br>\n保存然后刷新，几秒过后，啊哈！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/consolerealdata.png\" alt=\"console real data\"></p>\n<p>太好了，我们已经能从第三方拿到数据了！在打印出数据前会有点延迟，这很正常，因为从请求到响应回数据会有个等待时间，此处应有<strong>加载提示</strong>。</p>\n<h2 id=\"3-增加加载提示\"><a href=\"#3-%E5%A2%9E%E5%8A%A0%E5%8A%A0%E8%BD%BD%E6%8F%90%E7%A4%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 增加加载提示</h2>\n<p>首先，把<code class=\"language-text\">PIW</code>类里<code class=\"language-text\">render</code>代码全部删除，新增以下代码：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>isLoading<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isLoading<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderLoadingScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">else</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>里面新增了两个函数，我们来实现它：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">renderLoadingScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\n        <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>loadingContainer<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n\n            <span class=\"token operator\">&lt;</span>ActivityIndicatorIOS\n\n              animating<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n\n              color<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'#fff'</span><span class=\"token punctuation\">}</span>\n\n              size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'small'</span><span class=\"token punctuation\">}</span> \n\n              style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>margin<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n              <span class=\"token operator\">&lt;</span>Text style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">:</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>正在加载数据<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n\n       <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">renderResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\n        <span class=\"token operator\">&lt;</span>View<span class=\"token operator\">></span>\n\n            <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>\n\n             数据已加载\n\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>根据<code class=\"language-text\">isLoading</code>的不同状态，渲染不同的界面。但是请注意，我们好像忘了什么。啊哈，<code class=\"language-text\">isLoading</code>并没有改变状态，应该在哪儿将其状态变过来呢？<code class=\"language-text\">fetchWallsJSON</code>！  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> jsonData <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//更新 isLoading </span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> error <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>‘获取数据有误：‘ <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span></code></pre>\n      </div>\n<p>有关<code class=\"language-text\">setState</code>的详细说明请移步<a href=\"https://facebook.github.io/react/docs/component-api.html\">这里</a>，一句话描述其作用就是用于触发UI更新。<br>\n另外，我们在<code class=\"language-text\">renderLoadingScreen</code>调用了一个新组件<code class=\"language-text\">ActivityIndicatorIOS</code>，因此，需要在头部引入之：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n\n  AppRegistry<span class=\"token punctuation\">,</span>\n\n  StyleSheet<span class=\"token punctuation\">,</span>\n\n  Text<span class=\"token punctuation\">,</span>\n\n  View<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/***/</span>\n\n  ActivityIndicatorIOS <span class=\"token comment\">// 增加新组件</span>\n\n  <span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>在看到最终效果前，还有一件事情：注意到<code class=\"language-text\">&lt;View&gt;</code>标签内有个<code class=\"language-text\">styles.loadingContainer</code>没有？没错，这是用来定义<code class=\"language-text\">View</code>的样式的，目前可以这样理解：React内的样式全部用行内样式来定义的。而样式则通过<code class=\"language-text\">var styles = StyleSheet.create({…</code>来创建，只需要在相应的组件里加以引用即可：<br>\n创建<code class=\"language-text\">loadingContainer</code>:  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> styles <span class=\"token operator\">=</span> StyleSheet<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n  loadingContainer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\n    flex<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n    flexDirection<span class=\"token punctuation\">:</span> <span class=\"token string\">'row'</span><span class=\"token punctuation\">,</span>\n\n    justifyContent<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n    alignItems<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n    backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'#000'</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>引用<code class=\"language-text\">loadingContainer</code>:  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>View</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>loadingContainer<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span></code></pre>\n      </div>\n<p>当然，也可以这样使用：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>View</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n\n    flex<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n    flexDirection<span class=\"token punctuation\">:</span> <span class=\"token string\">'row'</span><span class=\"token punctuation\">,</span>\n\n    justifyContent<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n    alignItems<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n    backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'#000'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n      </div>\n<p>不过这样做代码的可读性和可维护性较差，尤其在有很多组件的时候，容易乱套，所以并不是一个好的实践。另外，注意到没，React Native严重依赖<code class=\"language-text\">flexbox</code>布局元素，所以，学好<code class=\"language-text\">flexbox</code>这个知识点就很有必要。</p>\n<p>保存这些改动，你将会在模拟器中看到以下加载页面：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/loading.png\" alt=\"loading screen\"><br>\n过个几秒钟，将会转为：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/loaded.png\" alt=\"data loaded\"></p>\n<h2 id=\"4-筛选出随机的壁纸\"><a href=\"#4-%E7%AD%9B%E9%80%89%E5%87%BA%E9%9A%8F%E6%9C%BA%E7%9A%84%E5%A3%81%E7%BA%B8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 筛选出随机的壁纸</h2>\n<p>这一章节侧重于Javascript的编码，将创建一个专门的模块用于生成随机数。如果模块的概念感到陌生，请先移步<a href=\"https://nodejs.org/api/modules.html#modules_modules\">Node.js的模块文档</a>。</p>\n<p>首先，我们在<code class=\"language-text\">index.ios.js</code>的<code class=\"language-text\">class</code>声明前定义一个常量，用于决定要随机选取的壁纸数量。  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">NUM_WALLPAPERS</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>然后创建一个用户生成随机数的模块，这个模块内有两个函数：</p>\n<ul>\n<li><code class=\"language-text\">uniqueRandomNumbers</code>：该函数有三个参数，第一个决定了将要返回的随机数数量，后面两个定义随机数选取的范围。比如调用<code class=\"language-text\">uniqueRandomNumbers(5,10,20)</code>将获得包含5个随机数的数组，他们的范围在10到20之间。</li>\n<li><code class=\"language-text\">randomNumberInRange</code>：该函数有两个参数，定义了随机数范围，并返回一个随机数。比如调用<code class=\"language-text\">randomNumberInRange(2,10)</code>将返回介于2到10的随机的一个数。</li>\n</ul>\n<p>当然，我们完全可以将这两个函数合并为一个，但遵循<a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\"><strong>单一职责原则</strong></a>应该是编码的最佳实践：一个函数只做一件事并将其做好。相信我，遵循好的编程原则能让以后的日子好过一些。</p>\n<p>好了，思路表述完了，开始编码。首先，在根目录下新建一个js文件<code class=\"language-text\">RandManager.js</code>，以下是代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">uniqueRandomNumbers</span><span class=\"token punctuation\">(</span>numRandomNumbers<span class=\"token punctuation\">,</span> lowerLimit<span class=\"token punctuation\">,</span> upperLimit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">var</span> uniqueNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> uniqueNumbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> numRandomNumbers <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">var</span> currentRandomNumber <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumberInRange</span><span class=\"token punctuation\">(</span>lowerLimit<span class=\"token punctuation\">,</span> upperLimit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> uniqueNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>currentRandomNumber<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> \n\n                uniqueNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentRandomNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> uniqueNumbers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">randomNumberInRange</span><span class=\"token punctuation\">(</span>lowerLimit<span class=\"token punctuation\">,</span> upperLimit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> upperLimit <span class=\"token operator\">-</span> lowerLimit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> lowerLimit<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>在<code class=\"language-text\">index.ios.js</code>中引用<code class=\"language-text\">RandManager</code>模块：<code class=\"language-text\">var RandManager = require(&#39;./RandManager.js&#39;);</code>，然后我们就可以在<code class=\"language-text\">fetchWallsJSON</code>中调用啦：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetchWallsJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://unsplash.it/list'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> jsonData <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/***/</span>\n\n      <span class=\"token keyword\">var</span> randomIds <span class=\"token operator\">=</span> RandManager<span class=\"token punctuation\">.</span><span class=\"token function\">uniqueRandomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NUM_WALLPAPERS</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> jsonData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">var</span> walls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      randomIds<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>randomId <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n        walls<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>jsonData\\<span class=\"token punctuation\">[</span>randomId\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n        isLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n        wallsJSON<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>walls<span class=\"token punctuation\">)</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/***/</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> error <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'获取数据有误：'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>上面代码应该不用过多解释了，使用<code class=\"language-text\">uniqueRandomNumbers</code>生成5个随机数作为<code class=\"language-text\">jsonData</code>的索引值，进而获取5个随机壁纸数据并存入<code class=\"language-text\">wallsJSON</code>，哦对了，别忘了更新<code class=\"language-text\">isLoading</code>。</p>\n<p>有了随机数据，就可以在<code class=\"language-text\">renderResults</code>里使用了：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">renderResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n   <span class=\"token comment\">//这里用到了ES6中的解构</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">,</span> isLoading<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>isLoading <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\n    <span class=\"token operator\">&lt;</span>View<span class=\"token operator\">></span>\n\n        <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wallpaper<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n\n            <span class=\"token operator\">&lt;</span>Text key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n\n              <span class=\"token punctuation\">{</span>wallpaper<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>以上代码有个地方值得注意：React Native通过循环数组或集合渲染子元素时，需要给每个元素制定一个唯一的<code class=\"language-text\">key</code>，这也是为啥<code class=\"language-text\">&lt;Text key={index}&gt;</code>这样写的原因。</p>\n<p>保存代码，模拟器刷新后，我们看到了五个不同的id：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/randid.png\" alt=\"random id\"><br>\n当然，可以将<code class=\"language-text\">id</code>改为<code class=\"language-text\">author</code>，这样，我们看到的是五个不同的名字：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/randname.png\" alt=\"random name\"></p>\n<p>非常好，我们现在已经可以自如地操控数据了。</p>\n<h2 id=\"5-新增swiper组件\"><a href=\"#5-%E6%96%B0%E5%A2%9Eswiper%E7%BB%84%E4%BB%B6\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 新增Swiper组件</h2>\n<p>React Native有强大的社区支持和<a href=\"https://react.parts/native\">丰富的组件库</a>。这一章节学习如何引入第三方组件。<br>\n对于我们当前的APP，需要一个可滑动浏览图片的组件，推荐<a href=\"https://github.com/leecade/react-native-swiper\">react-native-swiper</a>。</p>\n<p>终端切换到项目根目录，运行命令：<code class=\"language-text\">npm install react-native-swiper --save</code>，然后<code class=\"language-text\">require</code>到代码里：<code class=\"language-text\">var Swiper=require(&#39;react-native-swiper&#39;)</code>。<br>\n将<code class=\"language-text\">renderResults</code>里的<code class=\"language-text\">View</code>替换为<code class=\"language-text\">Swiper</code>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">renderResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">,</span> isLoading<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>isLoading <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Swiper<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wallpaper<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>Text key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>wallpaper<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Swiper<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>不出意外的话，界面将变成下面这样：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/swiperwithdata.png\" alt=\"swiper with name data\"><br>\n下面，根据<a href=\"https://github.com/leecade/react-native-swiper\">Swiper组件的文档</a>，我们来微调一下样式：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Swiper</span> \n<span class=\"token attr-name\">dot</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>View</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>backgroundColor<span class=\"token punctuation\">:</span><span class=\"token string\">'rgba(255,255,255,.4)'</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>borderRadius<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> marginLeft<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> marginRight<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> marginTop<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> marginBottom<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n<span class=\"token attr-name\">activeDot</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>View</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> borderRadius<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> marginLeft<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> marginRight<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n<span class=\"token attr-name\">loop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token attr-name\">onMomentumScrollEnd</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onMomentumScrollEnd<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wallpaper<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Text</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span>wallpaper<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Text</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Swiper</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<ul>\n<li>微调了下底部分页小圆点，更大更黑了（卧槽，我在说什么…）</li>\n<li>禁用了循环，这样，一旦浏览到最后一页，然后就没有然后了。</li>\n<li>新增了每一页滑动完毕后的触发事件：<code class=\"language-text\">onMomentumScrollEnd</code>（这个会在下一篇文章中用到，此处先占个坑）</li>\n</ul>\n<p>我们已经把Swiper加上了，好啦，这一节就写到这里，因为…我累了。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/shuaiqi.jpg\"></p>\n<h1 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h1>\n<p>写到这里，我发现文章已经挺长的了。那么…再加个总结吧，都这么长了，应该不介意再长一点吧。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/youdaoli.jpg\" alt=\"有道理\"></p>\n<ul>\n<li>第一节讲的是如何新建一个空的React Native项目</li>\n<li>第二节讲的是如何从第三方API获取原始数据，并建议用ES6新语法来构建程序</li>\n<li>第三节我们根据APP不同的状态渲染出不同的界面</li>\n<li>第四节我们新建了一个模块，引入并解决了产生随机数的问题</li>\n<li>第五节我们新增了一个第三方组件，并做了简单设置。</li>\n</ul>\n<p>好吧，必须承认，目前为止，我们的APP看起来似乎没啥特殊之处。不过，刚入门嘛，一步一步走到这里，也不容易了。下一篇文章，我们将继续打磨这个APP，新增特性预告：</p>\n<ul>\n<li>作者名字将替换为图片，没错，高清无码大图</li>\n<li>自定义双击事件，保存图片到相册：<code class=\"language-text\">PanHandler</code></li>\n<li>通过Xcode新增类库并获取相应授权，比如访问相册</li>\n<li>增加预览功能</li>\n<li>创建更多的自定义组件<br>\n哦对了，最终代码在<a href=\"https://github.com/zerosoul/PIW\">这儿</a>。年轻人，我们下一回合见…<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/dengyan.png\"></li>\n</ul>\n<h1 id=\"原文链接\"><a href=\"#%E5%8E%9F%E6%96%87%E9%93%BE%E6%8E%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原文链接</h1>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2016/04/the-beauty-of-react-native-building-your-first-ios-app-with-javascript-part-1/\">The Beauty Of React Native: Building Your First iOS App With JavaScript (Part 1)</a></li>\n</ul>","frontmatter":{"title":"React Native之美：构建我的第一个iOS APP（1）","date":"2016-06-05T09:31:37.000Z","category":"它山之石","tags":["react native","react","翻译"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D\">写在前面的话</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E4%B9%8B%E5%89%8D%E7%9A%84%E5%9B%B0%E6%83%91\">之前的困惑</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E5%85%88%E8%B0%88%E8%B0%88%E9%9C%80%E6%B1%82\">先谈谈需求</a></li>\n<li>\n<p><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E5%86%8D%E8%B0%88%E8%B0%88%E6%96%87%E7%AB%A0%E7%9A%84%E8%A7%84%E5%88%92\">再谈谈文章的规划</a></p>\n<ul>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#1first-blood%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A9%BAreact-native%E9%A1%B9%E7%9B%AE\">1.First Blood:建一个空React Native项目</a></li>\n<li>\n<p><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#2-%E4%BB%8E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96%E5%A3%81%E7%BA%B8%E6%95%B0%E6%8D%AE\">2. 从第三方获取壁纸数据</a></p>\n<ul>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E6%9C%89%E5%85%B3code-classlanguage-textes6code%E4%B8%AD%E7%B1%BB%E7%9A%84%E8%A7%A3%E9%87%8A\">有关&#x3C;code class=\"language-text\">ES6&#x3C;/code>中“类”的解释</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E5%BC%80%E5%A7%8B%E5%81%9A%E4%B8%80%E4%BA%9B%E6%94%B9%E5%8A%A8\">开始做一些改动</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#3-%E5%A2%9E%E5%8A%A0%E5%8A%A0%E8%BD%BD%E6%8F%90%E7%A4%BA\">3. 增加加载提示</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#4-%E7%AD%9B%E9%80%89%E5%87%BA%E9%9A%8F%E6%9C%BA%E7%9A%84%E5%A3%81%E7%BA%B8\">4. 筛选出随机的壁纸</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#5-%E6%96%B0%E5%A2%9Eswiper%E7%BB%84%E4%BB%B6\">5. 新增Swiper组件</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E5%8E%9F%E6%96%87%E9%93%BE%E6%8E%A5\">原文链接</a></li>\n</ul>","excerpt":"…"}},{"node":{"fields":{"slug":"/posts/everything-about-promise"},"html":"<p><img src=\"https://zerosoul.github.io/2016/05/26/everything-about-promise/promise.jpg\" alt=\"javascript promise\"></p>\n<h1 id=\"引子\"><a href=\"#%E5%BC%95%E5%AD%90\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引子</h1>\n<p>先看一段代码：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// do something with the result</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>如果有似曾相识的感觉，那么你在理解javascript中的promise道路上已经迈出了一步。如果完全懵逼，别怕，接下来我们通过例子来了解promise为何物。</p>\n<p>作为新概念，一些人理解promise起来会有些困难，因为这需要思维上的转变。但是请相信我，经过几个实例的讲解，你会发现它的优雅：它使得让人头痛的异步代码写起来更为轻松，而且可以避免“回调大坑”（<a href=\"http://callbackhell.com/\">callback hell</a>）。</p>\n<p>promise背后的思想是：</p>\n<blockquote>\n<p>promise代表的是异步操作的<strong>最终</strong>（eventual）结果</p>\n</blockquote>\n<p>这意味着异步操作的结果并不能立即获取，而是要等到promise稳定了（settled）。</p>\n<p>想想你在日常生活中做出承诺（promise）的例子：小时候，你出门对老妈说：我保证（promise）把垃圾带出去。这句话的意思是在稍后的某个时间点你会去做<strong>扔垃圾</strong>这件事并兑现你的承诺。也许几分钟，也许几小时，也许…</p>\n<p>promise亦是如此。当一个函数返回一个promise，它其实是在说：嘿！我向你承诺，一旦完事，我将带着结果去找你！</p>\n<h1 id=\"举例\"><a href=\"#%E4%B8%BE%E4%BE%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>举例</h1>\n<p>好啦，理论和术语的东西讲多了让人烦，下面我们来例证上面说的一堆话。</p>\n<p>AJAX的概念应该不陌生吧，相信你之前使用过原生<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>，或者jQuery的<a href=\"http://api.jquery.com/jquery.ajax/\">$.ajax()</a>，或者其它类库。不过，XMLHttpRequest API既复杂又难记忆。谢天谢地，新API <a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">fetch</a>简化了ajax的应用，并且，它用到了promise！</p>\n<p>这意味着什么？其实，每当你使用fetch()发出请求，像这样：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some/endpoint'</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>它就会返回一个promise对象。</p>\n<p>通常我们会使用回调函数来响应异步请求完成时的操作。但是，在promise的世界里，我们得使用<code class=\"language-text\">then()</code>来达到这一目的。</p>\n<p>通过链式调用<code class=\"language-text\">.then(onFulfilled, onRejected)</code>来访问<code class=\"language-text\">fetch</code>的结果：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some/endpoint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Response from the endpoint '</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An error occurred: '</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p><code class=\"language-text\">then</code>方法提供两个参数：</p>\n<ol>\n<li><code class=\"language-text\">onFulfilled</code>：当promise完成（fulfilled）时调用，第一个参数表示promise的结果。</li>\n<li><code class=\"language-text\">onRejected</code>：当promise被拒（rejected）时调用，第一个参数表示promise被拒的原因。</li>\n</ol>\n<p><strong>完成</strong>和<strong>被拒</strong>是promise的两个状态，其实还有第三种状态：挂起（pending）。现在，我们来总结下<code class=\"language-text\">fetch</code>使用promise的经过：</p>\n<ol>\n<li>从调用<code class=\"language-text\">fetch()</code>那一刻，它就返回了一个promise对象</li>\n<li>在请求完成之前，promise的状态一直处于<strong>挂起</strong></li>\n<li>promise由挂起状态，可能会转为<strong>完成</strong>，也可能会是<strong>被拒</strong>。</li>\n</ol>\n<p>值得一提的是，一旦promise的状态转为完成或被拒，其值将不再改变。</p>\n<h1 id=\"使用code-classlanguage-textcatchcode错误处理\"><a href=\"#%E4%BD%BF%E7%94%A8code-classlanguage-textcatchcode%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用<code class=\"language-text\">catch()</code>错误处理</h1>\n<p><a href=\"https://promisesaplus.com/\">Promises/A+ 规范</a> 提供了一种语法糖来处理promise的错误。</p>\n<p>假设有个<code class=\"language-text\">lookupPrice(itemId)</code>函数，功能是查找数据库中特定商品的价格，如果存在记录则表示成功，否则表示失败。无论如何，最终返回一个promise对象，我们可以使用<code class=\"language-text\">catch()</code>来使代码更具可读性：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The item costs: '</span> <span class=\"token operator\">+</span> price<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Could not find an item with that ID'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>如果商品存在，将会打印：<code class=\"language-text\">The item costs: 50</code>，如果不存在，则打印：<code class=\"language-text\">Could not find an item with that ID</code>。</p>\n<p>如果你对<code class=\"language-text\">then()</code>情有独钟，上面的那段代码可以改写成下面的链式调用：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The item costs: '</span> <span class=\"token operator\">+</span> price<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Could not find an item with that ID'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<blockquote>\n<p>如果一个promise被拒，代码将直接跳到第一个<code class=\"language-text\">catch</code>或者有<code class=\"language-text\">onRejected</code>的<code class=\"language-text\">then</code>链式调用处。</p>\n</blockquote>\n<p>比如当我们使用一个不存在的商品id来调用<code class=\"language-text\">lookupPrice()</code>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">99999</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The item costs: '</span> <span class=\"token operator\">+</span> price<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> price\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Double the price: '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Could not find an item with that ID'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>由于两个<code class=\"language-text\">then</code>都没有<code class=\"language-text\">onRejected</code>，均被忽略了，代码直接跳到<code class=\"language-text\">catch</code>执行。</p>\n<p>接下来再列举两个代码片段，它们有细微差别，您瞧好了：<br>\n片段1：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用 then(onFulfilled, onRejected)</span>\n\n<span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// lookup another price and return the promise created by lookupPrice(456)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Item 123 does not exist'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>片段2：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用 catch()</span>\n\n<span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// lookup another price and return the promise created by lookupPrice(456)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Either item 123 OR 456 does not exist'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>片段1中，如果商品123不存在，带有<code class=\"language-text\">onRejected</code>的<code class=\"language-text\">then</code>将会被立即执行：</p>\n<ul>\n<li>在这个例子中将会打印“Item 123 does not exist”</li>\n<li>然而，并没有给<code class=\"language-text\">lookupPrice(456)</code>指定错误处理函数，所以，如果商品456不存在，什么都不会打印。这是个未捕捉到的错误(Uncaught error)。</li>\n</ul>\n<p>需要提醒的一点：当你链式调用<code class=\"language-text\">then(onFulfilled, onRejected)</code>，被执行的或者是<code class=\"language-text\">onFulfilled</code>，或者是<code class=\"language-text\">onRejected</code>，绝对不是两个都执行。</p>\n<p>片段2中：</p>\n<ul>\n<li>如果商品123不存在，代码直接进入<code class=\"language-text\">catch</code>，打印“Either item 123 OR 456 does not exist”</li>\n<li>由于在<code class=\"language-text\">then</code>之后链式调用了<code class=\"language-text\">catch</code>，在此之前任何promise转到了被拒状态，都将进入<code class=\"language-text\">catch</code>。所以，如果商品456也不存在，也会在屏幕上看到“Either item 123 OR 456 does not exist”。</li>\n</ul>\n<h1 id=\"使用code-classlanguage-textnew-promisecode创建promise\"><a href=\"#%E4%BD%BF%E7%94%A8code-classlanguage-textnew-promisecode%E5%88%9B%E5%BB%BApromise\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用<code class=\"language-text\">new Promise()</code>创建promise</h1>\n<p>目前为止，我们通过<code class=\"language-text\">fetch</code>API来了解了promise，通过<code class=\"language-text\">then</code>来使用promise的结果。多数情况下，我们会用到各式各样的类库来使用promise。然而，有时还是需要自己创建promise，自主决定什么情况下转入完成，什么情况下转入被拒。</p>\n<p>使用构造函数<code class=\"language-text\">Promise(resolver)</code>来创建promise实例，其中<code class=\"language-text\">resolver</code>接收两个参数：resolve和reject。似曾相识？恩哼？！</p>\n<p>举个栗子：比如我们想创建一个随机数1到10生成函数，并且返回一个promise。如果数字小于5，进入<code class=\"language-text\">resolve</code>（意味着操作成功），如果大于5，进入<code class=\"language-text\">reject</code>（意味着操作失败）。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">generateRandomNumber</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> randomNumber <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>randomNumber <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>randomNumber<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>randomNumber<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">generateRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success: '</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error: '</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<h1 id=\"链式调用：一次只完成一个任务\"><a href=\"#%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%EF%BC%9A%E4%B8%80%E6%AC%A1%E5%8F%AA%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>链式调用：一次只完成一个任务</h1>\n<p>链式调用多个<code class=\"language-text\">then</code>，可以做到进一步处理返回值，并且顺序化执行其它异步任务。</p>\n<p>在一些业务场景，这非常有用。比如，你要调用某个终端来认证用户，一旦认证成功，我们调用另一个终端来获取用户资料。</p>\n<p>上面那个场景用代码来表示的话，类似这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 认证id为333的用户</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/auth/333'</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token comment\">//将响应对象传值给authStatus，用以确认认证成功与否</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>authStatus<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//认证成功了，则继续调用loadProfile，并传入用户名</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>loadProfile<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//认证失败了，进入catch处理程序</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">authStatus</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//用户名将传入下一个`then`，即loadProfile</span>\n\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 认证失败，进入reject</span>\n\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User cannot be authenticated'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadProfile</span> <span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/profile/'</span> <span class=\"token operator\">+</span> userName<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>profileData<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>建议花上一两分钟看上几遍上面代码，研究下各个部分是如何组合在一起的。</p>\n<p>有两个地方需要特别注意下：</p>\n<ul>\n<li>一旦promise转为<strong>完成</strong>状态，它的值将被当做参数自动传入下一个<code class=\"language-text\">then</code>方法中。</li>\n<li>如果认证失败，将立即进入<code class=\"language-text\">catch</code>，并略过<code class=\"language-text\">.then(loadProfile)</code>。</li>\n</ul>\n<h1 id=\"promiseall：一次搞定！\"><a href=\"#promiseall%EF%BC%9A%E4%B8%80%E6%AC%A1%E6%90%9E%E5%AE%9A%EF%BC%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.all()：一次搞定！</h1>\n<p>如果我们不关心异步操作的执行顺序，换句话说，假如我们想在获取用户信息的同时，把最近发表的文章也获取了，该怎么办？</p>\n<p>这时候就该<code class=\"language-text\">Promise.all()</code>上场了。它将promise数组作为参数传入，并且实例化一个promise，只有当数组中所有的promise都转为完成状态时，该实例化promise才进入完成状态。但是，请记住，一旦参数中有一个promise是被拒状态，Promise.all()也就进入了被拒状态。要么所有的promise都完成，要么全部被拒。</p>\n<p>Promise.all()完成返回的结果是一个数组，其中的值对应参数中的promise数组。下面根据刚刚提到的那个场景，我们使用Promise.all()来实现下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/profile/333'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 获取用户信息</span>\n\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/posts/user/333'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取用户文章</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// `result`是一个长度为2的数组</span>\n\n  <span class=\"token keyword\">var</span> profileInfo <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>profileData\n\n  <span class=\"token keyword\">var</span> recentPosts <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>posts\n\n  <span class=\"token comment\">//处理数据 BLA BLA ~~~</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<h1 id=\"就这些了！我保证！（i-promise）\"><a href=\"#%E5%B0%B1%E8%BF%99%E4%BA%9B%E4%BA%86%EF%BC%81%E6%88%91%E4%BF%9D%E8%AF%81%EF%BC%81%EF%BC%88i-promise%EF%BC%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>就这些了！我保证！（I Promise）</h1>\n<p>一旦开始在代码中实践Promise，你会发现一切都变得相当简单。因此我建议你打开Chrome/Firefox的开发者工具，走一遍这篇文章里的例子。</p>\n<p>需要指出的是，有一个Promise的API我还没有提及:<code class=\"language-text\">Promise.race()</code>。它和<code class=\"language-text\">Promise.all()</code>类似，传入一个promise数组，并实例化一个promise，但不同之处在于传入的promise有任何一个转为完成，实例化的promise便进入完成，任何一个promise转为被拒，便进入被拒。个人认为，这并不十分实用，但我认为有一些特定业务场景会用得上它，你可以在<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\">这儿</a>熟悉下这个API，祝好运！</p>\n<h1 id=\"参考链接\"><a href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考链接</h1>\n<ul>\n<li>\n<p><a href=\"https://coligo.io/javascript-promises-plain-simple/\">JavaScript Promises: Plain and Simple</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN:Promise</a></p>\n</li>\n</ul>","frontmatter":{"title":"探索 Javascript Promise","date":"2016-05-26T09:31:37.000Z","category":"它山之石","tags":["译文","技术","javascript","promise"],"cover":"https://zerosoul.github.io/2016/05/26/everything-about-promise/promise.jpg"},"tableOfContents":"<ul>\n<li><a href=\"/posts/everything-about-promise/#%E5%BC%95%E5%AD%90\">引子</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E4%B8%BE%E4%BE%8B\">举例</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E4%BD%BF%E7%94%A8code-classlanguage-textcatchcode%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\">使用&#x3C;code class=\"language-text\">catch()&#x3C;/code>错误处理</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E4%BD%BF%E7%94%A8code-classlanguage-textnew-promisecode%E5%88%9B%E5%BB%BApromise\">使用&#x3C;code class=\"language-text\">new Promise()&#x3C;/code>创建promise</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%EF%BC%9A%E4%B8%80%E6%AC%A1%E5%8F%AA%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1\">链式调用：一次只完成一个任务</a></li>\n<li><a href=\"/posts/everything-about-promise/#promiseall%EF%BC%9A%E4%B8%80%E6%AC%A1%E6%90%9E%E5%AE%9A%EF%BC%81\">Promise.all()：一次搞定！</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E5%B0%B1%E8%BF%99%E4%BA%9B%E4%BA%86%EF%BC%81%E6%88%91%E4%BF%9D%E8%AF%81%EF%BC%81%EF%BC%88i-promise%EF%BC%89\">就这些了！我保证！（I Promise）</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">参考链接</a></li>\n</ul>","excerpt":"引子 先看一段代码：   如果有似曾相识的感觉，那么你在理解javascript中的promise道路上已经迈出了一步。如果完全懵逼，别怕，接下来我们通过例子来了解promise为何物。 作为新概念，一些人理解promise…"}},{"node":{"fields":{"slug":"/posts/anatomy-of-an-http-transaction"},"html":"<p><img src=\"https://zerosoul.github.io/2016/04/29/Anatomy-of-an-HTTP-Transaction/http.jpg\" alt=\"http\"></p>\n<h1 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>前两天node.js发布了新版本，想看看具体更新了啥，于是去<a href=\"http://nodejs.org\">官网</a>找changelog看了看，顺便逛了逛其它栏目。没想到，在DOCS下的<a href=\"https://nodejs.org/en/docs/guides/\">Guides</a>发现了一篇好文，讲的是node.js对http请求的处理过程，虽然不是很适合初学者，但顺藤摸瓜，能挖掘出许多知识点，串联起来，干货满满。下面是译文，没有逐字逐句翻译，有添油加醋的地方，但不影响原文的表达。</p>\n<h1 id=\"译文\"><a href=\"#%E8%AF%91%E6%96%87\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>译文</h1>\n<h2 id=\"温馨提示\"><a href=\"#%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>温馨提示</h2>\n<p>这篇文章目的在于阐释HTTP请求在node.js中的处理过程。所以前提是假定你知道HTTP为何物，并且对node.js的<a href=\"https://nodejs.org/api/events.html\">EventEmitters</a>和<a href=\"https://nodejs.org/api/stream.html\">Streams</a>有所了解，否则，最好快速过一下有关的<a href=\"https://nodejs.org/dist/latest-v6.x/docs/api\">API</a>。</p>\n<h2 id=\"创建服务器\"><a href=\"#%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>创建服务器</h2>\n<p>任何一个node web server在代码某一处都会通过<a href=\"https://nodejs.org/api/http.html#http_http_createserver_requestlistener\">createServer</a>创建一个web服务器对象.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 见证奇迹的时刻</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>作为参数传入<code class=\"language-text\">createServer</code>的函数是http请求必由之路，因此也叫作请求处理函数。事实上，<code class=\"language-text\">createServer</code>返回的<code class=\"language-text\">server</code>对象是一个<code class=\"language-text\">EventEmitter</code>，因此，上面那段代码也可以这么写：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 见证奇迹的时刻</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>当请求来临时，node.js会调用请求处理函数，并且封装好了两个常用对象：<strong>request</strong>和<strong>response</strong>。稍后我们会经常碰到这两个家伙的。</p>\n<p>花开两朵，各表一枝。为了能够接收到http请求，还需要调用<code class=\"language-text\">server</code>对象的<code class=\"language-text\">listen</code>方法。多数情况下，你只需要传给<code class=\"language-text\">listen</code>一个端口号。还有一些其他设置，感兴趣的话请参考<a href=\"https://nodejs.org/api/http.html\">这里</a></p>\n<h2 id=\"method-url-和-headers\"><a href=\"#method-url-%E5%92%8C-headers\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Method-URL-和-Headers</h2>\n<p>处理一个请求时，你想知道的第一件事可能就是看一下这个请求的<code class=\"language-text\">method</code>和<code class=\"language-text\">url</code>，然后才会有相应的处理。node.js把这两个信息放在了<code class=\"language-text\">request</code>对象里了，直接调用即可：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<blockquote>\n<p>注:request 对象是 <a href=\"https://nodejs.org/api/http.html#http_class_http_incomingmessage\">IncommingMessage</a>的一个实例</p>\n</blockquote>\n<p><code class=\"language-text\">Headers</code>也在<code class=\"language-text\">request</code>对象里：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> headers <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> userAgent <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">[</span><span class=\"token string\">'user-agent'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>需要注意的是，无论客户端发送的是什么，node.js把所有的头信息关键词都小写化了。变单一的同时也就减少了因分歧出错的可能性。还有，如果有重复的头信息，有些会重写，有些会使用<code class=\"language-text\">,</code>合并成字符串。在一些场景可能会出现问题，没关系，<code class=\"language-text\">request</code>中还有个<a href=\"https://nodejs.org/api/http.html#http_message_rawheaders\">rawHeaders</a>，你值得拥有。</p>\n<h2 id=\"request-body（请求体）\"><a href=\"#request-body%EF%BC%88%E8%AF%B7%E6%B1%82%E4%BD%93%EF%BC%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request-Body（请求体）</h2>\n<p>当请求方法是<code class=\"language-text\">PUT</code>或者<code class=\"language-text\">POST</code>时，请求体就成了重点关注对象。获取请求体，相对于获取上面那三个值，就需要多知道点了：<code class=\"language-text\">request</code>对象实现了<a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">ReadableStream</a>接口，所以能够被监听或者管道化。因此，我们可以通过监听<code class=\"language-text\">data</code>和<code class=\"language-text\">end</code>事件来获取流内数据。</p>\n<p><code class=\"language-text\">data</code>过来的数据块都是<a href=\"https://nodejs.org/api/buffer.html\">Buffer</a>。如果你清楚的知道传输过来的数据是字符串，那么最好将它们存放在一个数组里，在<code class=\"language-text\">end</code>事件中，合并(concatenate)并字符串化(stringify)。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  body <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 代码执行到这里，body就拥有了整个字符串形式的数据了。</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<blockquote>\n<p>注：多数情况下，这样做有些啰嗦。幸运的是，npm上有许多能将这些逻辑隐藏的优秀模块，比如<a href=\"https://www.npmjs.com/package/concat-stream\">concat-stream</a>和<a href=\"https://www.npmjs.com/package/body\">body</a>。即便如此，还是希望能够好好理解一下这个细节，因为这属于基础。</p>\n</blockquote>\n<h2 id=\"有关错误（errors）\"><a href=\"#%E6%9C%89%E5%85%B3%E9%94%99%E8%AF%AF%EF%BC%88errors%EF%BC%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>有关错误（Errors）</h2>\n<p>既然<code class=\"language-text\">request</code>是一个<code class=\"language-text\">EventEmitter</code>，那么当有错误时，就可以触发<code class=\"language-text\">error</code>事件。<strong>如果你没有监听这个事件，错误会被抛出，进而很可能导致node.js程序的崩溃。</strong>所以，最佳实践便是给<code class=\"language-text\">request</code>增加<code class=\"language-text\">error</code>事件，在事件回调函数里面做一下日志记录的同时，最好给客户端返回对应的错误码，这个在后面会提到。  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// console的错误标准输出</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>有关错误的处理，还有其它方式，可以参考<a href=\"https://nodejs.org/api/errors.html\">这里</a>。记住，错误随时会发生，要对此有所警惕，对其有专门的处理总是好的。</p>\n<h2 id=\"小结一下\"><a href=\"#%E5%B0%8F%E7%BB%93%E4%B8%80%E4%B8%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小结一下</h2>\n<p>走到这里，我们已经创建了一个web服务器，获取到了请求的<code class=\"language-text\">method</code>，<code class=\"language-text\">url</code>和<code class=\"language-text\">headers</code>，哦，还有请求体内容。现在我们将这些放在一起：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> headers <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    body <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 至此，我们就获取到了所有需要响应给客户端的数据</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Activates this server, listening on port 8080.</span></code></pre>\n      </div>\n<p>很显然，如果运行这个代码，服务器能接收到请求（request），但没发出响应（response）。也就是说，在浏览器里面发出请求，会超时。</p>\n<p>目前为止，我们还未碰触<code class=\"language-text\">response</code>对象，它是<a href=\"https://nodejs.org/api/http.html#http_class_http_serverresponse\">ServerResponse</a>的一个实例，也是一个<a href=\"https://nodejs.org/api/stream.html#stream_class_stream_writable\">WritableStream</a>，为了将数据传回客户端，其中包含了许多实用方法。好吧，依旧是花开两朵，各表一枝，我们先认识下http状态码，待会儿再谈<code class=\"language-text\">response</code>对象。</p>\n<h2 id=\"http状态码\"><a href=\"#http%E7%8A%B6%E6%80%81%E7%A0%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP状态码</h2>\n<p><code class=\"language-text\">response</code>默认状态码是<code class=\"language-text\">200</code>。当然，有些情况下，你需要返回不同的状态码。<code class=\"language-text\">response</code>中的<code class=\"language-text\">statusCode</code>属性就是为此存在的：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//告诉客户端资源未找到...</span></code></pre>\n      </div>\n<h2 id=\"设置响应头\"><a href=\"#%E8%AE%BE%E7%BD%AE%E5%93%8D%E5%BA%94%E5%A4%B4\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>设置响应头</h2>\n<p><code class=\"language-text\">response</code>中的<code class=\"language-text\">setHeader</code>该出场了：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X-Powered-By'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bacon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>需要注意的是，响应头关键词对大小写不敏感，如果重复设置一个响应头，那么客户端取到的是你最后一个。</p>\n<h2 id=\"显式发送响应头\"><a href=\"#%E6%98%BE%E5%BC%8F%E5%8F%91%E9%80%81%E5%93%8D%E5%BA%94%E5%A4%B4\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>显式发送响应头</h2>\n<p>上面提到的<code class=\"language-text\">statusCode</code>和<code class=\"language-text\">setHeader</code>属于<strong>隐式头部</strong>：意思是在发送body数据前，依赖的是node.js来发送头部数据。</p>\n<p>如果你愿意，也可以显式地将头部信息写到响应流里。<code class=\"language-text\">writeHead</code>便是为此而生：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">response<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token string\">'X-Powered-By'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bacon'</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>设置完头部，接下来便是发送响应数据了。</p>\n<h2 id=\"发送响应数据\"><a href=\"#%E5%8F%91%E9%80%81%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>发送响应数据</h2>\n<p>既然<code class=\"language-text\">response</code>对象是个<code class=\"language-text\">WritableStream</code>，那么就可以使用流方法来向客户端写数据了。  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;html>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;body>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;h1>Hello, World!&lt;/h1>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/body>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/html>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>以上代码也可以简写成以下形式：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;html>&lt;body>&lt;h1>Hello, World!&lt;/h1>&lt;/body>&lt;/html>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<blockquote>\n<p>注:响应体在响应头之后，因此往response里写数据之前就设置好状态码和头信息，一切才会有意义。</p>\n</blockquote>\n<h2 id=\"response的错误处理\"><a href=\"#response%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Response的错误处理</h2>\n<p>与<code class=\"language-text\">request</code>一样，<code class=\"language-text\">response</code>也会触发<code class=\"language-text\">error</code>事件。所以，有关<code class=\"language-text\">request</code>错误处理最佳实践，同样也适用于<code class=\"language-text\">response</code>。</p>\n<h2 id=\"再来小结一下\"><a href=\"#%E5%86%8D%E6%9D%A5%E5%B0%8F%E7%BB%93%E4%B8%80%E4%B8%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>再来小结一下</h2>\n<p>目前来讲，我们已经不会让浏览器傻等了。那么，把所有代码放在一起，我们可以做到让服务端把浏览器过来的请求组织下数据再传送过去，注意，使用<code class=\"language-text\">JSON.stringify</code>格式化了下数据：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> headers <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    body <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// BEGINNING OF NEW STUFF</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 注：上面两行代码可以用下面一行替换</span>\n\n    <span class=\"token comment\">// response.writeHead(200, {'Content-Type': 'application/json'})</span>\n\n    <span class=\"token keyword\">var</span> responseBody <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n      headers<span class=\"token punctuation\">:</span> headers<span class=\"token punctuation\">,</span>\n\n      method<span class=\"token punctuation\">:</span> method<span class=\"token punctuation\">,</span>\n\n      url<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">,</span>\n\n      body<span class=\"token punctuation\">:</span> body\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>responseBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 注：同样，可以这样替换</span>\n\n    <span class=\"token comment\">// response.end(JSON.stringify(responseBody))</span>\n\n    <span class=\"token comment\">// END OF NEW STUFF</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h2 id=\"echo-服务器\"><a href=\"#echo-%E6%9C%8D%E5%8A%A1%E5%99%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Echo-服务器</h2>\n<p>基于上面代码，我们可以简化一下，做出一个Echo服务器，即请求什么数据，就返回什么数据。我们只需要从请求里面获取数据并写到响应里，和上面代码差不多：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    body <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>好吧，有些过于简单，我们再增加两个需求，满足下面两个条件才给出正确响应： </p>\n<ol>\n<li>请求的<code class=\"language-text\">method</code>是<code class=\"language-text\">GET</code>  </li>\n<li>URL是<code class=\"language-text\">/echo</code>，否则给出<code class=\"language-text\">404</code>。  </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">===</span> <span class=\"token string\">'GET'</span> <span class=\"token operator\">&amp;&amp;</span> request<span class=\"token punctuation\">.</span>url <span class=\"token operator\">===</span> <span class=\"token string\">'/echo'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      body <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<blockquote>\n<p>注：检查URL，实质上就是一种路由<code class=\"language-text\">routing</code>形式。其它形式有简单如<code class=\"language-text\">swtich</code>语句，复杂如<strong><a href=\"https://www.npmjs.com/package/express\">Express</a></strong>框架。如果需要纯路由功能，可以试试[Router][https://www.npmjs.com/package/router]。](<a href=\"https://www.npmjs.com/package/router\">https://www.npmjs.com/package/router</a>]。)</p>\n</blockquote>\n<p>上面的代码能不能再精简下呢？别忘了，<code class=\"language-text\">request</code>对象是一个<code class=\"language-text\">ReadableStream</code>，<code class=\"language-text\">response</code>对象是一个<code class=\"language-text\">WritableStream</code>。这意味着可以使用管道（pipe）直接将数据从一端传到另一端。所以，更为精简的代码诞生了：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">===</span> <span class=\"token string\">'GET'</span> <span class=\"token operator\">&amp;&amp;</span> request<span class=\"token punctuation\">.</span>url <span class=\"token operator\">===</span> <span class=\"token string\">'/echo'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n    response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>事情还没完，程序出错了怎么办？好吧，加上错误处理机制：在此，我们仅仅打印出错误，并将状态码置为<code class=\"language-text\">404</code>。（更为详细的错误处理机制可以参考<a href=\"https://nodejs.org/api/errors.html\">这里</a>）  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">===</span> <span class=\"token string\">'GET'</span> <span class=\"token operator\">&amp;&amp;</span> request<span class=\"token punctuation\">.</span>url <span class=\"token operator\">===</span> <span class=\"token string\">'/echo'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n    response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>OK，node.js如何处理http请求，目前为止，我们已经把大部分的基础知识讲解到了。最后，我们总结下这些知识点：</p>\n<ol>\n<li>实例化一个HTTP服务器，并设置一个请求处理函数，另外别忘了监听一个端口</li>\n<li>从<code class=\"language-text\">request</code>获取<code class=\"language-text\">headers</code>,<code class=\"language-text\">url</code>,<code class=\"language-text\">method</code>,<code class=\"language-text\">body</code>等信息</li>\n<li>根据<code class=\"language-text\">url</code>或者其它信息路由</li>\n<li>通过<code class=\"language-text\">response</code>发送响应头、状态码和数据</li>\n<li><code class=\"language-text\">request</code>数据管道化到<code class=\"language-text\">response</code></li>\n<li>对<code class=\"language-text\">request</code>和<code class=\"language-text\">response</code>设置错误处理机制</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#%E5%8F%82%E8%80%83\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h1>\n<ul>\n<li>原文链接：<a href=\"https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/\">Anatomy of an HTTP Transaction</a></li>\n<li><a href=\"https://nodejs.org/api/events.html\">EventEmitters</a></li>\n<li><a href=\"https://nodejs.org/api/stream.html\">Streams</a></li>\n<li><a href=\"https://nodejs.org/api/http.html\">HTTP</a></li>\n</ul>","frontmatter":{"title":"HTTP的Node.js之旅","date":"2016-04-29T09:31:37.000Z","category":"它山之石","tags":["译文","技术","nodejs","javascript"],"cover":"https://zerosoul.github.io/2016/04/29/Anatomy-of-an-HTTP-Transaction/http.jpg"},"tableOfContents":"<ul>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li>\n<p><a href=\"/posts/anatomy-of-an-http-transaction/#%E8%AF%91%E6%96%87\">译文</a></p>\n<ul>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA\">温馨提示</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8\">创建服务器</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#method-url-%E5%92%8C-headers\">Method-URL-和-Headers</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#request-body%EF%BC%88%E8%AF%B7%E6%B1%82%E4%BD%93%EF%BC%89\">Request-Body（请求体）</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#%E6%9C%89%E5%85%B3%E9%94%99%E8%AF%AF%EF%BC%88errors%EF%BC%89\">有关错误（Errors）</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#%E5%B0%8F%E7%BB%93%E4%B8%80%E4%B8%8B\">小结一下</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#http%E7%8A%B6%E6%80%81%E7%A0%81\">HTTP状态码</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#%E8%AE%BE%E7%BD%AE%E5%93%8D%E5%BA%94%E5%A4%B4\">设置响应头</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#%E6%98%BE%E5%BC%8F%E5%8F%91%E9%80%81%E5%93%8D%E5%BA%94%E5%A4%B4\">显式发送响应头</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#%E5%8F%91%E9%80%81%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE\">发送响应数据</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#response%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\">Response的错误处理</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#%E5%86%8D%E6%9D%A5%E5%B0%8F%E7%BB%93%E4%B8%80%E4%B8%8B\">再来小结一下</a></li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#echo-%E6%9C%8D%E5%8A%A1%E5%99%A8\">Echo-服务器</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/anatomy-of-an-http-transaction/#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>","excerpt":"前言 前两天node.js发布了新版本，想看看具体更新了啥，于是去 官网 找changelog看了看，顺便逛了逛其它栏目。没想到，在DOCS下的 Guides 发现了一篇好文，讲的是node.js对http…"}},{"node":{"fields":{"slug":"/posts/fuck-the-pm"},"html":"<p><img src=\"https://zerosoul.github.io/2015/05/22/fuck-the-pm/pm.png\" alt=\"pm expression\"></p>\n<h1 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>这篇文章来自于微信公众号<strong>产品小妖</strong>，具体作者是谁忘记了，如有侵权，请与我联系。文章有共鸣，讲的都是经验之谈，程序员看了会流泪，产品经理看了会沉默，其中一些场景我也碰到过，感同身受。做产品没那么简单，尤其是团队化来完成一个项目，专业素养和沟通同样重要。</p>\n<h1 id=\"正文\"><a href=\"#%E6%AD%A3%E6%96%87\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正文</h1>\n<h2 id=\"开始实施之前\"><a href=\"#%E5%BC%80%E5%A7%8B%E5%AE%9E%E6%96%BD%E4%B9%8B%E5%89%8D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>开始实施之前</h2>\n<ul>\n<li><strong>说不清需求价值</strong>，技术问“为什么要做”的时候，支支吾吾，或者说“老板要的、运营要的”，成为了传话筒，是最Low的，相反，能有理有据的顶老板的产品经理，通常会在大家的眼中逼格满满；</li>\n<li><strong>没想到功能细节</strong>，表现为技术问细节（当然，是涉及业务的细节，不是技术实现细节）的时候，自己还没想过，现场想，被发现了，或者因为是接二手需求，并不知道、也没有去追溯这个需求的初衷；</li>\n<li><strong>帮技术评估工作量</strong>，特别是技术出身的产品经理容易犯这个错，潜台词就是“希望加活”，我评估过了，这些都能做掉的，不要给我偷懒；</li>\n<li><strong>逼着技术团队承诺</strong>，产品经理想的是，如果技术承诺了，但却做不到，这样自己就没责任了，但很多事情，在开始的时候是谁也不知道的，应该大家在一条船上同舟共济，这就是“接力跑”和“踢足球”在交棒/传球之后的区别。</li>\n</ul>\n<h2 id=\"实施过程中\"><a href=\"#%E5%AE%9E%E6%96%BD%E8%BF%87%E7%A8%8B%E4%B8%AD\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实施过程中</h2>\n<ul>\n<li><strong>做了一半改需求</strong>，scrum里的表现就是sprint内的非受迫需求变更，大家很难忍受的是产品经理自己没想清楚，而导致的劳动浪费，俗话说“没有变更就没有伤害”，碰到性子烈的就直接要干架了，当然，如果是外部市场变了，大家都可以理解；</li>\n<li><strong>开发过程中消失</strong>，你可以出差、可以开会，但是要能及时响应技术的问题，要不然，为了进度大家照着自己的想法做下去，验收的时候产品经理跑出来说“这不是我要的”，可不要怪没人理你；</li>\n<li><strong>过度关注实现细节</strong>，帮技术决定技术方案，也是技术出身的产品经理容易犯的错，越俎代庖了，会降低技术同学的积极性，渐渐的就完全打工心态了。</li>\n</ul>\n<h2 id=\"产品发布之后\"><a href=\"#%E4%BA%A7%E5%93%81%E5%8F%91%E5%B8%83%E4%B9%8B%E5%90%8E\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>产品发布之后</h2>\n<ul>\n<li><strong>发布后没有反馈</strong>，技术人员也需要从市场、用户那里获得反馈，从而知道自己做的事情产生了价值，提升成就感，做完发布，石沉大海，大家是不可能有owner感的；</li>\n<li><strong>无节奏感</strong>，让技术人员忙一阵闲一阵，发布之后再忙着研究接下来做什么，让技术人员在干死干活的高强度之后突然不知道做什么，几天后又开始要赶进度。</li>\n</ul>\n<h2 id=\"全过程都有\"><a href=\"#%E5%85%A8%E8%BF%87%E7%A8%8B%E9%83%BD%E6%9C%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>全过程都有</h2>\n<ul>\n<li><strong>优柔寡断无决断</strong>，是产品经理最要不得的品质，就是在已经讨论完毕后，大家都等着你拍板的时候“你说吧，往哪儿走我们就跟着办”，这时候你说“啊，那个，各种方案各有利弊啊，我也不知道怎么办啊，你们有什么好想法……”，你就完蛋了；</li>\n<li><strong>报喜不报忧</strong>，产品经理总想藏着掖着一些信息，比如“老板在考虑干掉这个项目”这类信息，出发点可能是好的，但，当大家通过其他途径知道了以后，互信就完全打破了，大家会觉得“你还是把我们当资源”。</li>\n</ul>","frontmatter":{"title":"程序员看了会流泪，产品经理看了会沉默","date":"2015-05-22T09:31:37.000Z","category":"它山之石","tags":["产品","互联网","转载"],"cover":"https://zerosoul.github.io/2015/05/22/fuck-the-pm/pm.png"},"tableOfContents":"<ul>\n<li><a href=\"/posts/fuck-the-pm/#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li>\n<p><a href=\"/posts/fuck-the-pm/#%E6%AD%A3%E6%96%87\">正文</a></p>\n<ul>\n<li><a href=\"/posts/fuck-the-pm/#%E5%BC%80%E5%A7%8B%E5%AE%9E%E6%96%BD%E4%B9%8B%E5%89%8D\">开始实施之前</a></li>\n<li><a href=\"/posts/fuck-the-pm/#%E5%AE%9E%E6%96%BD%E8%BF%87%E7%A8%8B%E4%B8%AD\">实施过程中</a></li>\n<li><a href=\"/posts/fuck-the-pm/#%E4%BA%A7%E5%93%81%E5%8F%91%E5%B8%83%E4%B9%8B%E5%90%8E\">产品发布之后</a></li>\n<li><a href=\"/posts/fuck-the-pm/#%E5%85%A8%E8%BF%87%E7%A8%8B%E9%83%BD%E6%9C%89\">全过程都有</a></li>\n</ul>\n</li>\n</ul>","excerpt":"…"}},{"node":{"fields":{"slug":"/posts/14-advices-for-programmer"},"html":"<p>下面是开发大牛总结的高效编程的14点经验。不管你是编程菜鸟还是资深程序员，或许都能从中得到启发。</p>\n<h1 id=\"计划\"><a href=\"#%E8%AE%A1%E5%88%92\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>计划</h1>\n<p>所谓plan,其实就是对于编程中的“设计”阶段，当然，这里的plan并不像设计那样重量级。它要求我们程序员在正式编程前最少要考虑一下下面的问题：</p>\n<ul>\n<li>你这个程序，工具或是项目的目的，究竟是用来干什么的。你只有知道做什么，要达到什么样的目的，你才能做得好，做得对。</li>\n<li>需要有什么样的功能。需要你给出来个功能表。这样可以保证我们不会遗漏了什么。</li>\n<li>准备好一些技术难题的前期调查和解决方案。不要等到开始编程的时候才去想。</li>\n</ul>\n<p>下面是你因为有“plan”而得到的好处：</p>\n<ul>\n<li>你能够清楚地明白你要做的东西长什么样？</li>\n<li>你能清楚知道你要开发的东西要干些什么事？</li>\n<li>你能够在开发工程中解决你所有可能发生的难题。</li>\n</ul>\n<h1 id=\"使用伪代码\"><a href=\"#%E4%BD%BF%E7%94%A8%E4%BC%AA%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用伪代码</h1>\n<p>伪代码是一个非常不错的方式，让你可以看到你要写得程序长什么样？</p>\n<p>一些人并不喜欢伪代码，因为他们并不想把同样的代码写两遍，一遍是伪代码，一遍是真代码。其实，这是可以理解的，因为两个copy的东西是比较不好维护的。但是我想，这是可以权衡的，如果的算法很简单，那么就不需要伪代码了，如果你的算法比较复杂，比较绕，那么，有一个伪代码提纲挈领将会是一件非常不错的事情，因为他有利于让别人从一个简单的文档来了解一个复杂的算法或系统。这就好像一个电线的布线图一样，你可以很容易地通过一个简单的文档从复杂的实现中找到头绪。</p>\n<h1 id=\"书写清楚的注释\"><a href=\"#%E4%B9%A6%E5%86%99%E6%B8%85%E6%A5%9A%E7%9A%84%E6%B3%A8%E9%87%8A\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>书写清楚的注释</h1>\n<p>请在你的代码中书写清楚的程序注释。当然，注释不是越多越好，注释应该是简明扼要的，如果你的程序足够地清楚简单，那么注释就会显的多余。另外，注释应该是注释“原因，理由，目的”，而不是注释“是什么”。</p>\n<h1 id=\"使用自动的编辑工具\"><a href=\"#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%8A%A8%E7%9A%84%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用自动的编辑工具</h1>\n<p>自动的编辑工具有很多，比如 Typinator，这是一个可以通过设定一些替代的简单代码来实现重复语句的快捷插入，比如你自己的签名、常用的语句等等，通过它可以设定替代的简短代码。还有其它一些代码自动完成的工具，比如一些VC的插件，还有像Source Insight这样的东西。别小看这一点点时间，如果你每天都在写代码的话，今天一点点，明天一点点，将会为你省出很多的时间。</p>\n<h1 id=\"减少代码\"><a href=\"#%E5%87%8F%E5%B0%91%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>减少代码</h1>\n<p>减少代码的数量，坚持DRY（Don’t Repeat Yourself） 和KISS（Keep It Simple &#x26; Stupid） 原则。这样可以有交物减少代码的复杂度，提高程序的易读性和可维护性，同时也能增加代码的质量</p>\n<h1 id=\"代码重用\"><a href=\"#%E4%BB%A3%E7%A0%81%E9%87%8D%E7%94%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码重用</h1>\n<p>DRY (don’t repeat yourself) 原则就是告诉我们需要重用现有的代码。这样，你才能够站在巨人的肩膀之上，从而可以更多的关注和自己所要处理业务的逻辑。编程的最高境界就是写出来的代码是可能被重用的，重用和泛型这是编程里始终在追求的目标。</p>\n<h1 id=\"代码重构\"><a href=\"#%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码重构</h1>\n<p>一些老的代码可能已经不合时宜了，比较以前老的C++的STL库在多线程下可能会出现很多问题。所以，我们自己的代码也是一样的，每过一段时间，我们需要把这些代码回收再利用，这就是软件的重构。重构代码所追求的并不是要提供更多的功能，而是让老的代码更有生命力，让老的代码跟上时代，更具扩展性，灵活性。</p>\n<h1 id=\"使用设计模式\"><a href=\"#%E4%BD%BF%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用设计模式</h1>\n<p>设计模式是一种从代码级解决某一些问题的方法论。这个世界上有很多很多的设计模式，比如MVC，单实例，工厂，观察者等等，等等。使用好的设计模式可以让你的代码更具重用和扩展性。</p>\n<h1 id=\"使用程序框架framework\"><a href=\"#%E4%BD%BF%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6framework\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用程序框架Framework</h1>\n<p>Frameworks 是一份给程序员的礼物，他们帮助你完成了很多很细节的事情，他们有可能是一个lib库，你需要进行简单的拼装，一个几乎完成了的软件框架就已形成。这是一个能够给开发工作提速的东西。只要上网随便搜一搜，你可以看到太多太多的框架了。形形色色，几乎都是开源社区贡献的。</p>\n<h1 id=\"泛型编程\"><a href=\"#%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>泛型编程</h1>\n<p>如果抽像出一些程序中相似的东西，然后把这些相似的东西用一个标准的东西实现，这也是编程所追求的最高境界之一，像诸如C++中的STL之类的东西就是此类东西的最佳体现。灵活之及，几乎都快放之四海皆准了。</p>\n<h1 id=\"使用开源的代码\"><a href=\"#%E4%BD%BF%E7%94%A8%E5%BC%80%E6%BA%90%E7%9A%84%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用开源的代码</h1>\n<p>这个世界上有太多太多开源的代码了。学会利用他们可以让你更节省时间和精力，因为我们完全没有必要把相当的东西实现若干次，学会使用开源的代码不但是一个学习的过程，同样也是一个增加编程效率的事情。</p>\n<h1 id=\"完善开发环境\"><a href=\"#%E5%AE%8C%E5%96%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完善开发环境</h1>\n<p>开发环境非常重要，因为好的开发环境可以让你事倍功半。他们可以让你不需要关注别的东西，比如，我曾看过某程序员在调整编辑器的字体和高亮上花费了不少工夫。是的，这是值得肯定了，只有把开发环境变得舒服，才能让自己更好的编程。</p>\n<h1 id=\"使用调试器\"><a href=\"#%E4%BD%BF%E7%94%A8%E8%B0%83%E8%AF%95%E5%99%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用调试器</h1>\n<p>学会使用调试器来调试代码，单步跟踪，变量值跟踪，内存，堆栈等等。熟练地使用调试器可以让你更好的查找程序的问题，以得到最优的代码。</p>\n<h1 id=\"使用版本管理工具\"><a href=\"#%E4%BD%BF%E7%94%A8%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用版本管理工具</h1>\n<p>版本管理工具应该是任何程序员都应该要去学会使用的东西，特别在一个团队中，如何管理程序的不同版本，如何维护，存放代码，版本管理工具绝对是开发过程中不可少的东西。其意义绝对不只代码备份和共享那么简单。</p>","frontmatter":{"title":"程序员高效编程的14点建议","date":"2013-11-03T09:31:37.000Z","category":"它山之石","tags":["技术","编程","转载"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/14-advices-for-programmer/#%E8%AE%A1%E5%88%92\">计划</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E4%BD%BF%E7%94%A8%E4%BC%AA%E4%BB%A3%E7%A0%81\">使用伪代码</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E4%B9%A6%E5%86%99%E6%B8%85%E6%A5%9A%E7%9A%84%E6%B3%A8%E9%87%8A\">书写清楚的注释</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%8A%A8%E7%9A%84%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7\">使用自动的编辑工具</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E5%87%8F%E5%B0%91%E4%BB%A3%E7%A0%81\">减少代码</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E4%BB%A3%E7%A0%81%E9%87%8D%E7%94%A8\">代码重用</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84\">代码重构</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E4%BD%BF%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">使用设计模式</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E4%BD%BF%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6framework\">使用程序框架Framework</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B\">泛型编程</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E4%BD%BF%E7%94%A8%E5%BC%80%E6%BA%90%E7%9A%84%E4%BB%A3%E7%A0%81\">使用开源的代码</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E5%AE%8C%E5%96%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\">完善开发环境</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E4%BD%BF%E7%94%A8%E8%B0%83%E8%AF%95%E5%99%A8\">使用调试器</a></li>\n<li><a href=\"/posts/14-advices-for-programmer/#%E4%BD%BF%E7%94%A8%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\">使用版本管理工具</a></li>\n</ul>","excerpt":"下面是开发大牛总结的高效编程的14点经验。不管你是编程菜鸟还是资深程序员，或许都能从中得到启发。 计划 所谓plan,其实就是对于编程中的“设计”阶段，当然，这里的plan…"}}],"pathPrefix":"cates/它山之石","first":true,"last":true,"index":1,"pageCount":1,"additionalContext":{"total":8,"category":"它山之石"}}}