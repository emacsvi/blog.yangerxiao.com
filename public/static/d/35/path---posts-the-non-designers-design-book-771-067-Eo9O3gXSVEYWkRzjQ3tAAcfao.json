{"pageContext":{"slug":"/posts/the-non-designers-design-book","html":"<h1 id=\"4大排版原则\"><a href=\"#4%E5%A4%A7%E6%8E%92%E7%89%88%E5%8E%9F%E5%88%99\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4大排版原则</h1>\n<p>亲密性、对齐、对比、重复。这4个原则是可以打破的，但绝对不可以被忽视，打破规则之前你必须知道规则是什么。</p>\n<h2 id=\"亲密性\"><a href=\"#%E4%BA%B2%E5%AF%86%E6%80%A7\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>亲密性</h2>\n<p>含义：将相关项组织在一起。在一个页面上，位置接近就意味存在着关联。因此相关的项应当靠近，归组在一起。</p>\n<p>作用：分组，留白。</p>\n<p>方法：</p>\n<ul>\n<li>如果页面太过拥挤，那就适当缩小字号后再将段落拉开，然后通过添加编号或者通过首字增大将区分得更明显；</li>\n<li>当条目比较多时，将内容分栏或者列表；</li>\n<li>通过设置相同的颜色，观众可以自然而然地从首字读到后面的句子。</li>\n</ul>\n<h2 id=\"对齐\"><a href=\"#%E5%AF%B9%E9%BD%90\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>对齐</h2>\n<p>含义：每个元素都应当与页面上的另一个元素有某种视觉联系。</p>\n<p>原则：</p>\n<ul>\n<li>一般情况下，页面上只使用一种文本对齐。但若想在同一页面上同时右对齐和左对齐文本，一定要让这些文本以某种方式对齐！</li>\n<li>如果设计中的对齐很明确，那么可以有意识打破对齐，但一定要表现出这是有意的。</li>\n</ul>\n<p>方法：找准一条明确的对齐线，并用它来对齐。</p>\n<p>分类：</p>\n<ul>\n<li>\n<p>右对齐/左对齐：充分利用亲密性，并结合明确的右对齐或左对齐。</p>\n</li>\n<li>\n<p>居中对齐</p>\n<ul>\n<li>文本居中，文本块不居中；</li>\n<li>将文本放在页面上方，增加紧张性；</li>\n<li>在居中布局中设置一种非常随意、有趣的字体。</li>\n</ul>\n</li>\n<li>\n<p>其他对齐</p>\n<ul>\n<li>文本行水平摆放，则按其基线对齐；</li>\n<li>如有图片元素，将其边界与页面边界对齐；</li>\n<li>与版心线对齐；</li>\n<li>元素之间对齐。元素之间是通过“看不见的线”实现对齐的，这些对齐参考线可以是直线或规则的曲线；</li>\n<li>对齐到网格。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"对比\"><a href=\"#%E5%AF%B9%E6%AF%94\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>对比</h2>\n<p>含义：如果页面上的元素不相同，那就干脆让它们截然不同，以吸引读者眼球。</p>\n<p>方法：首先划分层次，多打几个回车将统一层次的要点分成多个并列的条目，然后使用不同的字号区分层次，最后使用点、线、面等修饰元素突出重点。</p>\n<p>分类：</p>\n<ul>\n<li>\n<p>文字的对比</p>\n</li>\n<li>\n<p>字号对比。在字号的对比上不必保守，大胆使用强烈的字号变化效果往往更好。</p>\n</li>\n<li>\n<p>反白。反白是使用底部色块修饰文字。色块能够强烈地增大文字的视觉比重，效果非常明显。矩形色块很常见，但太平稳，而使用贴布条等图形元素来替代会更有新意。</p>\n</li>\n<li>\n<p>方向对比：</p>\n<ul>\n<li>向右上倾斜的字体产生一种前进的力量，向右下倾斜则相反；</li>\n<li>水平文字与瘦高文本列的对比；</li>\n<li>不要在角落里放有角度的字体。</li>\n</ul>\n</li>\n<li>\n<p>图片的对比：局部放大、背景黑白、虚化、局部遮盖。</p>\n</li>\n</ul>\n<h2 id=\"重复\"><a href=\"#%E9%87%8D%E5%A4%8D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重复</h2>\n<p>让视觉要素在整个作品中重复，能够实现整个PPT风格的统一，包括统一颜色方案、字体字号、文本行距、项目符号、图表风格、对齐方式、图片风格，或者一种特别的字体。</p>\n<p>不要把重复用得太滥，而应当尽量“采用多样性实现统一”。也就是说，如果一个重复元素很明确（如一个圆），那么可以采用多种不同方式重复这个圆，而不是简单地重复同一个圆。</p>\n<h2 id=\"排版的过程\"><a href=\"#%E6%8E%92%E7%89%88%E7%9A%84%E8%BF%87%E7%A8%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>排版的过程</h2>\n<ol>\n<li>亲密性：将信息按逻辑进行分组，确定这些组之间的关系，并通过组之间的亲密性来显示这些关系。</li>\n<li>对齐：在页面上组织文本和图片时，要建立并维护明确的对齐。</li>\n<li>对比：除非你已经决定要建立一个非常协调的设计，否则就应该建立强烈对比，吸引读者的视线。</li>\n<li>重复：为建立重复，可以使用粗字体、线、装饰符号或者某种空间布局。看看哪些元素已经自然地重复，再看看是否适合加大重复力度。</li>\n</ol>","frontmatter":{"title":"阅读笔记《写给大家看的设计书》","date":"2018-02-08T09:31:37.000Z","category":"阅读笔记","tags":["设计","产品","备忘","阅读"],"cover":null},"excerpt":"4大排版原则 亲密性、对齐、对比、重复。这…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/posts/the-non-designers-design-book/#4%E5%A4%A7%E6%8E%92%E7%89%88%E5%8E%9F%E5%88%99\">4大排版原则</a></p>\n<ul>\n<li><a href=\"/posts/the-non-designers-design-book/#%E4%BA%B2%E5%AF%86%E6%80%A7\">亲密性</a></li>\n<li><a href=\"/posts/the-non-designers-design-book/#%E5%AF%B9%E9%BD%90\">对齐</a></li>\n<li><a href=\"/posts/the-non-designers-design-book/#%E5%AF%B9%E6%AF%94\">对比</a></li>\n<li><a href=\"/posts/the-non-designers-design-book/#%E9%87%8D%E5%A4%8D\">重复</a></li>\n<li><a href=\"/posts/the-non-designers-design-book/#%E6%8E%92%E7%89%88%E7%9A%84%E8%BF%87%E7%A8%8B\">排版的过程</a></li>\n</ul>\n</li>\n</ul>","prev":{"fields":{"slug":"/posts/second-half-of-the-internet"},"html":"<p>传统组织是以雇佣关系为纽带的组织，员工在合约的约束下为了组织工作，以效率和经济为出发点，规范组织结构，明确分工。员工的循规蹈矩反而会使公司失去活力，最终被变化多端的市场淘汰。</p>\n<ul>\n<li>粉丝即用户</li>\n<li>内容即品牌</li>\n<li>媒介即渠道</li>\n</ul>\n<p>互联网下半场，企业转型六脉神剑：</p>\n<ul>\n<li>战略神圣化</li>\n<li>品牌故事化</li>\n<li>产品神秘化</li>\n<li>营销组织化</li>\n<li>传播社会化</li>\n<li>企业家IP化</li>\n</ul>\n<p>互联网是资本和信息产业、传媒产业、计算机技术相互融合的产物。</p>\n<p>中国经济增长的三驾马车：<strong>投资</strong>、<strong>出口</strong>、<strong>消费</strong></p>\n<p>21世纪的生存法则就是建立个人品牌，个人的品牌是最强大的驱动力。</p>\n<p>如果你拥有有价值的内容和持续生产内容的能力，那么你就有流量黑洞。</p>\n<p>特朗普的自我定位十分清晰：绝不好好说话！</p>\n<p>网瘾：认知-习惯-上瘾-沉迷</p>\n<p>游戏化是指运用游戏思维和游戏机制来解决问题和锁定用户的过程。</p>\n<p>好用的产品对于消费者而言只具有工具属性，只有人们需要达成相应目的才会想起和眷顾，而好用又好玩的产品在工具属性的基础上加了娱乐功能，具备了让消费者依恋、沉浸的力量。</p>\n<p>产品在好用之外，是否好玩。</p>\n<p>最好的管理方式，就是信任员工，凭借员工对个人成功的渴望和对公司负责的态度，让员工自己管理自己。</p>\n<p>你的产品是一次性消费的止痛药，还是每天都要吃的维生素片？</p>\n<p>人们分享思想、观点和经验并不是无意识和无目的的，人们的分享行为是为了收获传播对象对自己的认知，完成对自己的“标签化”，塑造他人眼中的自己。</p>\n<p>衡量一个人成功的标志，不是看他登到顶峰的高度，而是看他跌到谷底后的反弹力。</p>\n<p>《谷歌是如何运营的》：未来企业的成功之道，是聚集一群聪明的创意精英，营造合适的氛围和支持环境，充分发挥他们的创造力，快速感知客户的需求，愉快地创造相应的产品和服务。</p>\n<p>CIY(create it yourself)</p>\n<p>张瑞敏：“弯道超车”不如“换道超车”</p>\n<p>陈年：鸡汤就像高跟鞋，看着漂亮其实害人。</p>","frontmatter":{"title":"阅读笔记《互联网下半场》","date":"2018-03-25T07:26:08.000Z","category":"阅读笔记","tags":["互联网","创业","阅读"],"cover":null},"tableOfContents":"","excerpt":"…"},"next":{"fields":{"slug":"/posts/javascript-symbol"},"html":"<h1 id=\"es6第七种数据类型：symbol\"><a href=\"#es6%E7%AC%AC%E4%B8%83%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%9Asymbol\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6第七种数据类型：Symbol</h1>\n<p>Javascript已有6种数据类型: <strong>Undefined,Null,布尔值,字符串,数值,对象</strong>。现在ES6新加入一种数据类型：Symbol。</p>\n<p>它的最大特点: <strong>独一无二</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 没有参数的情况</span>\n<span class=\"token keyword\">var</span> s1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns1 <span class=\"token operator\">===</span> s2 <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// 有参数的情况</span>\n<span class=\"token keyword\">var</span> s1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns1 <span class=\"token operator\">===</span> s2 <span class=\"token comment\">// false</span></code></pre>\n      </div>\n<p>这里的<code class=\"language-text\">foo</code>是该Symbol的一个描述，并非两个参数都为'foo' ，就能够使得这两个Symbol相同。</p>\n<p>作为属性名的使用</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> mySymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 第一种写法</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span>mySymbol<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 第二种写法</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>mySymbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 第三种写法</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> mySymbol<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 以上写法都得到同样结果</span>\na<span class=\"token punctuation\">[</span>mySymbol<span class=\"token punctuation\">]</span> <span class=\"token comment\">// \"Hello!\"</span></code></pre>\n      </div>\n<p>注意，这里不可以使用 <code class=\"language-text\">a.mySymbol = &#39;hello&#39;;</code> 来填充该属性值。因为点运算符后面总是字符串.</p>\n<h1 id=\"为什么要使用symbol\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8symbol\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么要使用Symbol?</h1>\n<p>那么问题来了，为什么要使用Symbol呢？有这样一种场景：如果想区分两个属性，其实我们并不在意，这两个属性值究竟是什么，我们在意的是，这两个属性绝对要区分开来！例如:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> shapeType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> triangle<span class=\"token punctuation\">:</span> <span class=\"token string\">'Triangle'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">var</span> area <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">case</span> shapeType<span class=\"token punctuation\">.</span>triangle<span class=\"token punctuation\">:</span>\n      area <span class=\"token operator\">=</span> <span class=\"token number\">.5</span> <span class=\"token operator\">*</span> options<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> options<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span> \n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">return</span> area<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span>shapeType<span class=\"token punctuation\">.</span>triangle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>这个时候，我们仅仅是想区分各种形状，因为不同的形状用不同公式来算面积。这里使用的是triangle的名字叫做<strong>Triangle</strong>，事实上我们不想对triangle去特地取个名，我们只想要区分triangle这个形状不同于任何其他形状，那么这个时候Symbol就派上用场了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> shapeType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   triangle<span class=\"token punctuation\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>也就是说，不用非要去给变量赋一个字符串的值，去区分它和别的变量的值不同，因为去给每个变量取个语义化而又不同的值是一件伤脑子的事，当我们只需要知道每个变量的值都是百分百不同，这时候就可以用Symbol。</p>","frontmatter":{"title":"ES6新增的Symbol适用场景","date":"2018-01-29T12:32:58.000Z","category":"技术","tags":["es6","javascript","备忘"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/javascript-symbol/#es6%E7%AC%AC%E4%B8%83%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%9Asymbol\">ES6第七种数据类型：Symbol</a></li>\n<li><a href=\"/posts/javascript-symbol/#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8symbol\">为什么要使用Symbol?</a></li>\n</ul>","excerpt":"ES6第七种数据类型：Symbol Javascript已有6种数据类型:  Undefined,Null,布尔值,字符串,数值,对象 。现在ES6新加入一种数据类型：Symbol。 它的最大特点:  独一无二 。 这里的 是该Symbol的一个描述，并非两个参数都为'foo…"}}}