{"pageContext":{"slug":"/posts/upgrade-hexo-to-3-2","html":"<p><img src=\"https://zerosoul.github.io/2016/06/15/upgrade-hexo-to-3-2/crazy.jpg\" alt=\"crazy\"></p>\n<h1 id=\"动机\"><a href=\"#%E5%8A%A8%E6%9C%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>动机</h1>\n<p>好久没去<a href=\"https://hexo.io\">Hexo官网</a>逛逛了，陡然发现有<a href=\"https://hexo.io/news/2016/02/28/hexo-3-2-released/\">新版本</a>了，其重要的改进在于生成静态文件的速度，对于文章越写越多，生成时间越来越长的我，是个极大的诱惑。作为一个还停留在2.X版本的Hexo党，毅然决然地要尝一下鲜。</p>\n<h1 id=\"思路\"><a href=\"#%E6%80%9D%E8%B7%AF\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思路</h1>\n<ol>\n<li>\n<p>先全局升级<code class=\"language-text\">hexo-cli</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i hexo-cli -g</code></pre>\n      </div>\n<p>通过<code class=\"language-text\">hexo version</code>查看下版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">hexo: 3.2.0 //版本号已变\n\nhexo-cli: 1.0.2\n\nos: Darwin 15.5.0 darwin x64\n\nhttp_parser: 2.7.0\n\nnode: 6.2.1 \n\nv8: 5.0.71.52\n\nuv: 1.9.1\n\nzlib: 1.2.8\n\nares: 1.10.1-DEV\n\nicu: 57.1\n\nmodules: 48\n\nopenssl: 1.0.2h</code></pre>\n      </div>\n<p>注：我的node版本略高，不建议使用高版本，因为经常踩坑，5就足够了。当然，可以使用nvm工具来管理node版本。</p>\n</li>\n<li>\n<p>找个风水宝地，初始化一个新版本的hexo博客目录：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">hexo init new\\_blog <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cd</span> new\\_blog <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> i <span class=\"token operator\">&amp;&amp;</span> hexo s</code></pre>\n      </div>\n</li>\n<li>\n<p>访问下<code class=\"language-text\">http://localhost:4000</code>，确认下初始化成功了么。正常的话，看到的是默认主题的首页。</p>\n</li>\n<li>\n<p>把原博客目录<code class=\"language-text\">source</code>下的东西全部拷贝到新目录对应位置上。这是关键的一步，相当于迁移数据源。</p>\n</li>\n<li>\n<p>接下来，是容易踩坑的地方了，不要把原Hexo的配置文件<code class=\"language-text\">_config.yml</code>直接覆盖过来，因为新版本的Hexo有些插件不走配置文件了，容易出错。所以我在踩了这个坑之后，索性基于新<code class=\"language-text\">_config.yml</code>来更新对应值，至于插件的配置，全部放弃。</p>\n</li>\n<li>\n<p>接下来，是主题的更新，我使用的是<a href=\"http://theme-next.iissnan.com/\">Next</a>。发现这个也有新版本了，索性一起更新了。具体步骤请参照<a href=\"http://theme-next.iissnan.com/getting-started.html\">这里</a>。另，原有主题我更改了一些地方，又花了点时间把琐碎的增量更改也做了。</p>\n</li>\n<li>\n<p>接下来，<code class=\"language-text\">hexo g</code>一下，发现有报错，看了下报错信息和我使用<a href=\"https://github.com/gyk001/hexo-qiniu-sync\"><code class=\"language-text\">hexo-qiniu-sync</code></a>插件有关，于是把七牛插件给装上：<code class=\"language-text\">npm install hexo-qiniu-sync --save</code>。注意，别忘了更新<code class=\"language-text\">_config.yml</code>对应的配置，这个可以从原来的地方拷贝过来。</p>\n</li>\n<li>\n<p>另外，我还用到了两个插件<code class=\"language-text\">hexo-generator-sitemap</code>，<code class=\"language-text\">hexo-generator-feed</code>，一行代码搞定：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i hexo-generator-sitemap hexo-generator-feed --save</code></pre>\n      </div>\n</li>\n<li>\n<p>下面到了最坑的地方了，平时使用<code class=\"language-text\">hexo-browsersync</code>来边写边看效果，所以升级后自然也得想着它。装上这个插件在我的环境下会导致大部分页面白板，动画效果也没有了。查看了下生成的页面代码，底部有乱码。估计是我的node版本太高导致的，使用nvm降到5，问题依旧。然后去插件<a href=\"https://github.com/hexojs/hexo-browsersync\">Github地址</a>逛逛有没有遇到类似问题的同学，很遗憾，就四个提问题的，和我遇到的问题无关。转变思路，看看是不是版本依赖问题，<code class=\"language-text\">hexo-browsersync</code>最重要的依赖便是<code class=\"language-text\">browsersync</code>，将其升级到最新版本：修改该模块的<code class=\"language-text\">package.json</code>对应的<code class=\"language-text\">browsersync</code>版本号为<code class=\"language-text\">*</code>，然后<code class=\"language-text\">npm update --save</code>。接下来，试试问题有没有解决，果然！不出所料！这样做并没有什么卵用…o(╯□╰)o。<br>\n纠结到最后，还是暂时去掉了这一功能：<code class=\"language-text\">npm uninstall hexo-browsersync --save</code>。以后会看一下里面源码，看看到底哪儿的问题。而现在，我需要的就是一个可以写文章和发布的Hexo，虽然用起来不是很便捷，但这已足够了。</p>\n</li>\n<li>\n<p>最后：<code class=\"language-text\">npm i --save hexo-deployer-git</code>，配置下<code class=\"language-text\">_config.yml</code>对应的git选项。</p>\n</li>\n</ol>\n<h1 id=\"感想\"><a href=\"#%E6%84%9F%E6%83%B3\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感想</h1>\n<p>断断续续折腾了两天，才升级成功。所以，如果有啥感想，那就是：<strong>没事别瞎TM升级！</strong>当然，如果一定要升级，最好做增量升级：另起炉灶，一项一项地加功能，这样好定位问题，也容易回滚。</p>","frontmatter":{"title":"Hexo升级之坑","date":"2016-06-15T09:31:37.000Z","category":"技术","tags":["hexo","备忘"],"cover":"https://zerosoul.github.io/2016/06/15/upgrade-hexo-to-3-2/crazy.jpg"},"excerpt":"动机 好久没去 Hexo官网 逛逛了，陡然发现有 新版本 了，其重要的改进在于生成静态文件的速度，对于文章越写越多，生成时间越来越长的我，是个极大的诱惑。作为一个还停留在2.X版本的Hexo党，毅然决然地要尝一下鲜。 思路 先全局升级 ： 通过 查看下版本： 注：我的node…","tableOfContents":"<ul>\n<li><a href=\"/posts/upgrade-hexo-to-3-2/#%E5%8A%A8%E6%9C%BA\">动机</a></li>\n<li><a href=\"/posts/upgrade-hexo-to-3-2/#%E6%80%9D%E8%B7%AF\">思路</a></li>\n<li><a href=\"/posts/upgrade-hexo-to-3-2/#%E6%84%9F%E6%83%B3\">感想</a></li>\n</ul>","prev":{"fields":{"slug":"/posts/take-parents-to-beijing"},"html":"<p><img src=\"/images/parents.jpg\" alt=\"parents\"></p>\n<h1 id=\"引子\"><a href=\"#%E5%BC%95%E5%AD%90\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引子</h1>\n<p>去年夏天把父母和奶奶接北京玩了几天，担心奶奶体力问题，还备用了轮椅。结果几天下来，老人家依然劲头十足，我却累蔫儿了。</p>\n<p>好吧，以上不是重点，重点是游玩期间我做了个视频，放在了<a href=\"https://vimeo.com/146186682\">网上</a>（可以直接跳到文章底部观看）。令我惊讶的是，半年多过去了，突然有歪果仁来了封邮件，问视频是怎么做的：<strong>How did you accomplish it?Amazing!</strong>。哎，这个没见过世面的歪果仁，<a href=\"https://vimeo.com/channels/staffpicks\">Vimeo</a>上的视频一个比一个精彩，如果排行的话，我只能垫底。不过这位歪果仁兄既然诚心诚意地发问，我也就很负责任地回复了：<strong>iPhone6 + iMovie + selfie stick</strong>。对，很简洁，很任性，很清真，我大概能猜到歪果仁看到后的表情：(╯‵□′)╯︵┻━┻。</p>\n<h1 id=\"视频\"><a href=\"#%E8%A7%86%E9%A2%91\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>视频</h1>\n<p>世界那么大 TA们想看看</p>\n<div>\n          <div\n            class=\"gatsby-resp-iframe-wrapper\"\n            style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;\"\n          >\n            <iframe src=\"https://player.vimeo.com/video/146186682?loop=1&amp;color=ffffff&amp;title=0&amp;byline=0&amp;portrait=0\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen style=\"\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          \"></iframe>\n          </div>\n          </div>\n<p><em>注：微信下视频加载不出来，请移步浏览器</em></p>\n<h1 id=\"工具\"><a href=\"#%E5%B7%A5%E5%85%B7\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工具</h1>\n<p>其实不只歪果仁，有些国内的朋友也问过我几次同样的问题，那么有必要罗列下当初用到的工具，仅供参考。</p>\n<h1 id=\"硬件\"><a href=\"#%E7%A1%AC%E4%BB%B6\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>硬件</h1>\n<ul>\n<li>iPhone 6 64G：应该是刚买了没多久，就拿来录像了，效果挺好的。庆幸当初选择的是64G，否则后面内存就捉襟见肘了。</li>\n<li>iPad Air：主要用来编辑视频，使用自带的iMovie</li>\n<li>Macbook Pro：用来上传视频，好吧，有点打酱油的一个硬件</li>\n<li>自拍杆（带遥控）：淘宝了一个，链接点<a href=\"https://detail.tmall.com/item.htm?id=42154967278&#x26;spm=a1z09.2.0.0.lBofG8&#x26;_u=h4gsni3a18f\">这里</a>100元左右就能买个带遥控功能的，还有三脚架功能，好神奇。不过用过之后随即就打入冷宫了，后来送给了我哥。</li>\n</ul>\n<h1 id=\"软件\"><a href=\"#%E8%BD%AF%E4%BB%B6\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>软件</h1>\n<ul>\n<li>iMovie：苹果操作系统自带的视频编辑软件，功能足够，如果不太熟悉操作，可以移步<a href=\"http://www.apple.com/cn/ios/imovie/\">这里</a>先了解下。</li>\n<li><a href=\"https://vimeo.com\">Vimeo</a>：一个高清视频社区网站，我试过上传优酷，清晰度不好，又尝试秒拍，结果时长有限制。最后只好使用歪果仁的服务了，唯一担心的就是流畅性，试了试，还不错。</li>\n</ul>\n<h1 id=\"拍摄地点\"><a href=\"#%E6%8B%8D%E6%91%84%E5%9C%B0%E7%82%B9\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>拍摄地点</h1>\n<ul>\n<li>天安门广场</li>\n<li>故宫</li>\n<li>颐和园</li>\n<li>圆明园</li>\n<li>鸟巢&#x26;水立方</li>\n<li>地铁&#x26;住所&#x26;路上</li>\n</ul>\n<h1 id=\"最后再说一句\"><a href=\"#%E6%9C%80%E5%90%8E%E5%86%8D%E8%AF%B4%E4%B8%80%E5%8F%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最后再说一句</h1>\n<p>工具固然要有，但想法和执行更重要。That’s all!</p>","frontmatter":{"title":"世界那么大，TA们想看看","date":"2016-06-17T09:31:37.000Z","category":"技术","tags":["旅行","vimeo"],"cover":"/images/parents.jpg"},"tableOfContents":"<ul>\n<li><a href=\"/posts/take-parents-to-beijing/#%E5%BC%95%E5%AD%90\">引子</a></li>\n<li><a href=\"/posts/take-parents-to-beijing/#%E8%A7%86%E9%A2%91\">视频</a></li>\n<li><a href=\"/posts/take-parents-to-beijing/#%E5%B7%A5%E5%85%B7\">工具</a></li>\n<li><a href=\"/posts/take-parents-to-beijing/#%E7%A1%AC%E4%BB%B6\">硬件</a></li>\n<li><a href=\"/posts/take-parents-to-beijing/#%E8%BD%AF%E4%BB%B6\">软件</a></li>\n<li><a href=\"/posts/take-parents-to-beijing/#%E6%8B%8D%E6%91%84%E5%9C%B0%E7%82%B9\">拍摄地点</a></li>\n<li><a href=\"/posts/take-parents-to-beijing/#%E6%9C%80%E5%90%8E%E5%86%8D%E8%AF%B4%E4%B8%80%E5%8F%A5\">最后再说一句</a></li>\n</ul>","excerpt":"引子 去年夏天把父母和奶奶接北京玩了几天，担心奶奶体力问题，还备用了轮椅。结果几天下来，老人家依然劲头十足，我却累蔫儿了。 好吧，以上不是重点，重点是游玩期间我做了个视频，放在了 网上 （可以直接跳到文章底部观看）。令我惊讶的是，半年多过去了，突然有歪果仁来了封邮件，问视频是怎么做的： How…"},"next":{"fields":{"slug":"/posts/building-my-first-ios-app-with-react-native-part-two"},"html":"<p><img src=\"https://zerosoul.github.io/2016/06/07/building-my-first-ios-app-with-react-native-part-two/rn.png\" alt=\"React Native\"></p>\n<h1 id=\"再续前缘\"><a href=\"#%E5%86%8D%E7%BB%AD%E5%89%8D%E7%BC%98\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>再续前缘</h1>\n<p><a href=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/\">第一篇文章</a>，我们从零开始，一步一步走到最后，构建了一个似乎并没有卵用的APP。但是，我们做了大量的基础工作，不就是为了在接下来的继续更轻松自信些嘛！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/zdw.jpg\" alt=\"wtf\"><br>\n其实，第一篇的信息量还是很大的，里面的每一个链接都是通往一个新知的大门，如果你觉得掌握得差不多了，那就开始新的旅（Che）程（Dan）吧！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/haha.png\" alt=\"你懂的\"><br>\n第二篇文章也是分五小节叙述，每一节完成一个小功能，最终召唤出还算有点卵用的APP。</p>\n<h1 id=\"1召唤出壁纸和作者\"><a href=\"#1%E5%8F%AC%E5%94%A4%E5%87%BA%E5%A3%81%E7%BA%B8%E5%92%8C%E4%BD%9C%E8%80%85\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.召唤出壁纸和作者</h1>\n<p>首先，我们先研究下数据，下面是从<a href=\"https://unsplash.it/list\">Unsplash</a>获取的一个数据实例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n\n    author<span class=\"token punctuation\">:</span><span class=\"token string\">\"Ben Moore\"</span>\n\n    author_url<span class=\"token punctuation\">:</span><span class=\"token string\">\"https://unsplash.com/@benmoore\"</span>\n\n    filename<span class=\"token punctuation\">:</span><span class=\"token string\">\"0102_pJILiyPdrXI.jpeg\"</span>\n\n    format<span class=\"token punctuation\">:</span><span class=\"token string\">\"jpeg\"</span>\n\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">3240</span>\n\n    id<span class=\"token punctuation\">:</span><span class=\"token number\">102</span>\n\n    post_url<span class=\"token punctuation\">:</span><span class=\"token string\">\"https://unsplash.com/photos/pJILiyPdrXI\"</span>\n\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">4320</span> \n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>要想获取该实例的图片，在浏览器中输入以下格式的URL<code class=\"language-text\">http://unsplash.it/{width}/{height}?image={id}</code>，换算到该实例即：<a href=\"http://unsplash.it/4320/3240?image=102\"><code class=\"language-text\">http://unsplash.it/4320/3240?image=102</code></a>。这样，我们就能拿到一张壁纸的地址了。我们可以用<code class=\"language-text\">Image</code>组件中的<code class=\"language-text\">source</code>来把图片加载出来。</p>\n<p>但是，进一步想了想，这么大的图片会有一定的加载时间，最好能有个图片的加载进度什么的，让用户不再一脸懵逼地等着。一开始就做对，后面的修改成本会小很多，有两个组件的组合能够做到预期效果：</p>\n<p><a href=\"https://github.com/oblador/react-native-image-progress\"><strong>image-native-progress</strong></a>和<a href=\"https://github.com/oblador/react-native-progress\"><strong>react-native-progress</strong></a>。</p>\n<p>在项目根目录下运行命令：<code class=\"language-text\">npm i --save react-native-image-progress react-native-progress</code>，然后，我们在<strong>index.ios.js</strong>中引用：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> NetworkImage <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-native-image-progress'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Progress <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-native-progress'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>既然要做手机壁纸应用，那么就应该得到手机屏幕的长和宽：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>Dimensions<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>'window’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>哦对了，为了去掉烦人的<code class=\"language-text\">React.Dimensions</code>，可以在头部引入<code class=\"language-text\">Dimensions</code>组件：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n\n  AppRegistry<span class=\"token punctuation\">,</span>\n\n  StyleSheet<span class=\"token punctuation\">,</span>\n\n  Text<span class=\"token punctuation\">,</span>\n\n  View<span class=\"token punctuation\">,</span>\n\n  ActivityIndicatorIOS<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/***/</span>\n\n  Dimensions \n\n  <span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>这样，我们就可以在<code class=\"language-text\">renderResults</code>中使用<code class=\"language-text\">NetworkImage</code>了：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Swiper</span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">></span></span>\n\n  <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wallpaper<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n\n    <span class=\"token comment\">/***/</span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>View</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NetworkImage</span>\n\n          <span class=\"token attr-name\">source</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>uri<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`https://unsplash.it/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>width<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>height<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?image=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n\n          <span class=\"token attr-name\">indicator</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Progress<span class=\"token punctuation\">.</span>Circle<span class=\"token punctuation\">}</span></span>\n\n          <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>wallpaperImage<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NetworkImage</span><span class=\"token punctuation\">></span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>View</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">/***/</span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Swiper</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p><strong>注：此处<code class=\"language-text\">NetworkImage</code>的<code class=\"language-text\">uri</code>特性用到了ES6的模板字符串特性，懵逼的同学去<a href=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/#%E5%85%88%E8%B0%88%E8%B0%88%E9%9C%80%E6%B1%82\">上一篇文章</a>找链接复习一下哈。</strong></p>\n<p>再加个样式：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">wallpaperImage<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\n  flex<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n  width<span class=\"token punctuation\">:</span> width<span class=\"token punctuation\">,</span>\n\n  height<span class=\"token punctuation\">:</span> height<span class=\"token punctuation\">,</span>\n\n  backgroundColor<span class=\"token punctuation\">:</span> ‘#<span class=\"token number\">000</span>’\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>保存然后刷新模拟器，不出意外的话…你将看到一堆报错的页面。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/long.jpg\" alt=\"成龙\"><br>\n别慌，我们来研究下刚刚加的代码，注意到<code class=\"language-text\">indicator={Progress.Circle}</code>没有？在<code class=\"language-text\">react-native-progress</code>文档里有提到（别告诉我你没看<a href=\"https://github.com/oblador/react-native-progress\">文档</a>(╯‵□′)╯︵┻━┻），<code class=\"language-text\">Progress.Circle</code>需要<strong>ReactART</strong>：使用React来画矢量图的类库。我们不需要下载任何新东西，只需要通过Xcode将其引入到项目中。<br>\n很简单，只是有点繁琐：</p>\n<ol>\n<li>移步 <code class=\"language-text\">node_modules/react-native/Libraries/ART/</code><br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/dir.png\" alt=\"art目录\"></li>\n<li>将<em>ART.xcodeproj</em>拖拽到Xcode的<em>PIW/Libraries</em>下<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/libs.png\" alt=\"libs\"></li>\n<li>定位到<em>Build Phases</em>，友情提示：它与<em>General</em>,<em>Capabilities</em>等同级。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/buildphase.png\"></li>\n<li>将<em>ART.xcodeproj/Products</em>下的<em>libART.a</em>拖拽到<em>Build Phases</em>下的<em>Link Binary With Libraries</em>条目下：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/linklib.png\"></li>\n</ol>\n<p>就这么简单，全是些拖拖拽拽的活儿。</p>\n<p>然后，刷新模拟器。酷！我们已经能够看到带加载进度的壁纸，并且能左右滑动浏览。有没有碰到心动的图片？载下来？莫慌，待会儿来满足你。现在，我们先修改下进度提示的样式，这个在<code class=\"language-text\">NetworkImage</code>下的<code class=\"language-text\">indicatorProps</code>可以设置：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NetworkImage</span>\n\n  <span class=\"token attr-name\">source</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>uri<span class=\"token punctuation\">:</span><span class=\"token template-string\"><span class=\"token string\">`https://unsplash.it/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>width<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>height<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?image=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>wallpaper<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n\n  <span class=\"token attr-name\">indicator</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Progress<span class=\"token punctuation\">.</span>Circle<span class=\"token punctuation\">}</span></span>\n\n  <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>wallpaperImage<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token comment\">/***/</span>\n\n  indicatorProps<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n\n    color<span class=\"token punctuation\">:</span><span class=\"token string\">'rgba(255,255,255,0.8)'</span><span class=\"token punctuation\">,</span>\n\n    size<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n\n    thickness<span class=\"token punctuation\">:</span><span class=\"token number\">4</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/***/</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NetworkImage</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>修改后进度提示应该长这样：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/indicator.png\" alt=\"indicator\"></p>\n<p>接下来，把图片的作者名字加上，我们要做尊重知识版权的好公民：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NetworkImage</span>\n\n<span class=\"token attr-name\">...</span>\n\n<span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">/***/</span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Text</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Photo by<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Text</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Text</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>label\\_author\\_name<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>wallpaper<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Text</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NetworkImage</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>别忘了创建各自对应的样式对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">label:</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span><span class=\"token string\">'absolute'</span>,\n\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span><span class=\"token string\">'#fff'</span>,\n\n    <span class=\"token property\">fontSize</span><span class=\"token punctuation\">:</span>13,\n\n    <span class=\"token property\">backgroundColor</span><span class=\"token punctuation\">:</span><span class=\"token string\">'#000'</span>,\n\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span>5,\n\n    <span class=\"token property\">paddingLeft</span><span class=\"token punctuation\">:</span>8,\n\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>20,\n\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>20\n\n  <span class=\"token punctuation\">}</span><span class=\"token selector\">,\n\nlabel_author_name:</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span><span class=\"token string\">'absolute'</span>,\n\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span><span class=\"token string\">'#fff'</span>,\n\n    <span class=\"token property\">fontSize</span><span class=\"token punctuation\">:</span>15,\n\n    <span class=\"token property\">backgroundColor</span><span class=\"token punctuation\">:</span><span class=\"token string\">'#000'</span>,\n\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span>5,\n\n    <span class=\"token property\">paddingLeft</span><span class=\"token punctuation\">:</span>8,\n\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>52,\n\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>20,\n\n    <span class=\"token property\">fontWeight</span><span class=\"token punctuation\">:</span><span class=\"token string\">'bold'</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>来来来，我们瞅瞅加了作者后的效果：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/withauthor.png\"></p>\n<p>有木有瞬间感觉像那么回事儿了！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/dese.png\"></p>\n<p>走到这儿，这一节算完事儿了，为了能下载壁纸，我们将在下一节做一些更加有技术含量的事儿。</p>\n<h1 id=\"2-捕捉双击操作double-taps\"><a href=\"#2-%E6%8D%95%E6%8D%89%E5%8F%8C%E5%87%BB%E6%93%8D%E4%BD%9Cdouble-taps\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 捕捉双击操作(Double-Taps)</h1>\n<p>这一节我们要用到的是PanResponder，这个API能做一些很酷的事情，比如捕捉双击操作。</p>\n<p>其实，如果偷懒，完全可以在页面上放一个下载按钮，点击就下载，完活儿！但是，我们要做就做有逼格的事儿，双击图片下载就很符合这个档次，恩，撸起袖子干吧！</p>\n<p>在开始之前，最好阅读一遍<a href=\"https://facebook.github.io/react-native/docs/panresponder.html\">PanResponder API</a>文档，因为你不读一遍，也不知道这个文档其实也没啥卵用o(╯□╰)o。不过我们至少知道了PanResponder的基本用法，这就够了。</p>\n<p>废话少说，开始撸代码。首先，在构造函数里声明一个新对象：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imagePanResponder <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>别忘了在顶部引入<code class=\"language-text\">PanResponder</code>的声明：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n\n  AppRegistry<span class=\"token punctuation\">,</span>\n\n  StyleSheet<span class=\"token punctuation\">,</span>\n\n  Text<span class=\"token punctuation\">,</span>\n\n  View<span class=\"token punctuation\">,</span>\n\n  ActivityIndicatorIOS<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/***/</span>\n\n  PanResponder\n\n  <span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>接下来我们要做两件事：</p>\n<ul>\n<li>创建一个<code class=\"language-text\">PanResponder</code>并赋值<code class=\"language-text\">imagePanResponder</code></li>\n<li>将<code class=\"language-text\">imagePanResponder</code>关联到<code class=\"language-text\">&lt;NetworkImage&gt;</code>组件</li>\n</ul>\n<p>为了完成第一件事，需要新增一个生命周期函数:<code class=\"language-text\">componentWillMount</code>。这个函数只有在组件首次渲染时才会触发，所以非常适合用于初始化<code class=\"language-text\">PanResponder</code>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imagePanResponder <span class=\"token operator\">=</span> PanResponder<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n      onStartShouldSetPanResponder<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleStartShouldSetPanResponder<span class=\"token punctuation\">,</span>\n\n      onPanResponderGrant<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlePanResponderGrant<span class=\"token punctuation\">,</span>\n\n      onPanResponderRelease<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlePanResponderEnd<span class=\"token punctuation\">,</span>\n\n      onPanResponderTerminate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlePanResponderEnd\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>初始化完了，就可以将这些事件关联到<code class=\"language-text\">NetworkImage</code>组件了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imagePanResponder<span class=\"token punctuation\">.</span>panHandlers<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre>\n      </div>\n<p>注：<code class=\"language-text\">...</code>是ES6中的扩展运算符，如果懵逼，请移步<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator\">这里</a>充电。</p>\n<p>一般来说，一个触摸事件有三个阶段：开始（start）、移动（move）、释放（release），一个组件能够通过声明响应特定的触摸事件。<code class=\"language-text\">PanResponder.create({...</code>下提到的第一个事件<code class=\"language-text\">onStartShouldSetPanResponder</code>，从英文名字的意思大概也能猜出，这是在请求是否能将<code class=\"language-text\">PanResponder</code>绑定在该组件上。紧跟其后是一个方法<code class=\"language-text\">this.handleOnStartShouldSetPanResponder</code>，用于响应该事件，若该方法返回<code class=\"language-text\">true</code>，则通过请求，然后才能谈下一步，<code class=\"language-text\">false</code>则相反。所以，你应该知道在此我们应该返回什么，认清你的阶级立场，同志，老大哥在看着你：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">handleStartShouldSetPanResponder</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> gestureState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>紧随其后的<code class=\"language-text\">onPanResponderGrant</code>是在一旦有了触摸时触发，在此我们先打印一个信息占个坑：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">handlePanResponderGrant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手指触摸到屏幕啦~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>最后两个事件从字面上也都能自解释，在手指离开屏幕时，都能触发，在此我们还是先打印信息占个坑：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">handlePanResponderEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手指离开屏幕啦~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>保存代码，壁纸一旦加载完毕，点击一下，应该会看到如下打印信息：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/touched.png\"></p>\n<p>OK，基于这些认知，我们可以开始捕捉双击操作了。判断是否为双击操作的关键是需要知道上一操作的信息：触摸发生的<strong>坐标</strong>和<strong>时间戳</strong>。在构造函数新增对象<code class=\"language-text\">prevTouchInfo</code>用于保存触摸信息：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prevTouchInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token constant\">X</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token constant\">Y</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n  timeStamp<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>然后，在<code class=\"language-text\">handlePanResponderGrant</code>更新这个对象(注意代码的次序)：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">handlePanResponderGrant</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> gestureState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token keyword\">var</span> currentTouchTimeStamp <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDoubleTap</span><span class=\"token punctuation\">(</span>currentTouchTimeStamp<span class=\"token punctuation\">,</span> gestureState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> \n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'双击操作'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prevTouchInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token constant\">X</span><span class=\"token punctuation\">:</span> gestureState<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">,</span>\n\n    <span class=\"token constant\">Y</span><span class=\"token punctuation\">:</span> gestureState<span class=\"token punctuation\">.</span>y0<span class=\"token punctuation\">,</span>\n\n    timeStamp<span class=\"token punctuation\">:</span> currentTouchTimeStamp\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"language-text\">handlePanResponderGrant</code>在每次单击时都会触发，但是有个地方需要特别注意：此处的<code class=\"language-text\">this</code>并不是指向<code class=\"language-text\">PIW</code>类，而是<code class=\"language-text\">PanResponder</code>，为了正确的引用，我们需要在构造函数使用<code class=\"language-text\">bind</code>重新定向一下。而如果我们一开始选用<code class=\"language-text\">React.createClass({ ... })</code>来创建组件，就不会存在这个问题，<strong>autobinding</strong>会帮我们搞定这个问题。也算有得有失吧:</p>\n<p>1</p>\n<p>this.handlePanResponderGrant = this.handlePanResponderGrant.bind(this);</p>\n<p><code class=\"language-text\">isDoubleTap</code>是我们预先埋好的坑，下面我们填上它：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">isDoubleTap</span><span class=\"token punctuation\">(</span>currentTouchTimeStamp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token punctuation\">,</span> timeStamp<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prevTouchInfo<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> dt <span class=\"token operator\">=</span> currentTouchTimeStamp <span class=\"token operator\">-</span> timeStamp<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>dt <span class=\"token operator\">&lt;</span> <span class=\"token constant\">DOUBLE</span>\\_TAP\\_DELAY <span class=\"token operator\">&amp;&amp;</span> Utils<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">DOUBLE</span>\\_TAP\\_RADIUS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>好吧，你可能会注意到了，坑里有坑：</p>\n<ul>\n<li>\n<p><code class=\"language-text\">DOUBLE_TAP_DELAY</code>和<code class=\"language-text\">DOUBLE_TAP_RADIUS</code>是我们定义的常量，需要在头部初始化一下:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">DOUBLE</span>\\_TAP\\_DELAY <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// milliseconds</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DOUBLE</span>\\_TAP\\_RADIUS <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n</li>\n<li>\n<p>新建一个模块<strong>utils.js</strong>，暴露出<code class=\"language-text\">distance</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> x1 <span class=\"token operator\">-</span> x0 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> y1 <span class=\"token operator\">-</span> y0 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n</li>\n</ul>\n<p><code class=\"language-text\">distance</code>是用来计算两个坐标之间的直线距离，还记得中学的几何公式吗？<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/distance.png\" alt=\"distance\"></p>\n<p><code class=\"language-text\">handlePanResponderGrant</code>最后一步是更新<code class=\"language-text\">prevTouchInfo</code>。</p>\n<p>保存代码，等壁纸加载完毕，双击屏幕，如果不出意外的话，控制台里会输出:<strong>双击操作</strong>。</p>\n<h1 id=\"3将壁纸保存到本地相册\"><a href=\"#3%E5%B0%86%E5%A3%81%E7%BA%B8%E4%BF%9D%E5%AD%98%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.将壁纸保存到本地相册</h1>\n<p>现在我们能捕捉到双击的手势了，也就可以开始着手撸保存壁纸的代码了。首先，我们把console代码替换成一个调用的方法，先占坑。  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isDoubleTap</span><span class=\"token punctuation\">(</span>currentTouchTimeStamp<span class=\"token punctuation\">,</span> gestureState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveCurrentWallpaperToCameraRoll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>一会儿我们再来实现<code class=\"language-text\">saveCurrentWallpaperToCameraRoll</code>，下面我们先来看另一个问题：壁纸有五张，如何定位当前的这一张？<br>\n我们可以通过从零开始的索引来定位当前图片，每滑动一次就加1或者减1:  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>还记得上一篇我们预留的一个坑位吗？<code class=\"language-text\">Swiper</code>里的<code class=\"language-text\">onMomentumScrollEnd</code>，在该方法里更新<code class=\"language-text\">currentWallIndex</code>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">onMomentumScrollEnd</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>同样的，别忘了在<code class=\"language-text\">constructor</code>里绑定<code class=\"language-text\">this</code>:</p>\n<p>1</p>\n<p>this.onMomentumScrollEnd = this.onMomentumScrollEnd.bind(this);</p>\n<p>好了，我们开始为<code class=\"language-text\">saveCurrentWallpaperToCameraRoll</code>填坑了。为了能访问相册，需要先引入<code class=\"language-text\">Camera Roll</code>类库，还记得开头是怎么引入<code class=\"language-text\">ReactART</code>的吗？没错，照做一遍就可以：<code class=\"language-text\">node_modules/react-native/Libraries/CameraRoll</code><br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/cameraroll.png\"></p>\n<p>然后就可以导入了：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n\n  View<span class=\"token punctuation\">,</span>\n\n  Text<span class=\"token punctuation\">,</span>\n\n  StyleSheet<span class=\"token punctuation\">,</span>\n\n  Dimensions<span class=\"token punctuation\">,</span>\n\n  PanResponder<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/***/</span>\n\n  CameraRoll<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 访问相册</span>\n\n  AlertIOS <span class=\"token comment\">// iOS的弹出框</span>\n\n  <span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>一旦壁纸保存到相册，我们需要给用户一个保存成功的提示，<code class=\"language-text\">AlertIOS</code>帮我们做到这一点。现在，我们可以着手实现<code class=\"language-text\">saveCurrentWallpaperToCameraRoll</code>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">saveCurrentWallpaperToCameraRoll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> currentWall <span class=\"token operator\">=</span> wallsJSON<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> currentWallURL <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`http://unsplash.it/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>width<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>height<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?image=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  CameraRoll<span class=\"token punctuation\">.</span><span class=\"token function\">saveImageWithTag</span><span class=\"token punctuation\">(</span>currentWallURL<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    AlertIOS<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>\n\n      <span class=\"token string\">'保存成功'</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token string\">'壁纸已保存到本地相册'</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token punctuation\">[</span>\n\n        <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">:</span> <span class=\"token string\">'好哒!'</span><span class=\"token punctuation\">,</span> onPress<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK Pressed!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">]</span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error saving to camera roll'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>以上代码都能做到自解释，不懂的地方移步：<a href=\"https://facebook.github.io/react-native/docs/cameraroll.html\">CameraRoll</a>和<a href=\"https://facebook.github.io/react-native/docs/alertios.html\">AlertIOS</a>，你懂的。</p>\n<p>好啦，保存代码，去模拟器体验一下保存壁纸功能：（首次保存需要手动同意获取访问相册的权限）<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/saved.png\"><br>\n完美！额，等等，从双击到壁纸保存成功，好像有那么几秒的等待时间，用户可能会认为双击不成功，然后再双击一次，这不是我们的期望，下一节专门解决这个问题！</p>\n<h1 id=\"4创建一个等待组件：waitingjs\"><a href=\"#4%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AD%89%E5%BE%85%E7%BB%84%E4%BB%B6%EF%BC%9Awaitingjs\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.创建一个等待组件：Waiting.js</h1>\n<p>如果没记错的话，我们将创建第一个组件：Waiting.js。这个组件用于异步操作的等待时间，比如保存壁纸到相册的操作，就很有必要加一个等待提示，让用户知道APP在做什么。</p>\n<p>在项目根目录新建文件：<strong>Waiting.js</strong>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n\n  View<span class=\"token punctuation\">,</span>\n\n  Text<span class=\"token punctuation\">,</span>\n\n  Component<span class=\"token punctuation\">,</span>\n\n  ActivityIndicatorIOS<span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">default</span> Waiting <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> isVisible<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> isVisible <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n\n        <span class=\"token operator\">&lt;</span>View \n\n         style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n\n          flex<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n          flexDirection<span class=\"token punctuation\">:</span> <span class=\"token string\">'row'</span><span class=\"token punctuation\">,</span>\n\n          justifyContent<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n          alignItems<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n          width<span class=\"token punctuation\">:</span> width<span class=\"token punctuation\">,</span>\n\n          height<span class=\"token punctuation\">:</span> height<span class=\"token punctuation\">,</span>\n\n          position<span class=\"token punctuation\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span>\n\n          top<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n          left<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n          backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'rgba(0, 0, 0, 0.5)'</span>\n\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n\n         <span class=\"token operator\">&lt;</span>ActivityIndicatorIOS\n\n            animating<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n\n            color<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'#fff'</span><span class=\"token punctuation\">}</span>\n\n            size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'large'</span><span class=\"token punctuation\">}</span> \n\n            style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>margin<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n           <span class=\"token operator\">&lt;</span>Text style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">:</span>’#fff’<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>正在保存，请稍后<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span> \n\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>View<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span> \n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Waiting<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><code class=\"language-text\">render</code>第一行代码作用是从组件的<code class=\"language-text\">props</code>中获取相应的属性，其中<code class=\"language-text\">isVisible</code>用于判断是否显示该组件，使用该组件的格式：  </p>\n<p>1</p>\n<Waiting width={width} height={height} isVisible={isWaitingVisible}/>\n<p>在<strong>index.ios.js</strong>中引入<strong>Waiting.js</strong>  </p>\n<p>1</p>\n<p>var Waiting = require('./Waiting.js');</p>\n<p>为了能控制Waiting组件的显示与隐藏，需要在<strong>index.ios.js</strong>新增一个状态：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  wallsJSON<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  isLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">/***/</span>\n\n  isWaitngVisible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 默认不显示</span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>现在，我们可以在<code class=\"language-text\">&lt;/Swiper</code>之后放入<code class=\"language-text\">&lt;Waiting&gt;</code>组件了，不过，直接这样做会导致报错，因为<a href=\"https://facebook.github.io/react/tips/maximum-number-of-jsx-root-nodes.html\">React不允许返回多个组件</a>。为了解决这个问题，我们需要用<code class=\"language-<view\">&lt;/View</code>再做一个简单的包裹：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">renderResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">,</span> isWaitngVisible<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\n  <span class=\"token comment\">/***/</span>\n\n    <span class=\"token operator\">&lt;</span>View<span class=\"token operator\">></span>\n\n  <span class=\"token comment\">/***/</span>\n\n    <span class=\"token operator\">&lt;</span>Swiper\n\n      <span class=\"token operator\">...</span><span class=\"token operator\">></span>\n\n<span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">.</span>\n\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Swiper<span class=\"token operator\">></span>\n\n  <span class=\"token comment\">/***/</span>\n\n    <span class=\"token operator\">&lt;</span>Waiting width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span> height<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span> isVisible<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isWaitngVisible<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n\n  <span class=\"token comment\">/***/</span>\n\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>既然有了<code class=\"language-text\">isWaitngVisible</code>状态，我们就应该想一想在哪些时机来改变它的状态：双击触发时置为<code class=\"language-text\">true</code>，保存成功时置为<code class=\"language-text\">false</code>，对应到代码就是：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">saveCurrentWallpaperToCameraRoll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token comment\">// Waiting 组件显示</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isWaitingVisible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> currentWall <span class=\"token operator\">=</span> wallsJSON<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> currentWallURL <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`http://unsplash.it/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>width<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>height<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?image=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentWall<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  CameraRoll<span class=\"token punctuation\">.</span><span class=\"token function\">saveImageWithTag</span><span class=\"token punctuation\">(</span>currentWallURL<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n    <span class=\"token comment\">// Waiting 组件隐藏</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isWaitingVisible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span>\n\n    AlertIOS<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>\n\n      <span class=\"token string\">'保存成功'</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token string\">'壁纸已保存到本地相册'</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token punctuation\">[</span>\n\n        <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">:</span> <span class=\"token string\">'好哒！'</span><span class=\"token punctuation\">,</span> onPress<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK Pressed!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">]</span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error saving to camera roll'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>模拟器刷新，双击壁纸，等待组件出现，稍后保存成功的弹窗出现，等待组件消失，完美！</p>\n<p>额，等等，真的很完美吗？有没有注意到保存完图片，屏幕跳到了第一张图片。这是因为我们在<code class=\"language-text\">saveWallpaperToCameraRoll</code>调用<code class=\"language-text\">this.setState()</code>，改变了<code class=\"language-text\">isWaitingVisible</code>的状态，触发了<code class=\"language-text\">render()</code>，从而<code class=\"language-text\">swiper</code>重新加载数据并从第一张图显示。</p>\n<p>为了解决这个bug，我们可以通过<code class=\"language-text\">Swiper</code>的<code class=\"language-text\">index</code>入手：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Swiper</span> <span class=\"token attr-name\">...</span>\n\n        <span class=\"token attr-name\">index</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>这样，就保证了每次重新渲染，都从保存的那张开始。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/saving.png\" alt=\"saving\"><br>\n好了，写到这里，我们基本完工一个核心功能完备的小应用：</p>\n<ul>\n<li>能加载随机精美壁纸</li>\n<li>能浏览</li>\n<li>能保存</li>\n</ul>\n<p>如果对随机的五张壁纸无感，想换一批，怎么破？当然，我们可以放置一个按钮，点击便能更新随机的壁纸数据，可是…能不能做得酷一些呢？比如只需要摇一摇手机，便更新了一批壁纸！</p>\n<p>年轻人，下一节我们做这件酷酷的事儿…<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/maomi.jpg\"></p>\n<h1 id=\"5摇一摇动作（shake）和真机测试\"><a href=\"#5%E6%91%87%E4%B8%80%E6%91%87%E5%8A%A8%E4%BD%9C%EF%BC%88shake%EF%BC%89%E5%92%8C%E7%9C%9F%E6%9C%BA%E6%B5%8B%E8%AF%95\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.摇一摇动作（Shake）和真机测试</h1>\n<p>为了使我们的APP能够捕捉到摇一摇的动作，需要新增一个模块：<a href=\"https://www.npmjs.com/package/react-native-shake-event-ios\">react-native-shake-event-ios</a>。项目根目录运行：<code class=\"language-text\">npm install --save react-native-shake-event-ios</code>。</p>\n<p>另外，我们还需要做的是链接相应的类库。如果没记错的话，这是第三次，也是最后一次做这样的操作，我就不多说了，应该熟练了，少年。温馨提示：<code class=\"language-text\">node_modules/react-native-shake-event-ios/</code>下的<code class=\"language-text\">RNShakeEvent.xcodeproj</code></p>\n<p>引用该类库：  </p>\n<p>1</p>\n<p>var ShakeEvent = require('react-native-shake-event-ios');</p>\n<p>我们在<code class=\"language-text\">componentWillMount</code>新增摇一摇的监听动作：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token operator\">...</span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token comment\">// 摇一摇，更新数据</span>\n\n  ShakeEvent<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shake'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchWallsJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"language-text\">initialize</code>填坑，其实就是初始化各种状态：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n    wallsJSON<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    isLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n    isWaitingVisible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentWallIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>保存代码，接下来我们开始真机测试。当然，如果没有真机，也可以通过快捷键组合：<code class=\"language-text\">CMD + Ctrl + Z</code>模拟摇一摇操作。不过，我还是期望你有一部真机，因为…这样可以拿来装X啊，少年！</p>\n<p>真机测试意味着我们将脱离开发环境，像平时通过AppStore安装APP那样把我们的APP放到手机内。按照<a href=\"https://facebook.github.io/react-native/docs/running-on-device-ios.html#using-offline-bundle\">官方文档</a>来做，其实很简单：</p>\n<ol>\n<li>\n<p>找到<code class=\"language-text\">Xcode/PIW/PIW/AppDeletegate.m</code>，做以下操作：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/uncomment.png\"></p>\n</li>\n<li>\n<p><code class=\"language-text\">Product → Scheme → Edit Scheme</code>或者直接快捷键：<code class=\"language-text\">CMD + Shift + ,</code>，划入的窗口中将<code class=\"language-text\">Build Configuration</code>从<code class=\"language-text\">debug</code>改为<code class=\"language-text\">Release</code>:<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/schema.png\"><br>\n这样做的目的是为了防止摇一摇弹出调试菜单。</p>\n</li>\n<li>\n<p>转向<code class=\"language-text\">Build Setting</code>，禁掉<code class=\"language-text\">Dead Code Stripping</code>，别问我这是为啥，我也不清楚，可能这就是人生，年轻人。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/deadcode.png\"></p>\n</li>\n</ol>\n<p>联接你的iPhone到Mac上，选择真机运行：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/runmyphone.png\"></p>\n<p>好啦，万事俱备，只欠一个点击。首次打包和安装会持续较长时间，请耐心等候。安装过程中甭管蹦出什么，选择<strong>相信</strong>就行。注意，如果想恢复到开发环境，把上面的步骤1和步骤2撤销就可以了。</p>\n<p>安装完毕，手机桌面上就应该多出一个巨丑的APP图标，没错，那就是这么长时间我们辛苦做出的APP，快快打开体验一番吧！</p>\n<p>最后，我们把图标也加上：</p>\n<ol>\n<li>下载<a href=\"http://7xo6wq.com1.z0.glb.clouddn.com/SplashWallIcons.zip\">图标文件</a>。当然，你也可以自己按照<a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html\">苹果图标规定</a>来设计一套</li>\n<li>调转到Xcode<code class=\"language-text\">PIW/PIW/Images.xcassets</code>，选择AppIcon</li>\n<li>将图标文件按照规格拖拽到对应的框内，一个萝卜一个坑，so easy!<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/icons.png\"></li>\n</ol>\n<p>再次打包和运行，这次那个巨丑无比的图标应该不见了。</p>\n<p>卧槽，我们目前是不是可以说正式完成了一个APP版本的迭代？是的，我们做到了！</p>\n<h1 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h1>\n<p>又到了总结时间了，这一次我们都做了哪些事情呢：</p>\n<ul>\n<li><code class=\"language-text\">NetworkImage</code>组件让我们能够显示出带加载进度的图片</li>\n<li><code class=\"language-text\">PanResponder</code>API让我们能够捕捉到双击操作</li>\n<li><code class=\"language-text\">Camera Roll</code>让我们能够将壁纸保存到本地相册</li>\n<li><code class=\"language-text\">Waiting</code>是我们首个自定义的组件，让用户在保存壁纸的同时不再懵逼</li>\n<li><code class=\"language-text\">react-native-shake-event-ios</code>让我们能够检测到摇一摇操作，并在恰当的时机，更新随机数据</li>\n</ul>\n<p>目前为止，我们已经完成了一个功能较完备的APP，同时也学习了许多新知，没有过多地深入，但均给出了深入的入口，也就是文章中的链接。其实，这个APP还可以加入许多好玩的特性，比如：</p>\n<ul>\n<li>既然有双击操作，是不是可以考虑加一个单击操作：单击壁纸，隐藏顶部的两个小黑条和底部的分页，也就是全屏显示壁纸，看得更爽一些，再次单击，恢复隐藏的元素。</li>\n<li>有没有可能做一个设置壁纸前的预览功能呢？虽然可能从API上有所限制，但我们可以通过一些hack的方式来达到类似的目的，至于什么方式，发挥你的脑洞去试试吧。</li>\n<li>每次打开APP都要从第三方获取数据，对于在非WiFi环境，用户可能会有所顾虑，是不是应该做一个本地缓存第三方数据的功能，甚至图片？</li>\n<li>现在我们的代码组织并不很模块化，这一点可不可以做些优化？</li>\n<li>React Native 也可以做安卓开发，尝尝鲜？</li>\n</ul>\n<p>以上是我能想到的一些功能点和优化点，如果我们能一步一步走到现在，相信这些好玩的特性也不会那么难实现。或许，我还会写个番外篇，讲一讲如何继续迭代<strong>PIW</strong>。</p>\n<p>通过这个简单的APP，我们接触到了许多知识点，但React Native的学习远不止这些，一些高级话题我们还没涉猎，比如<code class=\"language-text\">Flux/Redux</code>。但万变不离阅读官方文档，加之实例练习，边学边总结，是我的节奏。Hey，man，你的节奏找到了吗？好了，我累了，打烊了…<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-two/tired.jpg\" alt=\"姚明\"><br>\n哦对了，最新代码放在了<a href=\"https://github.com/zerosoul/PIW\">Github上</a>，欢迎指正。</p>\n<h1 id=\"原文链接\"><a href=\"#%E5%8E%9F%E6%96%87%E9%93%BE%E6%8E%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原文链接</h1>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2016/04/how-to-build-your-first-ios-app-with-javascript/#\">The Beauty Of React Native: Building Your First iOS App With JavaScript (Part 2)</a></li>\n</ul>","frontmatter":{"title":"React Native之美：构建我的第一个iOS APP（2）","date":"2016-06-07T09:31:37.000Z","category":"它山之石","tags":["react native","react","翻译"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#%E5%86%8D%E7%BB%AD%E5%89%8D%E7%BC%98\">再续前缘</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#1%E5%8F%AC%E5%94%A4%E5%87%BA%E5%A3%81%E7%BA%B8%E5%92%8C%E4%BD%9C%E8%80%85\">1.召唤出壁纸和作者</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#2-%E6%8D%95%E6%8D%89%E5%8F%8C%E5%87%BB%E6%93%8D%E4%BD%9Cdouble-taps\">2. 捕捉双击操作(Double-Taps)</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#3%E5%B0%86%E5%A3%81%E7%BA%B8%E4%BF%9D%E5%AD%98%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9B%B8%E5%86%8C\">3.将壁纸保存到本地相册</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#4%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AD%89%E5%BE%85%E7%BB%84%E4%BB%B6%EF%BC%9Awaitingjs\">4.创建一个等待组件：Waiting.js</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#5%E6%91%87%E4%B8%80%E6%91%87%E5%8A%A8%E4%BD%9C%EF%BC%88shake%EF%BC%89%E5%92%8C%E7%9C%9F%E6%9C%BA%E6%B5%8B%E8%AF%95\">5.摇一摇动作（Shake）和真机测试</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-two/#%E5%8E%9F%E6%96%87%E9%93%BE%E6%8E%A5\">原文链接</a></li>\n</ul>","excerpt":"再续前缘 第一篇文章 ，我们从零开始，一步一步走到最后，构建了一个似乎并没有卵用的APP。但是，我们做了大量的基础工作，不就是为了在接下来的继续更轻松自信些嘛！ 其实，第一篇的信息量还是很大的，里面的每一个链接都是通往一个新知的大门，如果你觉得掌握得差不多了，那就开始新的旅（Che）程（Dan…"}}}