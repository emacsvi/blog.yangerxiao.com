{"pageContext":{"slug":"/posts/the-secrets-of-silicon-valley","html":"<p><img src=\"/images/silicon.valley.png\" alt=\"硅谷\"></p>\n<h1 id=\"读后感\"><a href=\"#%E8%AF%BB%E5%90%8E%E6%84%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>读后感</h1>\n<p>《硅谷之谜》是一本颠覆人们对信息时代的认识、对创新和创业的理解的好书。作者吴军通过介绍硅谷成功的秘诀，揭示了信息时代的特点和方法论。近年来，吴军从技术和管理人员变成了投资人，他对IT领域，尤其是对科技创新因而有了更深入的了解。他根据这些年在硅谷所获得的第一手资料，结合自己的思考，回答了长期以来令大家深感困惑的一个不解之谜，那就是——为什么硅谷在全世界其他地区难以复制？</p>\n<p>在《硅谷之谜》中，吴军站在一个更高的层次，仔细分析了硅谷的起源和发展，对硅谷的创新力进行了深刻剖析，把硅谷的经验提升到了理论高度，并且解释了为什么只有硅谷真正做到了宽容叛逆、宽容失败、多元文化和拒绝平庸。这些特点造就了硅谷几十年的长盛不衰。</p>\n<h1 id=\"摘录\"><a href=\"#%E6%91%98%E5%BD%95\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>摘录</h1>\n<ul>\n<li>\n<p>硅谷代表的是后工业时代——它的做法其实是对工业时代价值观的一种否定。</p>\n</li>\n<li>\n<p>在硅谷3.0时代，创业不再是一件难事，创业者们只需要做好两件事即可：第一，想出真正有创新（而不是抄袭）的点子，并拥有过硬的技术；第二，以最快的速度去实现它。</p>\n</li>\n<li>\n<p>N+1型的叛逆：即站在巨人的肩膀，做得更近一步，带来技术进步，而非简单的抄袭。</p>\n</li>\n<li>\n<p>从某种意义上来讲，硅谷只是由美国为全世界那些想创业、想从科技信息产业中淘金的人提供一个居住、工作和生活的场所，从领土的主权上看硅谷属于美国，而在其他方面（尤其经济和文化）属于全世界。</p>\n</li>\n<li>\n<p>硅谷的独特之处：</p>\n<ul>\n<li>叛逆和对叛逆的宽容</li>\n<li>多元文化</li>\n<li>拒绝平庸</li>\n</ul>\n</li>\n<li>\n<p>科学是一个方法，一个过程，而非一个结论。一个结论是否正确，不能看它是由谁说出来的，而是要看它是怎么得到的。</p>\n</li>\n<li>\n<p>布林和他的同事在考虑什么事情该做，什么事情不该做时，通常只考虑两个因素，即是否能帮助全世界的人，以及是否具有革命性的突破。</p>\n</li>\n<li>\n<p>牛顿找到了开启工业革命大门的钥匙，而瓦特拿着这把钥匙，开启了工业革命的大门。</p>\n</li>\n<li>\n<p>工业时代的科学基础：</p>\n<ul>\n<li>牛顿和机械思维</li>\n<li>泰勒管理理论</li>\n<li>现代工业企业管理制度（资本，生产资料，生产关系，分配制度【零和博弈】，专利制度）</li>\n</ul>\n</li>\n<li>\n<p>信息时代的科学基础：</p>\n<ul>\n<li>维纳和控制论</li>\n<li>香农和信息论</li>\n<li>系统论</li>\n</ul>\n</li>\n<li>\n<p>在大工业时代，效率来自事先的规划和不断重复的操作；而在信息时代，效率来自沟通的带宽（扁平式管理）和共同遵守的协议（契约精神）。</p>\n</li>\n<li>\n<p>硅谷有幸诞生在三论提出之后，采用了一种全新的方法论来指导发展，这是硅谷成功的根本原因。</p>\n</li>\n</ul>\n<h1 id=\"工程师的五个等级：\"><a href=\"#%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E4%BA%94%E4%B8%AA%E7%AD%89%E7%BA%A7%EF%BC%9A\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工程师的五个等级：</h1>\n<p><img src=\"/images/five.class.engineer.png\" alt=\"工程师的五个等级\"></p>\n<h2 id=\"第五等的工程师\"><a href=\"#%E7%AC%AC%E4%BA%94%E7%AD%89%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第五等的工程师</h2>\n<p>是我们在前面提到的能够独立设计和实现一项功能的人。这是对工程师的基本要求，如果一个人只是懂一点工程实现的手段，需要别人告诉他怎么做，那最多算是助理工程师或者技工，不在我们讨论的工程师之列。</p>\n<h2 id=\"第四等的工程师\"><a href=\"#%E7%AC%AC%E5%9B%9B%E7%AD%89%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第四等的工程师</h2>\n<p>第四等的工程师就需要有点产品头脑了，也就是说他们在做一件事之前，要知道所做出来的东西是否有用、易用，是否便于维护，是否性能稳定，等等。除了要具备产品设计方面的基本知识，还要具有一定的领导才能，能在整个产品的生命周期从头到尾将一个产品负责到底。这在很多硅谷的公司里，基本上是一个高级工程师所应有的基本素质。对大部分工程师来讲，这些素质不是一个工学院就能培养出来的，而是需要在工业界实际锻炼三四年甚至更长的时间。当然，个别天赋很好的年轻人在学校里就具备了这种素质，但这是可遇不可求的。</p>\n<h2 id=\"第三等的工程师\"><a href=\"#%E7%AC%AC%E4%B8%89%E7%AD%89%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第三等的工程师</h2>\n<p>第三等的工程师可以做出行业里最好的产品。他们与第四等工程师有着质的差别，这不仅反映在技术水平、对市场的了解、对用户心理的了解以及组织能力等诸方面，而且也反映在悟性的差异上。当然，这种悟性很多是后天培养出来的，但这就需要更长的时间了。有些人从工作一开始，可能需要十年八年，经过多次失败，不断总结，终于在某个时间点豁然开朗。而另一些人可能非常幸运，在一开始就有幸和最优秀的人一起工作，加上善于学习，五六年下来就能达到第三等的水平。在硅谷，有极少数工程师只花了五六年时间就达到了这个水平。但是，即使一个人再聪明，基础再好，也需要在工程上花足够的时间才能达到这个水平，一个年轻人工作了四五年就开始做行政管理工作，基本上就和这个水平无缘了。</p>\n<h2 id=\"第二等的工程师\"><a href=\"#%E7%AC%AC%E4%BA%8C%E7%AD%89%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第二等的工程师</h2>\n<p>第二等的工程师是那些可以给世界带来惊喜的人，比如实现第一台实用化个人电脑的沃兹尼亚克、DSL之父约翰·西奥菲注7、iPhone和GoogleGlass的总设计师，以及前面提到的鲁宾、狄恩和戈玛瓦特等。他们与第三四五等工程师的差别在于其工作的原创性以及对世界的影响力。当然，他们的工作不是科学研究，这一点和科学家毕竟不同注。</p>\n<h2 id=\"第一等的工程师\"><a href=\"#%E7%AC%AC%E4%B8%80%E7%AD%89%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第一等的工程师</h2>\n<p>第一等的工程师是开创一个全新行业的人，历史上有爱迪生、特斯拉、福特，二战后有保时捷（FerdinandPorsche，1875—1951）博士、本田宗一郎（1906—1991）和硅谷的诺伊斯等人。这些工程师不仅在技术和产品等各个方向上与第二等的工程师有了质的差别，而且在经验和管理上也是好手，他们通常也是企业家，并通过自己的产品改变了世界。这一类人常常是可遇而不可求的，正如朗道列出的第一等物理学家只有个位数一样，第一等的工程师也是如此。朗道认为每一等物理学家之间的贡献相差十倍，每一等工程师的差距也是这么大。当然，很多企业家都希望能遇到一些第二等，甚至第一等的工程师，但是这需要一个由工程师构建的完整金字塔：要想出几个第一等的工程师，就需要有足够数量的第二等工程师作为基础；同样，产生第二等工程师要靠大量的第三等工程师作为基础。在一个产业里，不可能指望在一大堆第五等工程师的基础上，突然冒出一两个第一或者第二等的工程师的。甚至有时，即使高薪聘请来一个第二等的工程师，如果没有第三、第四等的工程师与之配合，他也很难直接依靠第五等的人做出一流产品。</p>\n<h2 id=\"硅谷的工程师文化\"><a href=\"#%E7%A1%85%E8%B0%B7%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%96%87%E5%8C%96\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>硅谷的工程师文化</h2>\n<p>在硅谷，人们能够有幸接触到第二等工程师，这些人有时决定了一个公司产品所能达到的高度。而在公司里，真正干活的主力是第三、第四等工程师，这一类人比较多。而在中国的IT企业里，大家喜欢当官，因此在第五等工程师之上，会出现断层，从而影响产品开发的质量和原创性。</p>\n<p>硅谷工程师文化的第三个特点是全社会对工程师的认可。这种认可不仅包括对工程师的尊重，以及给予他们较高的社会地位，还包括允许不同等级的工程师在收入上有巨大差异。既然每一等工程师的贡献可以相差十倍，为什么他们的收入不能够相差十倍？当然很多人会反对这种收入差距过大的做法，比如欧洲的社会党人和美国的工会。但是客观规律不以人的意志为转移，如果拉大收入差距能够最大程度地发展生产力，而平均主义不能，那么采用第一种分配方式的地区无疑会获得更快的发展，硅谷则是这样的地区。</p>\n<p>在硅谷很多公司内部，不同层级、不同贡献的工程师之间，工资和奖金的差异其实不大，但是期权起到了调节他们收入的主要作用。这使得第二等工程师的收入真的可以比第三等工程师多出一个数量级，而第三等和第四等之间，收入可能也有数量级之差。很多企业请我介绍一些Google的工程师，而且张口就要最好的，但我明确表示那些最好的工程师所要的薪酬包大部分公司可能都付不起，因为在大部分企业的想象中，不同的工程师之间收入差距在两三倍就算是很多了，而在硅谷的明星企业，这种差距是数量级的。在金字塔尖的那些工程师的收入非常高，甚至高过高层管理人员，再加上社会对他们的认可，转行政管理的欲望并不强烈。在硅谷的公司里，工程师们有专门的上升通道，这才保证了硅谷的工程师文化得以很好的维持。</p>\n<p>世界上很多国家和地区对工程师本身还是很尊重和重视的，比如在法国要取得工程师的资格难度很大，需要在大学先读预科，然后才能进入工学院获得工程学位，并成为工程师。但是法国的工程师在收入上没有很大的差异，第四等和第三等的工程师数量很多，但缺乏更高级别的工程师，因为大家努力向上走的意愿并不强烈。毕竟，成为一个优秀的工程师需要经过很多年的努力。这也导致了欧洲很多国家的创新力不足。</p>","frontmatter":{"title":"阅读笔记《硅谷之谜》","date":"2016-12-19T01:35:08.000Z","category":"阅读笔记","tags":["硅谷","吴军","互联网","阅读"],"cover":"/images/see.jpg"},"excerpt":"读后感 《硅谷之谜》是一本颠覆人们对信息时代的认识、对创新和创业的理解的好书。作者吴军通过介绍硅谷成功的秘诀，揭示了信息时代的特点和方法论。近年来，吴军从技术和管理人员变成了投资人，他对IT…","tableOfContents":"<ul>\n<li><a href=\"/posts/the-secrets-of-silicon-valley/#%E8%AF%BB%E5%90%8E%E6%84%9F\">读后感</a></li>\n<li><a href=\"/posts/the-secrets-of-silicon-valley/#%E6%91%98%E5%BD%95\">摘录</a></li>\n<li>\n<p><a href=\"/posts/the-secrets-of-silicon-valley/#%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E4%BA%94%E4%B8%AA%E7%AD%89%E7%BA%A7%EF%BC%9A\">工程师的五个等级：</a></p>\n<ul>\n<li><a href=\"/posts/the-secrets-of-silicon-valley/#%E7%AC%AC%E4%BA%94%E7%AD%89%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88\">第五等的工程师</a></li>\n<li><a href=\"/posts/the-secrets-of-silicon-valley/#%E7%AC%AC%E5%9B%9B%E7%AD%89%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88\">第四等的工程师</a></li>\n<li><a href=\"/posts/the-secrets-of-silicon-valley/#%E7%AC%AC%E4%B8%89%E7%AD%89%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88\">第三等的工程师</a></li>\n<li><a href=\"/posts/the-secrets-of-silicon-valley/#%E7%AC%AC%E4%BA%8C%E7%AD%89%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88\">第二等的工程师</a></li>\n<li><a href=\"/posts/the-secrets-of-silicon-valley/#%E7%AC%AC%E4%B8%80%E7%AD%89%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88\">第一等的工程师</a></li>\n<li><a href=\"/posts/the-secrets-of-silicon-valley/#%E7%A1%85%E8%B0%B7%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%96%87%E5%8C%96\">硅谷的工程师文化</a></li>\n</ul>\n</li>\n</ul>","prev":{"fields":{"slug":"/posts/fe-interview-questions-part-one"},"html":"<h1 id=\"html\"><a href=\"#html\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML</h1>\n<h2 id=\"如何理解html语义化\"><a href=\"#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3html%E8%AF%AD%E4%B9%89%E5%8C%96\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何理解HTML语义化</h2>\n<h3 id=\"定义\"><a href=\"#%E5%AE%9A%E4%B9%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>定义</h3>\n<p>使用恰当语义的html标签，让页面具有良好的结构与含义，从而让人和机器都能快速理解网页内容，从而利于SEO，便于用户的阅读和开发人员的维护。</p>\n<h3 id=\"举例\"><a href=\"#%E4%B8%BE%E4%BE%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>举例</h3>\n<p>包含但不限于：body, article, nav, aside, section, header, footer, hgroup, h1-h6, address等。</p>\n<h3 id=\"参考\"><a href=\"#%E5%8F%82%E8%80%83\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h3>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25493886\">如何理解Web语义化</a></li>\n</ul>\n<h2 id=\"meta-viewport-最佳实践，为什么这样写？\"><a href=\"#meta-viewport-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E6%A0%B7%E5%86%99%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>meta viewport 最佳实践，为什么这样写？</h2>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ontent</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width; initial-scale=1.0; maximum-scale=1; user-scalable=no;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre>\n      </div>\n<p>让viewport宽度等于逻辑分辨率宽度(width=device-width)，禁用缩放。</p>\n<h3 id=\"参考-1\"><a href=\"#%E5%8F%82%E8%80%83-1\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h3>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/b880b48fa028\">可能是理解viewport最好的方式</a></li>\n</ul>\n<h2 id=\"尽可能详细地介绍下canvas元素\"><a href=\"#%E5%B0%BD%E5%8F%AF%E8%83%BD%E8%AF%A6%E7%BB%86%E5%9C%B0%E4%BB%8B%E7%BB%8D%E4%B8%8Bcanvas%E5%85%83%E7%B4%A0\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>尽可能详细地介绍下canvas元素</h2>\n<h3 id=\"参考-2\"><a href=\"#%E5%8F%82%E8%80%83-2\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Basic_usage\">MDN：Canvas的基本用法</a></li>\n</ul>\n<h1 id=\"css\"><a href=\"#css\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS</h1>\n<h2 id=\"盒模型\"><a href=\"#%E7%9B%92%E6%A8%A1%E5%9E%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>盒模型</h2>\n<h2 id=\"css-reset--normalizecss-有何区别？\"><a href=\"#css-reset--normalizecss-%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css reset &#x26;&#x26; normalize.css 有何区别？</h2>\n<h2 id=\"元素居中的几种方式\"><a href=\"#%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>元素居中的几种方式</h2>\n<h2 id=\"selector优先级规则\"><a href=\"#selector%E4%BC%98%E5%85%88%E7%BA%A7%E8%A7%84%E5%88%99\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>selector优先级规则</h2>\n<h2 id=\"bfc\"><a href=\"#bfc\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BFC</h2>\n<h2 id=\"清除浮动\"><a href=\"#%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>清除浮动</h2>\n<h1 id=\"javascript\"><a href=\"#javascript\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript</h1>\n<h2 id=\"有哪些数据类型\"><a href=\"#%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>有哪些数据类型</h2>\n<h2 id=\"promise的用法\"><a href=\"#promise%E7%9A%84%E7%94%A8%E6%B3%95\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise的用法</h2>\n<h2 id=\"手写ajax\"><a href=\"#%E6%89%8B%E5%86%99ajax\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>手写AJAX</h2>\n<h2 id=\"闭包\"><a href=\"#%E9%97%AD%E5%8C%85\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>闭包</h2>\n<h2 id=\"this\"><a href=\"#this\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this</h2>\n<h2 id=\"立即执行函数（iife）\"><a href=\"#%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%EF%BC%88iife%EF%BC%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>立即执行函数（IIFE）</h2>\n<h2 id=\"asyncawait-语法\"><a href=\"#asyncawait-%E8%AF%AD%E6%B3%95\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async/await 语法</h2>\n<h2 id=\"实现深拷贝\"><a href=\"#%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现深拷贝</h2>\n<h2 id=\"实现数组去重\"><a href=\"#%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现数组去重</h2>\n<h2 id=\"正则实现-code-classlanguage-textstringtrimcode\"><a href=\"#%E6%AD%A3%E5%88%99%E5%AE%9E%E7%8E%B0-code-classlanguage-textstringtrimcode\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正则实现 <code class=\"language-text\">String.trim()</code></h2>\n<h2 id=\"javascript原型，如何实现继承\"><a href=\"#javascript%E5%8E%9F%E5%9E%8B%EF%BC%8C%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript原型，如何实现继承</h2>\n<h2 id=\"es6中的class语法糖\"><a href=\"#es6%E4%B8%AD%E7%9A%84class%E8%AF%AD%E6%B3%95%E7%B3%96\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES6中的class语法糖</h2>\n<h2 id=\"code-classlanguage-textcode-相关\"><a href=\"#code-classlanguage-textcode-%E7%9B%B8%E5%85%B3\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">==</code> 相关</h2>","frontmatter":{"title":"整理：高频前端面试题，附答案（一）","date":"2017-02-09T12:32:58.000Z","category":"技术","tags":["html","css","javascript","dom","备忘","面试"],"cover":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/posts/fe-interview-questions-part-one/#html\">HTML</a></p>\n<ul>\n<li>\n<p><a href=\"/posts/fe-interview-questions-part-one/#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3html%E8%AF%AD%E4%B9%89%E5%8C%96\">如何理解HTML语义化</a></p>\n<ul>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E5%AE%9A%E4%B9%89\">定义</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E4%B8%BE%E4%BE%8B\">举例</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/posts/fe-interview-questions-part-one/#meta-viewport-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E6%A0%B7%E5%86%99%EF%BC%9F\">meta viewport 最佳实践，为什么这样写？</a></p>\n<ul>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E5%8F%82%E8%80%83-1\">参考</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/posts/fe-interview-questions-part-one/#%E5%B0%BD%E5%8F%AF%E8%83%BD%E8%AF%A6%E7%BB%86%E5%9C%B0%E4%BB%8B%E7%BB%8D%E4%B8%8Bcanvas%E5%85%83%E7%B4%A0\">尽可能详细地介绍下canvas元素</a></p>\n<ul>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E5%8F%82%E8%80%83-2\">参考</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/posts/fe-interview-questions-part-one/#css\">CSS</a></p>\n<ul>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E7%9B%92%E6%A8%A1%E5%9E%8B\">盒模型</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#css-reset--normalizecss-%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%EF%BC%9F\">css reset &#x26;&#x26; normalize.css 有何区别？</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F\">元素居中的几种方式</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#selector%E4%BC%98%E5%85%88%E7%BA%A7%E8%A7%84%E5%88%99\">selector优先级规则</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#bfc\">BFC</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8\">清除浮动</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/posts/fe-interview-questions-part-one/#javascript\">Javascript</a></p>\n<ul>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">有哪些数据类型</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#promise%E7%9A%84%E7%94%A8%E6%B3%95\">Promise的用法</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E6%89%8B%E5%86%99ajax\">手写AJAX</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E9%97%AD%E5%8C%85\">闭包</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#this\">this</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%EF%BC%88iife%EF%BC%89\">立即执行函数（IIFE）</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#asyncawait-%E8%AF%AD%E6%B3%95\">async/await 语法</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D\">实现深拷贝</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D\">实现数组去重</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#%E6%AD%A3%E5%88%99%E5%AE%9E%E7%8E%B0-code-classlanguage-textstringtrimcode\">正则实现 &#x3C;code class=\"language-text\">String.trim()&#x3C;/code></a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#javascript%E5%8E%9F%E5%9E%8B%EF%BC%8C%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF\">Javascript原型，如何实现继承</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#es6%E4%B8%AD%E7%9A%84class%E8%AF%AD%E6%B3%95%E7%B3%96\">ES6中的class语法糖</a></li>\n<li><a href=\"/posts/fe-interview-questions-part-one/#code-classlanguage-textcode-%E7%9B%B8%E5%85%B3\">&#x3C;code class=\"language-text\">==&#x3C;/code> 相关</a></li>\n</ul>\n</li>\n</ul>","excerpt":"HTML 如何理解HTML语义化 定义 使用恰当语义的html标签，让页面具有良好的结构与含义，从而让人和机器都能快速理解网页内容，从而利于SEO，便于用户的阅读和开发人员的维护。 举例 包含但不限于：body, article, nav, aside, section, header…"},"next":{"fields":{"slug":"/posts/array-filter-map-reduce-in-js"},"html":"<h1 id=\"写在前面的话\"><a href=\"#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写在前面的话</h1>\n<p>前几天<a href=\"/array-filter-trick\">写了篇文章</a>科普了下Javascript中<code class=\"language-text\">Array.filter()</code>的妙用，后来无意间发现了<a href=\"http://atendesigngroup.com/blog/array-map-filter-and-reduce-js\">一篇好文章</a>，一次性科普了三个API：<code class=\"language-text\">filter</code>、<code class=\"language-text\">map</code>和<code class=\"language-text\">reduce</code>，生动形象，尤其是配图，显然是用了心思。下面是译文：</p>\n<h1 id=\"译文\"><a href=\"#%E8%AF%91%E6%96%87\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>译文</h1>\n<p><img src=\"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/array-1.png\" alt=\"array top image\"></p>\n<p>最近，一直在为一个客户做一个视觉化数据的项目，从服务端API拉取数据回来然后转换出视觉效果，自然少不了大量的数据操作，为此我一再使用Javascript中的Array 三个API：<code class=\"language-text\">filter</code>、<code class=\"language-text\">map</code>和<code class=\"language-text\">reduce</code>。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Map</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">Filter</a>和<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">Reduce</a>常常被用于对一个数组做一些操作，进而转换成某个新的东西（数据类型不一定还是数组哦~）。下面是我对这三个API的直观认识：</p>\n<h1 id=\"map\"><a href=\"#map\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map</h1>\n<p><img src=\"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/array-map.png\" alt=\"array-map\"><br>\n你想将一个数组中的每一项做个转换，结果生成了一个新数组，并且新数组的长度和原数组一致。</p>\n<h1 id=\"filter\"><a href=\"#filter\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filter</h1>\n<p><img src=\"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/array-filter.png\" alt=\"array-filter\"><br>\n你想将一个数组做一个过滤，按照某规则提取出一些特定的项来。结果也生成了一个新数组，但新数组的长度小于或等于原数组。</p>\n<h1 id=\"reduce\"><a href=\"#reduce\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reduce</h1>\n<p><img src=\"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/array-reduce.png\" alt=\"array-reduce\"><br>\n你想通过遍历一个数组的每一项来计算出一个新东西，最后生成的结果可以是任何类型的变量：一个新数组，一个新对象，一个新布尔值…</p>\n<p><code class=\"language-text\">filter</code>、<code class=\"language-text\">map</code>和<code class=\"language-text\">reduce</code>共同点就是并不会对原数组做任何改动，结果都是生成一个新变量。让我们来看一些例子：</p>\n<h1 id=\"arraymap\"><a href=\"#arraymap\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.map()</h1>\n<p>现在我们有一个对象列表，其中每个对象代表的是一种变形金刚（译注：看来这位歪果仁是个变形金刚粉丝）：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> transformers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Optimus Prime'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Freightliner Truck'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Autobot'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Megatron'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Gun'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Bumblebee'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'VW Beetle'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Autobot'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Soundwave'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Walkman'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>那么，问题来了，如果想得到一个包含所有变形（form）的列表该怎么做呢？<code class=\"language-text\">Array.map()</code>让一切变得简单。它的基本使用语法是这样的：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>当然，还有种更复杂点的语法场景，只不过不常用到：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><code class=\"language-text\">callback</code>会遍历数组的每个元素，在其中返回的每一个数值将会组成新数组。<code class=\"language-text\">callback</code>有多种书写方式：<br>\n命名函数：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getForm</span><span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> transformer<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> robotsInDisguise <span class=\"token operator\">=</span> transformers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* robosInDisguise === ['Freightliner Truck', 'Gun', 'VW Beetle', 'Walkman'] */</span></code></pre>\n      </div>\n<p>匿名函数：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">robotsInDisguise <span class=\"token operator\">=</span> transformers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> transformer<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>箭头函数：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">robotsInDisguise <span class=\"token operator\">=</span> transformers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>transformer <span class=\"token operator\">=></span> transformer<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>ES2015的箭头函数和<code class=\"language-text\">Array.map()</code>搭配使用简直不能更爽了！</p>\n<h1 id=\"arrayfilter\"><a href=\"#arrayfilter\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.filter()</h1>\n<p>语法：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><code class=\"language-text\">callback</code>将数组元素当参数传入，并返回一个布尔值。当返回值为真时，该元素被加入新数组中，反之则被过滤掉。<br>\n现在我们把这些变形金刚过滤出<strong>汽车人</strong>(Autobots)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isAutobot</span><span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> transformer<span class=\"token punctuation\">.</span>team <span class=\"token operator\">===</span> ‘Autobot’<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> autobots <span class=\"token operator\">=</span> transformers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isAutobot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n\nautobots ==  [\n\n  {\n\n    name: 'Optimus Prime',\n\n    form: 'Freightliner Truck',\n\n    team: 'Autobot'\n\n  },\n\n  {\n\n    name: 'Bumblebee',\n\n    form: 'VW Beetle',\n\n    team: 'Autobot'\n\n  }\n\n]\n\n*/</span></code></pre>\n      </div>\n<h1 id=\"arrayreduce\"><a href=\"#arrayreduce\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.reduce()</h1>\n<p><code class=\"language-text\">Array.reduce()</code>是通过遍历每个数组元素对其做运算，因此，也是三个API之间最富有技巧的，其使用语法也略显复杂：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>谨记一条：我们是将数组元素通过遍历减少到一个值。比如现在有一组<strong>可组合变形金刚</strong>（译者注：我也不知道什么鬼，该怎么翻译，原词：Construction Transformers），它们能够组合成更大的变形金刚，我们可以通过代码来做出这样的组合：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> constructicons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Scrapper'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Freightliner Truck'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'rightLeg'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hook'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Mobile Crane'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'upperTorso'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Bonecrusher'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Bulldozer'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'leftArm'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Scavenger'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Excavator'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'rightArm'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Mixmaster'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Concrete Mixer'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'leftLeg'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Long Haul'</span><span class=\"token punctuation\">,</span>\n\n    form<span class=\"token punctuation\">:</span> <span class=\"token string\">'Dump Truck'</span><span class=\"token punctuation\">,</span>\n\n    team<span class=\"token punctuation\">:</span> <span class=\"token string\">'Decepticon'</span><span class=\"token punctuation\">,</span>\n\n    bodyPart<span class=\"token punctuation\">:</span> <span class=\"token string\">'lowerTorso'</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Reduce的<code class=\"language-text\">callback</code>需要至少两个参数。第一个是从上次遍历中返回的一个值，第二个是当前数组遍历到的一个值，返回值又将当做第一个参数被传入到下一次遍历。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">assemble</span><span class=\"token punctuation\">(</span>combiner<span class=\"token punctuation\">,</span> transformer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">//每次遍历都会将当前的变形金刚（transformer）的名字加入到组合器（combiner）的form中去。</span>\n\n  combiner<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span>transformer<span class=\"token punctuation\">.</span>bodyPart<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> transformer<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> combiner<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这样，我们可以在调用reduce的时候，将<code class=\"language-text\">assemble</code>当做第一个参数传入，第二个参数是用来初次调用时的初始数据。接下来的例子便是我们提供一个仅仅有名字（name）和派别（team）的变形金刚，通过reduce中的<code class=\"language-text\">assemble</code>我们来组合成一个强大的变形金刚吧！</p>\n<p><img src=\"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/transform.gif\" alt=\"transforming\"></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> devastator <span class=\"token operator\">=</span> constructicons<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>assemble<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\n  name<span class=\"token punctuation\">:</span> ‘Devastator’<span class=\"token punctuation\">,</span>\n\n  team<span class=\"token punctuation\">:</span> ‘Decepticon’<span class=\"token punctuation\">,</span>\n\n  form<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\ndevastator == {\n\n  name: ‘Devastator’,\n\n  team: ‘Decepticon’,\n\n  form: {\n\n    leftArm: \"Bonecrusher\"\n\n    leftLeg: \"Mixmaster\"\n\n    lowerTorso: \"Long Haul\"\n\n    rightArm: \"Scavenger\"\n\n    rightLeg: \"Scrapper\"\n\n    upperTorso: \"Hook\"\n\n  }\n\n}\n\n*/</span></code></pre>\n      </div>\n<p>这些三个基本API一旦组合起来使用，也是很强大的。在此只是根据自己的使用经验抛砖引玉，想进一步了解的同学可以移步万能的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">MDN有关Array API的文档</a>。</p>","frontmatter":{"title":"Javascript Array中的filter、map和reduce","date":"2016-12-06T09:31:37.000Z","category":"它山之石","tags":["译文","技术","javascript","array"],"cover":"https://zerosoul.github.io/2016/12/06/array-filter-map-reduce-in-js/array-1.png"},"tableOfContents":"<ul>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D\">写在前面的话</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#%E8%AF%91%E6%96%87\">译文</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#map\">Map</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#filter\">Filter</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#reduce\">Reduce</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#arraymap\">Array.map()</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#arrayfilter\">Array.filter()</a></li>\n<li><a href=\"/posts/array-filter-map-reduce-in-js/#arrayreduce\">Array.reduce()</a></li>\n</ul>","excerpt":"写在前面的话 前几天 写了篇文章 科普了下Javascript中 的妙用，后来无意间发现了 一篇好文章 ，一次性科普了三个API： 、 和 ，生动形象，尤其是配图，显然是用了心思。下面是译文： 译文 最近，一直在为一个客户做一个视觉化数据的项目，从服务端API…"}}}