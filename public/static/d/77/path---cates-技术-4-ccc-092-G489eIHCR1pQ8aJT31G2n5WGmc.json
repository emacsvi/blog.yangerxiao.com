{"pageContext":{"group":[{"node":{"fields":{"slug":"/posts/svn-cleanup-error"},"html":"<h1 id=\"问题\"><a href=\"#%E9%97%AE%E9%A2%98\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题</h1>\n<p>svn执行clean up后出现提示:  </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">svn cleanup failed\n\nprevious operation has not finished<span class=\"token punctuation\">;</span> run cleanup <span class=\"token keyword\">if</span> it was interrupted</code></pre>\n      </div>\n<h1 id=\"分析\"><a href=\"#%E5%88%86%E6%9E%90\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分析</h1>\n<p>可能是因为上次<code class=\"language-text\">cleanup</code>中断后，进入死循环了。</p>\n<h1 id=\"解决\"><a href=\"#%E8%A7%A3%E5%86%B3\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决</h1>\n<ol>\n<li>\n<p>下载<a href=\"http://pan.baidu.com/s/1i3ie1HN\">sqlite3.exe</a></p>\n</li>\n<li>\n<p>找到项目的<strong>.svn</strong>文件，查看是否存在<strong>wc.db</strong></p>\n</li>\n<li>\n<p>将<strong>sqlite3.exe</strong>放到<strong>.svn</strong>的同级目录</p>\n</li>\n<li>\n<p>启动<strong>cmd</strong>，执行<code class=\"language-text\">sqlite3 .svn/wc.db &quot;select * from work_queue&quot;</code></p>\n</li>\n<li>\n<p>不出意外的话，会看到很多记录，下一步执行<code class=\"language-text\">delete from work_queue</code></p>\n</li>\n<li>\n<p>现在再到项目里面，执行<code class=\"language-text\">cleanup</code>，没问题了，图标状态也已经恢复了，完美~~~</p>\n</li>\n</ol>\n<p><img src=\"perfect.gif\" alt=\"完美\"></p>","frontmatter":{"title":"SVN clean失败解决方法","date":"2014-09-24T09:31:37.000Z","category":"技术","tags":["svn","备忘"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/svn-cleanup-error/#%E9%97%AE%E9%A2%98\">问题</a></li>\n<li><a href=\"/posts/svn-cleanup-error/#%E5%88%86%E6%9E%90\">分析</a></li>\n<li><a href=\"/posts/svn-cleanup-error/#%E8%A7%A3%E5%86%B3\">解决</a></li>\n</ul>","excerpt":"问题 svn执行clean up后出现提示:   分析 可能是因为上次 中断后，进入死循环了。 解决 下载 sqlite3.exe 找到项目的 .svn 文件，查看是否存在 wc.db 将 sqlite3.exe 放到 .svn 的同级目录 启动 cmd…"}},{"node":{"fields":{"slug":"/posts/async-and-defer-in-html-5-script-tag"},"html":"<p>早就知道HTML5 script标签多了个<code class=\"language-text\">async</code>特性，但没注意到<code class=\"language-text\">async</code>和<code class=\"language-text\">defer</code>的差别。通过<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\">查文档</a>，终于懂了。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>页面的绘制会停下，等<code class=\"language-text\">test.js</code>下载完并执行完，才会继续绘制。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defer</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>页面的绘制不会停下，<code class=\"language-text\">test.js</code>在背景下载，待<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded\">DOMContentLoaded</a>再执行<code class=\"language-text\">test.js</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>页面的绘制不会停下，<code class=\"language-text\">test.js</code>在背景下载，待其下载完毕，页面绘制会停下，执行<code class=\"language-text\">test.js</code>，执行完毕，页面继续绘制。</p>\n<p>另，这儿有张<a href=\"http://peter.sh/2010/09/last-week-asynchronous-script-execution-and-gpu-acceleration-by-default/\">时序图</a>可参考。</p>","frontmatter":{"title":"script标签中async和defer的差别","date":"2014-08-23T09:31:37.000Z","category":"技术","tags":["前端","翻墙","备忘","html5"],"cover":null},"tableOfContents":"","excerpt":"早就知道HTML5 script标签多了个 特性，但没注意到 和 的差别。通过 查文档 ，终于懂了。 页面的绘制会停下，等 下载完并执行完，才会继续绘制。 页面的绘制不会停下， 在背景下载，待 DOMContentLoaded…"}},{"node":{"fields":{"slug":"/posts/amd-commonjs-and-umd"},"html":"<h1 id=\"概述\"><a href=\"#%E6%A6%82%E8%BF%B0\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概述</h1>\n<p>这些年，Javascript组件越来越丰富，作为前端开发者，只需要阅读下使用文档，便可引入到自己的项目中，相当便利。但是随着引入的组件越来越多，事情往往就不那么美好了，其中最突出的问题便是全局变量的纷杂容易导致冲突。</p>\n<p>W3C提出的模块规范，AMD和CommonJS应运而生：下面就来探索下这两个规范。</p>\n<h1 id=\"amd：asynchronous-module-definition\"><a href=\"#amd%EF%BC%9Aasynchronous-module-definition\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AMD：Asynchronous Module Definition</h1>\n<p>AMD获得前端开发者的青睐，大概很大程度上是由于<a href=\"http://requirejs.org/\">RequireJS</a>的流行。</p>\n<p>举个模块的例子：依赖于<code class=\"language-text\">jQuery</code>的<code class=\"language-text\">bar</code>模块  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//文件名: bar.js</span>\n\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//暴露出的函数</span>\n\n    <span class=\"token keyword\">return</span> myFunc<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>再来个稍微复杂的：多个依赖，并且有多个输出  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//文件名: bar.js</span>\n\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'underscore'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//私有函数</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n\n<span class=\"token comment\">// 暴露出的成员</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\n        b<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span>\n\n        c<span class=\"token punctuation\">:</span> c\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><code class=\"language-text\">define</code>的第一个参数是一个依赖列表，第二个是依赖加载完毕后的回调函数。关于依赖是如何加载的，RequireJS会帮我们搞定。需要注意的是依赖变量的顺序需要一一对应： jquery->$, underscore->_ 。</p>\n<p>当然，我们可以映射任何变量名，比如把<code class=\"language-text\">$</code>改成<code class=\"language-text\">$$</code>，没问题，只要记得这样用<code class=\"language-text\">$$(“.selector”)</code>就行。</p>\n<p>最后，还需谨记不要在<code class=\"language-text\">define</code>之外使用<code class=\"language-text\">$</code>、<code class=\"language-text\">_</code>变量，别问我为什么o(╯□╰)o。</p>\n<h1 id=\"commonjs\"><a href=\"#commonjs\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS</h1>\n<p>如果你了解Nodejs，应该对CommonJS不陌生。不过真正在前端开发中流行开来，<a href=\"http://browserify.org/\">Browserify</a>功不可没。</p>\n<p>那么，上面的AMD模块换做CommonJS，该怎么写呢？  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//文件名: bar.js</span>\n\n<span class=\"token comment\">//获取依赖</span>\n\n<span class=\"token keyword\">var</span> $ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//暴露函数</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> myFunc<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>复杂点的：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//文件名: bar.js</span>\n\n<span class=\"token comment\">//获取依赖</span>\n\n<span class=\"token keyword\">var</span> $ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'underscore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//私有函数</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n\n<span class=\"token comment\">//暴露成员</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    b<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span>\n\n    c<span class=\"token punctuation\">:</span> c\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h1 id=\"umd-universal-module-definition\"><a href=\"#umd-universal-module-definition\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UMD: Universal Module Definition</h1>\n<p>CommonJS和AMD适用场景不太一样，一般CommonJS是同步加载，AMD是异步加载，但是它们流行程度是一样的。有没有一种通用的模块规范来铲平两者的差异？程序员的智慧是无穷的，UMD应运而生。</p>\n<p>不得不预警，虽然兼容AMD和CommonJS，而且也支持浏览器宿主环境，但代码看起来确实挺丑陋的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// AMD</span>\n\n        <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// Node, CommonJS-like</span>\n\n        module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// 浏览器(root 就是 window)</span>\n\n        root<span class=\"token punctuation\">.</span>returnExports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>jQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//暴露的函数</span>\n\n    <span class=\"token keyword\">return</span> myFunc<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>复杂点的： </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// AMD</span>\n        <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'underscore'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Node, CommonJS-like</span>\n        module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'underscore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 浏览器(root 就是 window)</span>\n        root<span class=\"token punctuation\">.</span>returnExports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>jQuery<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//私有函数</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n    <span class=\"token comment\">//暴露的成员</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        b<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">:</span> c\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>UMD虽然丑，但更实用啊，所以很多开源类库或组件都用这种方案。</p>","frontmatter":{"title":"探索AMD、CommonJS和UMD","date":"2014-08-22T09:31:37.000Z","category":"技术","tags":["amd","javascript"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/amd-commonjs-and-umd/#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"/posts/amd-commonjs-and-umd/#amd%EF%BC%9Aasynchronous-module-definition\">AMD：Asynchronous Module Definition</a></li>\n<li><a href=\"/posts/amd-commonjs-and-umd/#commonjs\">CommonJS</a></li>\n<li><a href=\"/posts/amd-commonjs-and-umd/#umd-universal-module-definition\">UMD: Universal Module Definition</a></li>\n</ul>","excerpt":"概述 这些年，Javascript组件越来越丰富，作为前端开发者，只需要阅读下使用文档，便可引入到自己的项目中，相当便利。但是随着引入的组件越来越多，事情往往就不那么美好了，其中最突出的问题便是全局变量的纷杂容易导致冲突。 W3C提出的模块规范，AMD和CommonJS…"}},{"node":{"fields":{"slug":"/posts/svn-rollback"},"html":"<p>SVN回滚，即取消对代码的修改，分为两种情况：</p>\n<h1 id=\"改动没有被提交（commit）改动没有被提交（commit）\"><a href=\"#%E6%94%B9%E5%8A%A8%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89%E6%94%B9%E5%8A%A8%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E6%94%B9%E5%8A%A8%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\" title=\"改动没有被提交（commit）\"></a>改动没有被提交（commit）</h1>\n<p>这种情况下，<code class=\"language-text\">svn revert</code>就能取消之前的修改。<br>\n用法如下：  </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">svn revert <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> sth</code></pre>\n      </div>\n<p>其中<code class=\"language-text\">sth</code>可以是目录或文件的相对路径也可以是绝对路径。</p>\n<ul>\n<li>当<code class=\"language-text\">sth</code>为单个文件时，直接<code class=\"language-text\">svn revert sth</code>就行了；</li>\n<li>当<code class=\"language-text\">sth</code>为目录时，需要加上参数<code class=\"language-text\">-R</code>(Recursive,递归)，否则只会将<code class=\"language-text\">sth</code>这个目录的改动。</li>\n</ul>\n<p>也可以使用<code class=\"language-text\">svn update</code>命令来取消对之前的修改，但不建议使用。因为<code class=\"language-text\">svn update</code>会去连接仓库服务器，比较耗时。<br>\n<strong>注意：<code class=\"language-text\">svn revert</code>有风险，因为它的目的是放弃未提交的修改。一旦你选择了恢复，Subversion没有方法找回未提交的修改。</strong></p>\n<h1 id=\"改动已经被提交（commit）改动已经被提交（commit）\"><a href=\"#%E6%94%B9%E5%8A%A8%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89%E6%94%B9%E5%8A%A8%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E6%94%B9%E5%8A%A8%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\" title=\"改动已经被提交（commit）\"></a>改动已经被提交（commit）</h1>\n<p>这种情况下，用<code class=\"language-text\">svn merge</code>命令来进行回滚。回滚的操作过程如下：</p>\n<ol>\n<li>保证拿到的是最新代码：<code class=\"language-text\">svn update</code>。假设最新版本号是28。</li>\n<li>然后找出要回滚的确切版本号：<code class=\"language-text\">svn log [sth]</code>。假设根据<code class=\"language-text\">svn log</code>日志查出要回滚的版本号是25，如果想要更详细的了解情况，可以使用<code class=\"language-text\">svn diff -r 28:25 [sth]</code></li>\n<li>回滚到版本号25：<code class=\"language-text\">svn merge -r 28:25 sth</code>。为了保险起见，再次确认回滚的结果：<code class=\"language-text\">svn diff [sth]</code>。正确无误的话，提交。</li>\n<li>提交回滚：<code class=\"language-text\">svn commit -m &quot;revert revision from r28 to r25,because of ...&quot;</code>提交后版本变成了29。</li>\n</ol>\n<p>以上操作总结下：</p>\n<ol>\n<li><code class=\"language-text\">svn update</code>，<code class=\"language-text\">svn log</code>，找到最新版本</li>\n<li>找到自己想要回滚的版本号</li>\n<li>用<code class=\"language-text\">svn merge</code>来回滚：<code class=\"language-text\">svn merge -r latest:older sth</code></li>\n</ol>\n<h1 id=\"温馨提示温馨提示\"><a href=\"#%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA\" title=\"温馨提示\"></a>温馨提示</h1>\n<p>回滚虽好，可不要贪多哦~~~^_^</p>","frontmatter":{"title":"SVN回滚操作","date":"2014-08-01T09:31:37.000Z","category":"技术","tags":["svn","备忘"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/svn-rollback/#%E6%94%B9%E5%8A%A8%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89%E6%94%B9%E5%8A%A8%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\">改动没有被提交（commit）改动没有被提交（commit）</a></li>\n<li><a href=\"/posts/svn-rollback/#%E6%94%B9%E5%8A%A8%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89%E6%94%B9%E5%8A%A8%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\">改动已经被提交（commit）改动已经被提交（commit）</a></li>\n<li><a href=\"/posts/svn-rollback/#%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA\">温馨提示温馨提示</a></li>\n</ul>","excerpt":"SVN回滚，即取消对代码的修改，分为两种情况： 改动没有被提交（commit） 这种情况下， 就能取消之前的修改。 用法如下：   其中 可以是目录或文件的相对路径也可以是绝对路径。 当 为单个文件时，直接 就行了； 当 为目录时，需要加上参数 (Recursive…"}},{"node":{"fields":{"slug":"/posts/convert-query-params-to-json"},"html":"<h1 id=\"引子\"><a href=\"#%E5%BC%95%E5%AD%90\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引子</h1>\n<p>工作中经常需要获取浏览器地址栏URL的参数，常用的套路便是将这些参数转化为键值对，方法有许多，我喜欢简单明了，所以尝试自己总结下。</p>\n<h1 id=\"过程\"><a href=\"#%E8%BF%87%E7%A8%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>过程</h1>\n<p>首先，获取参数字符串</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>这里用到了<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.location\">location</a>和<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\">slice</a></p>\n<p>然后，将参数转为数组，然后在数组里做文章。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> pairs<span class=\"token operator\">=</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>接下来，使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">forEach</a>遍历<code class=\"language-text\">pairs</code>，并在每次遍历时使用<code class=\"language-text\">=</code>分隔符，来提取键值对。当然，一些可能遇到的场景也需要考虑下，比如，<strong>值为空</strong>和<strong>使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent</a>解码一下</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> pairs <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\npairs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    pair <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    result<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>最后一步，相当简单，使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON.stringify</a>解析一下，然后用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\">JSON.parse</a>再转化回来。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h1 id=\"最终代码\"><a href=\"#%E6%9C%80%E7%BB%88%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最终代码</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">QueryStringToJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>            \n\n    <span class=\"token keyword\">var</span> pairs <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    pairs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        pair <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        result<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> query_string <span class=\"token operator\">=</span> <span class=\"token function\">QueryStringToJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","frontmatter":{"title":"查询字符串参数转化为JSON对象","date":"2014-07-29T09:31:37.000Z","category":"技术","tags":["hexo","github","nodejs","前端"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/convert-query-params-to-json/#%E5%BC%95%E5%AD%90\">引子</a></li>\n<li><a href=\"/posts/convert-query-params-to-json/#%E8%BF%87%E7%A8%8B\">过程</a></li>\n<li><a href=\"/posts/convert-query-params-to-json/#%E6%9C%80%E7%BB%88%E4%BB%A3%E7%A0%81\">最终代码</a></li>\n</ul>","excerpt":"引子 工作中经常需要获取浏览器地址栏URL的参数，常用的套路便是将这些参数转化为键值对，方法有许多，我喜欢简单明了，所以尝试自己总结下。 过程 首先，获取参数字符串 这里用到了 location 和 slice 然后，将参数转为数组，然后在数组里做文章。 接下来，使用 forEach…"}},{"node":{"fields":{"slug":"/posts/java-script-event-delegation"},"html":"<h1 id=\"引子\"><a href=\"#%E5%BC%95%E5%AD%90\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引子</h1>\n<p>事件代理也算是Javascript中的热点话题，它可以给节点的某个父节点增加监听行为，从而避免了在每个节点都做监听。父节点分析冒泡过来的事件，并找到是来自于哪个节点。概念很简单，但是到底是怎么个过程，还是有些迷糊。下面，通过例子来探索下。</p>\n<h1 id=\"实例探索\"><a href=\"#%E5%AE%9E%E4%BE%8B%E6%8E%A2%E7%B4%A2\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实例探索</h1>\n<p>比如说，有一个父元素:<code class=\"language-text\">ul</code>，下面有几个子元素：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>ul id<span class=\"token operator\">=</span><span class=\"token string\">\"parent-list\"</span><span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>li id<span class=\"token operator\">=</span><span class=\"token string\">\"post-1\"</span><span class=\"token operator\">></span>Item <span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>li id<span class=\"token operator\">=</span><span class=\"token string\">\"post-2\"</span><span class=\"token operator\">></span>Item <span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>li id<span class=\"token operator\">=</span><span class=\"token string\">\"post-3\"</span><span class=\"token operator\">></span>Item <span class=\"token number\">3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>li id<span class=\"token operator\">=</span><span class=\"token string\">\"post-4\"</span><span class=\"token operator\">></span>Item <span class=\"token number\">4</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>li id<span class=\"token operator\">=</span><span class=\"token string\">\"post-5\"</span><span class=\"token operator\">></span>Item <span class=\"token number\">5</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>li id<span class=\"token operator\">=</span><span class=\"token string\">\"post-6\"</span><span class=\"token operator\">></span>Item <span class=\"token number\">6</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></code></pre>\n      </div>\n<p>我想给子元素加上单击事件，当然可以单独为每个<code class=\"language-text\">li</code>设置事件监听，但是，如果<code class=\"language-text\">li</code>的改动很频繁，比如新增或删除，该怎么办？如果随之改动各自的监听事件，那将是一场噩梦。比较好的一种解决方式便是给<code class=\"language-text\">ul</code>设置监听事件，但是问题又来了，如何知道是哪个元素被点击的？</p>\n<p>其实也不难，当事件冒泡到<code class=\"language-text\">ul</code>，可以通过<code class=\"language-text\">event</code>对象下的<code class=\"language-text\">target</code>来获取实际节点的引用。就像下面代码这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parent-list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// e.target是被点击的元素!</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">==</span> <span class=\"token string\">\"LI\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"List item \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"post-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" was clicked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>事件触发时，检查元素，如果符合条件，那么就是我们想找的元素<code class=\"language-text\">li</code>，如果不是，那么直接忽略。这个例子比较简单：<code class=\"language-text\">ul</code>和<code class=\"language-text\">li</code>有直接的比较关系。下面，我们来点有难度的：比如说有个<code class=\"language-text\">div</code>元素下面有许多子元素，但我们关心的只有一个<code class=\"language-text\">a</code>标签，它的特征是<code class=\"language-text\">class=&quot;classA&quot;</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myDiv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.classA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Anchor element clicked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>注：通过<a href=\"https://davidwalsh.name/element-matches-selector\">Element.matches API</a>，我们能够过滤出想要的元素。</p>\n<h1 id=\"最后说两句\"><a href=\"#%E6%9C%80%E5%90%8E%E8%AF%B4%E4%B8%A4%E5%8F%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最后说两句</h1>\n<p>当然，在大多数业务场景下，我们常用的是类库来写JS代码，比如：<a href=\"http://jquery.com/\">jQuery</a>。但是基本上每个类库都有事件代理自己的实现，甚至做了许多高级扩展，使用起来非常方便，比如：<a href=\"http://api.jquery.com/on/\">jQuery的<code class=\"language-text\">on</code></a>。</p>","frontmatter":{"title":"探索 Javascript Event Delegation","date":"2014-05-12T09:31:37.000Z","category":"技术","tags":["前端","javascript"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/java-script-event-delegation/#%E5%BC%95%E5%AD%90\">引子</a></li>\n<li><a href=\"/posts/java-script-event-delegation/#%E5%AE%9E%E4%BE%8B%E6%8E%A2%E7%B4%A2\">实例探索</a></li>\n<li><a href=\"/posts/java-script-event-delegation/#%E6%9C%80%E5%90%8E%E8%AF%B4%E4%B8%A4%E5%8F%A5\">最后说两句</a></li>\n</ul>","excerpt":"引子 事件代理也算是Javascript…"}},{"node":{"fields":{"slug":"/posts/explore-html-meta"},"html":"<h1 id=\"概述\"><a href=\"#%E6%A6%82%E8%BF%B0\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概述</h1>\n<p>元数据(metadata)是指<strong>数据的数据</strong>，通常是通过HTML中的<code class=\"language-text\">&lt;meta&gt;</code>标签来表示的。它的作用就是用来描述页面的信息，而这些信息通常情况下不能通过其它标签来呈现。除此之外，<code class=\"language-text\">&lt;meta&gt;</code>也可以用来模拟HTTP响应头（像跳转另一个页面），还有像<code class=\"language-text\">http-equiv</code>和<code class=\"language-text\">charset</code>这样的特性，具体细节在<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\">MDN</a>已经描述的很清楚了。</p>\n<h1 id=\"code-classlanguage-textltmetagtcode很重要\"><a href=\"#code-classlanguage-textltmetagtcode%E5%BE%88%E9%87%8D%E8%A6%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">&lt;meta&gt;</code>很重要</h1>\n<p>在过去，<code class=\"language-text\">&lt;meta&gt;</code>为搜索引擎所用，根据其提供的<strong>标题</strong>、<strong>描述</strong>和<strong>关键字</strong>来建立网页索引。如果人人都遵守规则地使用它，将带来巨大的好处：信息检索准确。然而，后来一些网站开始滥用<code class=\"language-text\">&lt;meta&gt;</code>，向里面添加了许多流行词，以期望能从搜索引擎带来更多的流量。魔高一尺，道高一丈，Google在2009年已经宣布不再使用<strong>描述</strong>和<strong>关键字</strong>来建立索引。</p>\n<p>虽然<strong>描述</strong>对搜索引擎的排行没有影响，但它还是会出现在搜索结果中。这意味着用户在点进去之前，会先读一读这个网页的描述，从这个角度来看，我们还是得写好描述，不是给机器人看到，是给用户看。<br>\n<img src=\"https://zerosoul.github.io/2014/03/18/explore-html-meta/desc.png\" alt=\"description\"></p>\n<h1 id=\"code-classlanguage-textltmetagtcode的多种用途\"><a href=\"#code-classlanguage-textltmetagtcode%E7%9A%84%E5%A4%9A%E7%A7%8D%E7%94%A8%E9%80%94\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">&lt;meta&gt;</code>的多种用途</h1>\n<p>根据<code class=\"language-text\">&lt;meta&gt;</code>不同的<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#standard-metadata-names\"><code class=\"language-text\">name</code></a>，会有不同作用的<code class=\"language-text\">&lt;meta&gt;</code>。</p>\n<p>比如：  </p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>页面的描述<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>杨二<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 声明页面的作者 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 声明页面的编码 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>refresh<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>5;url=https://zerosoul.github.io/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 5秒后页面跳转到https://zerosoul.github.io/ --></span></code></pre>\n      </div>\n<h1 id=\"一些过时的用法\"><a href=\"#%E4%B8%80%E4%BA%9B%E8%BF%87%E6%97%B6%E7%9A%84%E7%94%A8%E6%B3%95\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一些过时的用法</h1>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>copyright<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>SitePoint<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n      </div>\n<h1 id=\"用于社交\"><a href=\"#%E7%94%A8%E4%BA%8E%E7%A4%BE%E4%BA%A4\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用于社交</h1>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- facebook --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>og:title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>The best site<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>og:image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>link\\_to\\_image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>og:description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>description goes here<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- twitter --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>twitter:title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>The best site<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>twitter:image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>link\\_to\\_image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>twitter:description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>description goes here<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<h1 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h1>\n<p><code class=\"language-text\">&lt;meta&gt;</code>并不会解决所有的SEO问题，但它确实在这个领域里扮演重要角色。</p>","frontmatter":{"title":"探索HTML META","date":"2014-03-18T09:31:37.000Z","category":"技术","tags":["前端","html"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/explore-html-meta/#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"/posts/explore-html-meta/#code-classlanguage-textltmetagtcode%E5%BE%88%E9%87%8D%E8%A6%81\">&#x3C;code class=\"language-text\">&#x26;lt;meta&#x26;gt;&#x3C;/code>很重要</a></li>\n<li><a href=\"/posts/explore-html-meta/#code-classlanguage-textltmetagtcode%E7%9A%84%E5%A4%9A%E7%A7%8D%E7%94%A8%E9%80%94\">&#x3C;code class=\"language-text\">&#x26;lt;meta&#x26;gt;&#x3C;/code>的多种用途</a></li>\n<li><a href=\"/posts/explore-html-meta/#%E4%B8%80%E4%BA%9B%E8%BF%87%E6%97%B6%E7%9A%84%E7%94%A8%E6%B3%95\">一些过时的用法</a></li>\n<li><a href=\"/posts/explore-html-meta/#%E7%94%A8%E4%BA%8E%E7%A4%BE%E4%BA%A4\">用于社交</a></li>\n<li><a href=\"/posts/explore-html-meta/#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>","excerpt":"概述 元数据(metadata)是指 数据的数据 ，通常是通过HTML中的 标签来表示的。它的作用就是用来描述页面的信息，而这些信息通常情况下不能通过其它标签来呈现。除此之外， 也可以用来模拟HTTP响应头（像跳转另一个页面），还有像 和 这样的特性，具体细节在 MDN…"}},{"node":{"fields":{"slug":"/posts/12-goals-for-developer"},"html":"<h1 id=\"概述\"><a href=\"#%E6%A6%82%E8%BF%B0\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概述</h1>\n<p>对程序员们来说挑战自我非常重要，要么不断创新，要么技术停滞不前。新年伊始，我整理了12个月的目标，每个目标都是对技术或个人能力的挑战，而且可以年复一年循环使用。</p>\n<ol>\n<li>变得有耐心</li>\n<li>保持健康</li>\n<li>拥抱变化带来的不适应</li>\n<li>学习一门新的编程语言</li>\n<li>自动化</li>\n<li>学习更多数学知识</li>\n<li>关注安全</li>\n<li>备份你的数据</li>\n<li>学习更多理论知识</li>\n<li>接触艺术和人文</li>\n<li>向新的软件学习</li>\n<li>完成一个自己的项目</li>\n</ol>\n<p>接下来对这些建议逐个介绍。</p>\n<h1 id=\"变得有耐心\"><a href=\"#%E5%8F%98%E5%BE%97%E6%9C%89%E8%80%90%E5%BF%83\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>变得有耐心</h1>\n<p>程序员们会担心锻炼耐心付出的努力得不到应有的回报。其实，培养耐心只要付出很小的投入就能够得到相对而言很大的收获。下面是开始锻炼耐心可以尝试的一个列表，只要全身心投入其中任意一项，都可以在一个月左右脱离门外汉（成为有经验的新手）的阶段：</p>\n<p>烹饪、徒步、滑雪、天文、慢跑、木工、武术、舞蹈</p>\n<h1 id=\"保持健康\"><a href=\"#%E4%BF%9D%E6%8C%81%E5%81%A5%E5%BA%B7\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>保持健康</h1>\n<p>程序员通常久坐少动，因此在日常工作中会面临健康问题，但通常都被我们忽略了。一年中花整整一个月来调整你的生活习惯、饮食和生活环境，这会促使你养成持久、健康的生活习惯。每年去一趟诊所检查血压、胆固醇和血糖，看看这些指标最近有什么变化。如果你的手腕开始疼痛或者已经疼了很久，马上停掉手上的工作开始与“鼠标手”（重复性劳损）作战。注意你的坐姿，尤其是肩膀和脖子。我使用了矫姿器来帮助治疗。</p>\n<p>跟踪你的体重、摄入以及燃烧的卡路里。如果有必要，可以改变生活方式以养成健康的饮食习惯和减肥。</p>\n<p>参考文章：<a href=\"http://blog.jobbole.com/485/\">《程序员的常见健康问题》</a></p>\n<h1 id=\"拥抱变化带来的不适\"><a href=\"#%E6%8B%A5%E6%8A%B1%E5%8F%98%E5%8C%96%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%8D%E9%80%82\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>拥抱变化带来的不适</h1>\n<p>在我20刚出头的时候，通过观察身边年纪稍大一些的伙伴我发现有些人停滞不前而另一些则活力充沛，我试着寻找背后的原因。答案就是舒适感。舒适会让技术停滞不前。当找到一个能够为我所用的系统时，我们会一直使用它。但技术是不断进步的，而那些停留在舒适区的人永远不会意识到这些进步能够为他们带来好处。不破不立，要让自己适应不舒适的感觉。</p>\n<p>下面列出的事情一开始可能会让你感到不适应：</p>\n<ul>\n<li>使用德沃夏克键盘</li>\n<li>使用vim替代emacs，反之亦然</li>\n<li>不使用鼠标</li>\n<li>使用不同的窗口管理器</li>\n<li>喝清咖啡不加奶油和糖，或者喝清茶</li>\n<li>尝试一个月“流行且无聊的新事物”</li>\n<li>一个星期中有一天不开手机</li>\n<li>学习使用一种可以单手输入的设备</li>\n<li>尝试一个不同的操作系统</li>\n<li>一个星期中有一天不上网</li>\n<li>试着对饮食加以限制：尝试吃素，成为纯素食主义者，不吃乳制品，等等</li>\n<li>每天吃一种你不喜欢的食物</li>\n<li>将你习惯使用的胳膊用绷带绑起来</li>\n<li>学习用你不习惯的那只手写字</li>\n<li>开一个博客</li>\n<li>参加公共演讲</li>\n<li>一个月听一种你不喜欢的音乐</li>\n<li>去医院或退休家庭护理做志愿者</li>\n<li>一个星期有一天快生活</li>\n<li>去一个与自己文化或语言不同的国家旅行</li>\n<li>读一篇广受好评但却不是你喜欢题材的小说</li>\n<li>看一场广受好评但却不是你喜欢风格的电影或演出</li>\n<li>学会用变速杆（手动）开车</li>\n<li>反对你相信的一些事情</li>\n</ul>\n<p>在一个月的尝试之后，你可以决定是否继续采用新方式，或者找到新方式中好的经验与原有方式的结合点。例如，在我从使用了10年的emacs转向vim时，我会为插入模式设置emacs风格快捷键从而继续使用vim。</p>\n<p>参考：<a href=\"http://blog.jobbole.com/10250/\">《25个Vim教程资源》</a></p>\n<h1 id=\"学习一门新的编程语言\"><a href=\"#%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E6%96%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>学习一门新的编程语言</h1>\n<p>编程语言起起落落。如果只了解一门语言，程序员的解决问题能力以及职业前景都会因此受到限制。花上整整一个月时间吸收一门新语言或者一个新的编程范式，并用它写一个小程序。</p>\n<p>下面是一些可以学习但不是非常主流的编程语言：</p>\n<p>Racket、 Haskell、Scala、Erlang、Clojure、SML/NJOCaml、Squeak、Prolog、Datalog.</p>\n<p>如果你无所不知，那么你可以实现一门新的编程语言。</p>\n<h1 id=\"自动化\"><a href=\"#%E8%87%AA%E5%8A%A8%E5%8C%96\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自动化</h1>\n<p>程序员拥有最强大的待开发技能就是将虚拟和现实自动化的能力。如果你从来没有造过一个机器人，那么去做一个吧。至少学会使用<a href=\"http://www.amazon.com/gp/product/B001USHRYI/ref=as_li_ss_tl?ie=UTF8&#x26;tag=ucmbread-20&#x26;linkCode=as2&#x26;camp=1789&#x26;creative=390957&#x26;creativeASIN=B001USHRYI\">Lego Mindstorms</a>或者玩一玩<a href=\"http://www.arduino.cc/\">Arduino board</a>。</p>\n<p>检查一下你每天的任务，看看其中有哪些可以完全或者部分自动化。自动化在家庭生活里已经有了长足的进步，甚至可以像<a href=\"http://www.insteon.net/\">Insteon</a>那样对系统进行DIY。</p>\n<p>投资一个月的时间来进行自动化：</p>\n<ul>\n<li>为频繁进行的工作编写自动化shell脚本</li>\n<li>编写shell脚本帮助写作</li>\n<li>学会如何使用<a href=\"http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html\">cron</a>工具</li>\n<li>改造橱柜灯由感应控制</li>\n<li>尽可能地用无线替代有线</li>\n<li>停止手动同步：将信息存到云端</li>\n<li>通过你的服务器控制家里的空调</li>\n<li>安装数字内部通话系统，儿童监控系统</li>\n<li>让咖啡机自动打开</li>\n<li>为宠物安装自动给水槽</li>\n<li>为宠物安装自动感应门</li>\n</ul>\n<h1 id=\"学习更多数学知识\"><a href=\"#%E5%AD%A6%E4%B9%A0%E6%9B%B4%E5%A4%9A%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>学习更多数学知识</h1>\n<p>计算机科学本质上讲是数学的一个学科。好的数学家中间会产出优秀的程序员。不要让你的数学能力丧失殆尽。</p>\n<p>考虑每年花一个月时间复习列表中的一项：</p>\n<p>逻辑学、离散数学、微积分、概率论、统计学、抽象代数、数论、范畴论、偏序理论 （<a href=\"http://blog.jobbole.com/444/\">《数学是成就卓越开发人员的必备技能》</a>）</p>\n<h1 id=\"关注安全\"><a href=\"#%E5%85%B3%E6%B3%A8%E5%AE%89%E5%85%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>关注安全</h1>\n<p>很少有程序员具备好的安全习惯。如果你对自己的数字安全很在意，你就会对你写的代码安全性更加关心。确保在每个站点都使用了唯一的高安全系数密码。使用加密的密码管理器来管理你的密码，例如PasswordSafe或者KeePassX。如果你还没有对整个磁盘加密，留出时间完成它。（在Mac上可以轻松完成）</p>\n<p>每年都要研究过去12个月中前10位的安全漏洞。他们是如何发生的？在编程中需要怎么做能够避免在你的代码中出现这些漏洞？</p>\n<p>下面是另外一些你需要尝试的安全任务：</p>\n<ul>\n<li>在Apache中加入SSL验证</li>\n<li>使用RSA或AES实现密码系统</li>\n<li>试着破译你的无线网络密码</li>\n<li>用WireShark侦听你的网络通讯</li>\n<li>设置基于密钥的无密码ssh登录</li>\n<li>自己运行nmap；配置你的防火墙</li>\n<li>建立端口扫描</li>\n<li>为USB驱动器加密</li>\n<li>监控日志文件</li>\n<li>设置cron任务定期更新你的程序</li>\n</ul>\n<p><strong>注：nmap：linux下的网络扫描和嗅探工具包</strong></p>\n<h1 id=\"备份你的数据\"><a href=\"#%E5%A4%87%E4%BB%BD%E4%BD%A0%E7%9A%84%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>备份你的数据</h1>\n<p>每年花一些时间检查你的备份策略。花一个月时间将备份花费的时间减到最小。对重要文件使用异地远程仓库进行版本控制。</p>\n<h1 id=\"学习更多理论知识\"><a href=\"#%E5%AD%A6%E4%B9%A0%E6%9B%B4%E5%A4%9A%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>学习更多理论知识</h1>\n<p>计算机科学有着丰富的理论基础。 了解最新进展的同时还要加强对经典开发理论的掌握。</p>\n<p>每年在下列主题上花一个月时间：</p>\n<ul>\n<li>形式语言</li>\n<li>自动机与可计算性理论</li>\n<li>计算复杂性理论</li>\n<li>形式化方法</li>\n<li>语义学</li>\n<li>算法与数据结构</li>\n</ul>\n<p>名词解释：<br>\n形式语言：按一定规律构成的句子或符号串的有限或无限的集合。<br>\n自动机：是有线状态机（FSM）的数学模型。<br>\n可计算性理论：研究计算的可行性和函数算法的理论。又称算法理论。它是算法设计与分析的基础，也是计算机科学的理论基础。<br>\n计算复杂性理论：计算复杂性理论是理论计算机科学的分支学科，使用数学方法对计算中所需的各种资源的耗费作定量的分析，并研究各类问题之间在计算复杂程度上的相互关系和基本性质，是算法分析的理论基础。<br>\n形式化方法：在逻辑科学中是指分析、研究思维形式结构的方法。<br>\n语义学：研究自然语言中词语意义的学科。也可以指对逻辑形式系统中符号解释的研究。</p>\n<p>对于刚起步的程序员，可以先看一看下列文章：</p>\n<ul>\n<li>用Haskell编写CEK风格的解析器（或语义分析器）</li>\n<li>通过推导进行语法解析</li>\n<li>遗失的方法：如何对Okasaki的红黑树执行删除</li>\n<li>通过推导使用Scheme进行正则表达式模式匹配</li>\n<li>将正则表示转换成非确定性自动机（NFA）</li>\n</ul>\n<p>注：<br>\nCEK：CEK机器是由Matthias Felleisen和Dan Friedman开发的λ-演算的力学模型。<br>\nHaskell：一种纯函数式编程语言，以美国数学家Haskell Brooks Curry命名。</p>\n<h1 id=\"接触艺术和人文\"><a href=\"#%E6%8E%A5%E8%A7%A6%E8%89%BA%E6%9C%AF%E5%92%8C%E4%BA%BA%E6%96%87\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接触艺术和人文</h1>\n<p>工程师往往轻视艺术。他们没有意识到艺术和人文是基础升华的重要因素。史蒂夫·乔布斯乐于指出将技术与人文结合的重要性，事实也却是如此。</p>\n<p>艺术和设计原则同样适用于人和计算机之间的交互。不要忽视这些原则。艺术和人文的训练让直觉更加敏锐，而这方面的练习是难以用数字来计量。工程师需要知道如何衡量那些他们不能计量的事物，而不是只是统计他们可以计量的内容。</p>\n<p>每年至少有一个月学习下面列出的主题：工业设计、哲学、、摄影、绘画、素描、音乐及音乐理论、电影、文学、社会科学同样会对计算机科学家有很大帮助，尤其是经济学和哲学。</p>\n<h1 id=\"向新的软件学习\"><a href=\"#%E5%90%91%E6%96%B0%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>向新的软件学习</h1>\n<p>一个为自己的软件寻找灵感的好办法就是向新的或新型应用程序学习。例如，如果你从来没有尝试过3D建模软件，可以尝试Blender。抑或是，如果你从来没有接触过LaTeX，请真诚地试着去了解它。</p>\n<p>在学习过程中，请注意你喜欢什么和讨厌什么。真诚地问自己，这些观察到的内容是否在你的软件中存在。在工作中很难看到自己的缺点，但发现别人的不足却很容易。天下没有哪个父母认为自己的孩子长得难看。请学习看到自己作品的不足。</p>\n<h1 id=\"完成一个自己的项目\"><a href=\"#%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完成一个自己的项目</h1>\n<p>如果你整天为别人写代码，那么为自己写程序能让你记得当初为什么会成为程序员。每年为自己选择的项目分配一个月的时间，完成核心功能，将其开源发布。</p>\n<h1 id=\"文章来源声明\"><a href=\"#%E6%96%87%E7%AB%A0%E6%9D%A5%E6%BA%90%E5%A3%B0%E6%98%8E\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文章来源声明</h1>\n<p>转载自伯乐译文：<a href=\"http://blog.jobbole.com/11590/\">http://blog.jobbole.com/11590/</a></p>","frontmatter":{"title":"为程序员量身定制的12个目标","date":"2013-03-18T09:31:37.000Z","category":"技术","tags":["技术","成长","转载"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/12-goals-for-developer/#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E5%8F%98%E5%BE%97%E6%9C%89%E8%80%90%E5%BF%83\">变得有耐心</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E4%BF%9D%E6%8C%81%E5%81%A5%E5%BA%B7\">保持健康</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E6%8B%A5%E6%8A%B1%E5%8F%98%E5%8C%96%E5%B8%A6%E6%9D%A5%E7%9A%84%E4%B8%8D%E9%80%82\">拥抱变化带来的不适</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E6%96%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80\">学习一门新的编程语言</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E8%87%AA%E5%8A%A8%E5%8C%96\">自动化</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E5%AD%A6%E4%B9%A0%E6%9B%B4%E5%A4%9A%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86\">学习更多数学知识</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E5%85%B3%E6%B3%A8%E5%AE%89%E5%85%A8\">关注安全</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E5%A4%87%E4%BB%BD%E4%BD%A0%E7%9A%84%E6%95%B0%E6%8D%AE\">备份你的数据</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E5%AD%A6%E4%B9%A0%E6%9B%B4%E5%A4%9A%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86\">学习更多理论知识</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E6%8E%A5%E8%A7%A6%E8%89%BA%E6%9C%AF%E5%92%8C%E4%BA%BA%E6%96%87\">接触艺术和人文</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E5%90%91%E6%96%B0%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0\">向新的软件学习</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE\">完成一个自己的项目</a></li>\n<li><a href=\"/posts/12-goals-for-developer/#%E6%96%87%E7%AB%A0%E6%9D%A5%E6%BA%90%E5%A3%B0%E6%98%8E\">文章来源声明</a></li>\n</ul>","excerpt":"概述 对程序员们来说挑战自我非常重要，要么不断创新，要么技术停滞不前。新年伊始，我整理了1…"}}],"pathPrefix":"cates/技术","first":false,"last":true,"index":4,"pageCount":4,"additionalContext":{"total":38,"category":"技术"}}}