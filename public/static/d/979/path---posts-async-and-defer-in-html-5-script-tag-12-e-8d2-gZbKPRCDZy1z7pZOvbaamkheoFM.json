{"pageContext":{"slug":"/posts/async-and-defer-in-html-5-script-tag","html":"<p>早就知道HTML5 script标签多了个<code class=\"language-text\">async</code>特性，但没注意到<code class=\"language-text\">async</code>和<code class=\"language-text\">defer</code>的差别。通过<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\">查文档</a>，终于懂了。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>页面的绘制会停下，等<code class=\"language-text\">test.js</code>下载完并执行完，才会继续绘制。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defer</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>页面的绘制不会停下，<code class=\"language-text\">test.js</code>在背景下载，待<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded\">DOMContentLoaded</a>再执行<code class=\"language-text\">test.js</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>页面的绘制不会停下，<code class=\"language-text\">test.js</code>在背景下载，待其下载完毕，页面绘制会停下，执行<code class=\"language-text\">test.js</code>，执行完毕，页面继续绘制。</p>\n<p>另，这儿有张<a href=\"http://peter.sh/2010/09/last-week-asynchronous-script-execution-and-gpu-acceleration-by-default/\">时序图</a>可参考。</p>","frontmatter":{"title":"script标签中async和defer的差别","date":"2014-08-23T09:31:37.000Z","category":"技术","tags":["前端","翻墙","备忘","html5"],"cover":null},"excerpt":"早就知道HTML5 script标签多了个 特性，但没注意到 和 的差别。通过 查文档 ，终于懂了。 页面的绘制会停下，等 下载完并执行完，才会继续绘制。 页面的绘制不会停下， 在背景下载，待 DOMContentLoaded…","tableOfContents":"","prev":{"fields":{"slug":"/posts/svn-cleanup-error"},"html":"<h1 id=\"问题\"><a href=\"#%E9%97%AE%E9%A2%98\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题</h1>\n<p>svn执行clean up后出现提示:  </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">svn cleanup failed\n\nprevious operation has not finished<span class=\"token punctuation\">;</span> run cleanup <span class=\"token keyword\">if</span> it was interrupted</code></pre>\n      </div>\n<h1 id=\"分析\"><a href=\"#%E5%88%86%E6%9E%90\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分析</h1>\n<p>可能是因为上次<code class=\"language-text\">cleanup</code>中断后，进入死循环了。</p>\n<h1 id=\"解决\"><a href=\"#%E8%A7%A3%E5%86%B3\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解决</h1>\n<ol>\n<li>\n<p>下载<a href=\"http://pan.baidu.com/s/1i3ie1HN\">sqlite3.exe</a></p>\n</li>\n<li>\n<p>找到项目的<strong>.svn</strong>文件，查看是否存在<strong>wc.db</strong></p>\n</li>\n<li>\n<p>将<strong>sqlite3.exe</strong>放到<strong>.svn</strong>的同级目录</p>\n</li>\n<li>\n<p>启动<strong>cmd</strong>，执行<code class=\"language-text\">sqlite3 .svn/wc.db &quot;select * from work_queue&quot;</code></p>\n</li>\n<li>\n<p>不出意外的话，会看到很多记录，下一步执行<code class=\"language-text\">delete from work_queue</code></p>\n</li>\n<li>\n<p>现在再到项目里面，执行<code class=\"language-text\">cleanup</code>，没问题了，图标状态也已经恢复了，完美~~~</p>\n</li>\n</ol>\n<p><img src=\"perfect.gif\" alt=\"完美\"></p>","frontmatter":{"title":"SVN clean失败解决方法","date":"2014-09-24T09:31:37.000Z","category":"技术","tags":["svn","备忘"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/svn-cleanup-error/#%E9%97%AE%E9%A2%98\">问题</a></li>\n<li><a href=\"/posts/svn-cleanup-error/#%E5%88%86%E6%9E%90\">分析</a></li>\n<li><a href=\"/posts/svn-cleanup-error/#%E8%A7%A3%E5%86%B3\">解决</a></li>\n</ul>","excerpt":"问题 svn执行clean up后出现提示:   分析 可能是因为上次 中断后，进入死循环了。 解决 下载 sqlite3.exe 找到项目的 .svn 文件，查看是否存在 wc.db 将 sqlite3.exe 放到 .svn 的同级目录 启动 cmd…"},"next":{"fields":{"slug":"/posts/amd-commonjs-and-umd"},"html":"<h1 id=\"概述\"><a href=\"#%E6%A6%82%E8%BF%B0\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概述</h1>\n<p>这些年，Javascript组件越来越丰富，作为前端开发者，只需要阅读下使用文档，便可引入到自己的项目中，相当便利。但是随着引入的组件越来越多，事情往往就不那么美好了，其中最突出的问题便是全局变量的纷杂容易导致冲突。</p>\n<p>W3C提出的模块规范，AMD和CommonJS应运而生：下面就来探索下这两个规范。</p>\n<h1 id=\"amd：asynchronous-module-definition\"><a href=\"#amd%EF%BC%9Aasynchronous-module-definition\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AMD：Asynchronous Module Definition</h1>\n<p>AMD获得前端开发者的青睐，大概很大程度上是由于<a href=\"http://requirejs.org/\">RequireJS</a>的流行。</p>\n<p>举个模块的例子：依赖于<code class=\"language-text\">jQuery</code>的<code class=\"language-text\">bar</code>模块  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//文件名: bar.js</span>\n\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//暴露出的函数</span>\n\n    <span class=\"token keyword\">return</span> myFunc<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>再来个稍微复杂的：多个依赖，并且有多个输出  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//文件名: bar.js</span>\n\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'underscore'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//私有函数</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n\n<span class=\"token comment\">// 暴露出的成员</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\n        b<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span>\n\n        c<span class=\"token punctuation\">:</span> c\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><code class=\"language-text\">define</code>的第一个参数是一个依赖列表，第二个是依赖加载完毕后的回调函数。关于依赖是如何加载的，RequireJS会帮我们搞定。需要注意的是依赖变量的顺序需要一一对应： jquery->$, underscore->_ 。</p>\n<p>当然，我们可以映射任何变量名，比如把<code class=\"language-text\">$</code>改成<code class=\"language-text\">$$</code>，没问题，只要记得这样用<code class=\"language-text\">$$(“.selector”)</code>就行。</p>\n<p>最后，还需谨记不要在<code class=\"language-text\">define</code>之外使用<code class=\"language-text\">$</code>、<code class=\"language-text\">_</code>变量，别问我为什么o(╯□╰)o。</p>\n<h1 id=\"commonjs\"><a href=\"#commonjs\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CommonJS</h1>\n<p>如果你了解Nodejs，应该对CommonJS不陌生。不过真正在前端开发中流行开来，<a href=\"http://browserify.org/\">Browserify</a>功不可没。</p>\n<p>那么，上面的AMD模块换做CommonJS，该怎么写呢？  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//文件名: bar.js</span>\n\n<span class=\"token comment\">//获取依赖</span>\n\n<span class=\"token keyword\">var</span> $ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//暴露函数</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> myFunc<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>复杂点的：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//文件名: bar.js</span>\n\n<span class=\"token comment\">//获取依赖</span>\n\n<span class=\"token keyword\">var</span> $ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'underscore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//私有函数</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n\n<span class=\"token comment\">//暴露成员</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    b<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span>\n\n    c<span class=\"token punctuation\">:</span> c\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h1 id=\"umd-universal-module-definition\"><a href=\"#umd-universal-module-definition\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UMD: Universal Module Definition</h1>\n<p>CommonJS和AMD适用场景不太一样，一般CommonJS是同步加载，AMD是异步加载，但是它们流行程度是一样的。有没有一种通用的模块规范来铲平两者的差异？程序员的智慧是无穷的，UMD应运而生。</p>\n<p>不得不预警，虽然兼容AMD和CommonJS，而且也支持浏览器宿主环境，但代码看起来确实挺丑陋的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// AMD</span>\n\n        <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// Node, CommonJS-like</span>\n\n        module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// 浏览器(root 就是 window)</span>\n\n        root<span class=\"token punctuation\">.</span>returnExports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>jQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//暴露的函数</span>\n\n    <span class=\"token keyword\">return</span> myFunc<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>复杂点的： </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// AMD</span>\n        <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'underscore'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Node, CommonJS-like</span>\n        module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'underscore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 浏览器(root 就是 window)</span>\n        root<span class=\"token punctuation\">.</span>returnExports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>jQuery<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//私有函数</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//公有函数</span>\n    <span class=\"token comment\">//暴露的成员</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        b<span class=\"token punctuation\">:</span> b<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">:</span> c\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>UMD虽然丑，但更实用啊，所以很多开源类库或组件都用这种方案。</p>","frontmatter":{"title":"探索AMD、CommonJS和UMD","date":"2014-08-22T09:31:37.000Z","category":"技术","tags":["amd","javascript"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/amd-commonjs-and-umd/#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"/posts/amd-commonjs-and-umd/#amd%EF%BC%9Aasynchronous-module-definition\">AMD：Asynchronous Module Definition</a></li>\n<li><a href=\"/posts/amd-commonjs-and-umd/#commonjs\">CommonJS</a></li>\n<li><a href=\"/posts/amd-commonjs-and-umd/#umd-universal-module-definition\">UMD: Universal Module Definition</a></li>\n</ul>","excerpt":"概述 这些年，Javascript组件越来越丰富，作为前端开发者，只需要阅读下使用文档，便可引入到自己的项目中，相当便利。但是随着引入的组件越来越多，事情往往就不那么美好了，其中最突出的问题便是全局变量的纷杂容易导致冲突。 W3C提出的模块规范，AMD和CommonJS…"}}}