{"pageContext":{"slug":"/posts/convert-query-params-to-json","html":"<h1 id=\"引子\"><a href=\"#%E5%BC%95%E5%AD%90\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引子</h1>\n<p>工作中经常需要获取浏览器地址栏URL的参数，常用的套路便是将这些参数转化为键值对，方法有许多，我喜欢简单明了，所以尝试自己总结下。</p>\n<h1 id=\"过程\"><a href=\"#%E8%BF%87%E7%A8%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>过程</h1>\n<p>首先，获取参数字符串</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>这里用到了<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.location\">location</a>和<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\">slice</a></p>\n<p>然后，将参数转为数组，然后在数组里做文章。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> pairs<span class=\"token operator\">=</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>接下来，使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">forEach</a>遍历<code class=\"language-text\">pairs</code>，并在每次遍历时使用<code class=\"language-text\">=</code>分隔符，来提取键值对。当然，一些可能遇到的场景也需要考虑下，比如，<strong>值为空</strong>和<strong>使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent</a>解码一下</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> pairs <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\npairs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    pair <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    result<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>最后一步，相当简单，使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON.stringify</a>解析一下，然后用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\">JSON.parse</a>再转化回来。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h1 id=\"最终代码\"><a href=\"#%E6%9C%80%E7%BB%88%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最终代码</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">QueryStringToJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>            \n\n    <span class=\"token keyword\">var</span> pairs <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    pairs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        pair <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        result<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> query_string <span class=\"token operator\">=</span> <span class=\"token function\">QueryStringToJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>","frontmatter":{"title":"查询字符串参数转化为JSON对象","date":"2014-07-29T09:31:37.000Z","category":"技术","tags":["hexo","github","nodejs","前端"],"cover":null},"excerpt":"引子 工作中经常需要获取浏览器地址栏URL的参数，常用的套路便是将这些参数转化为键值对，方法有许多，我喜欢简单明了，所以尝试自己总结下。 过程 首先，获取参数字符串 这里用到了 location 和 slice 然后，将参数转为数组，然后在数组里做文章。 接下来，使用 forEach…","tableOfContents":"<ul>\n<li><a href=\"/posts/convert-query-params-to-json/#%E5%BC%95%E5%AD%90\">引子</a></li>\n<li><a href=\"/posts/convert-query-params-to-json/#%E8%BF%87%E7%A8%8B\">过程</a></li>\n<li><a href=\"/posts/convert-query-params-to-json/#%E6%9C%80%E7%BB%88%E4%BB%A3%E7%A0%81\">最终代码</a></li>\n</ul>","prev":{"fields":{"slug":"/posts/svn-rollback"},"html":"<p>SVN回滚，即取消对代码的修改，分为两种情况：</p>\n<h1 id=\"改动没有被提交（commit）改动没有被提交（commit）\"><a href=\"#%E6%94%B9%E5%8A%A8%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89%E6%94%B9%E5%8A%A8%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E6%94%B9%E5%8A%A8%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\" title=\"改动没有被提交（commit）\"></a>改动没有被提交（commit）</h1>\n<p>这种情况下，<code class=\"language-text\">svn revert</code>就能取消之前的修改。<br>\n用法如下：  </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">svn revert <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> sth</code></pre>\n      </div>\n<p>其中<code class=\"language-text\">sth</code>可以是目录或文件的相对路径也可以是绝对路径。</p>\n<ul>\n<li>当<code class=\"language-text\">sth</code>为单个文件时，直接<code class=\"language-text\">svn revert sth</code>就行了；</li>\n<li>当<code class=\"language-text\">sth</code>为目录时，需要加上参数<code class=\"language-text\">-R</code>(Recursive,递归)，否则只会将<code class=\"language-text\">sth</code>这个目录的改动。</li>\n</ul>\n<p>也可以使用<code class=\"language-text\">svn update</code>命令来取消对之前的修改，但不建议使用。因为<code class=\"language-text\">svn update</code>会去连接仓库服务器，比较耗时。<br>\n<strong>注意：<code class=\"language-text\">svn revert</code>有风险，因为它的目的是放弃未提交的修改。一旦你选择了恢复，Subversion没有方法找回未提交的修改。</strong></p>\n<h1 id=\"改动已经被提交（commit）改动已经被提交（commit）\"><a href=\"#%E6%94%B9%E5%8A%A8%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89%E6%94%B9%E5%8A%A8%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E6%94%B9%E5%8A%A8%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\" title=\"改动已经被提交（commit）\"></a>改动已经被提交（commit）</h1>\n<p>这种情况下，用<code class=\"language-text\">svn merge</code>命令来进行回滚。回滚的操作过程如下：</p>\n<ol>\n<li>保证拿到的是最新代码：<code class=\"language-text\">svn update</code>。假设最新版本号是28。</li>\n<li>然后找出要回滚的确切版本号：<code class=\"language-text\">svn log [sth]</code>。假设根据<code class=\"language-text\">svn log</code>日志查出要回滚的版本号是25，如果想要更详细的了解情况，可以使用<code class=\"language-text\">svn diff -r 28:25 [sth]</code></li>\n<li>回滚到版本号25：<code class=\"language-text\">svn merge -r 28:25 sth</code>。为了保险起见，再次确认回滚的结果：<code class=\"language-text\">svn diff [sth]</code>。正确无误的话，提交。</li>\n<li>提交回滚：<code class=\"language-text\">svn commit -m &quot;revert revision from r28 to r25,because of ...&quot;</code>提交后版本变成了29。</li>\n</ol>\n<p>以上操作总结下：</p>\n<ol>\n<li><code class=\"language-text\">svn update</code>，<code class=\"language-text\">svn log</code>，找到最新版本</li>\n<li>找到自己想要回滚的版本号</li>\n<li>用<code class=\"language-text\">svn merge</code>来回滚：<code class=\"language-text\">svn merge -r latest:older sth</code></li>\n</ol>\n<h1 id=\"温馨提示温馨提示\"><a href=\"#%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA\" title=\"温馨提示\"></a>温馨提示</h1>\n<p>回滚虽好，可不要贪多哦~~~^_^</p>","frontmatter":{"title":"SVN回滚操作","date":"2014-08-01T09:31:37.000Z","category":"技术","tags":["svn","备忘"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/svn-rollback/#%E6%94%B9%E5%8A%A8%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89%E6%94%B9%E5%8A%A8%E6%B2%A1%E6%9C%89%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\">改动没有被提交（commit）改动没有被提交（commit）</a></li>\n<li><a href=\"/posts/svn-rollback/#%E6%94%B9%E5%8A%A8%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89%E6%94%B9%E5%8A%A8%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%EF%BC%88commit%EF%BC%89\">改动已经被提交（commit）改动已经被提交（commit）</a></li>\n<li><a href=\"/posts/svn-rollback/#%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA%E6%B8%A9%E9%A6%A8%E6%8F%90%E7%A4%BA\">温馨提示温馨提示</a></li>\n</ul>","excerpt":"SVN回滚，即取消对代码的修改，分为两种情况： 改动没有被提交（commit） 这种情况下， 就能取消之前的修改。 用法如下：   其中 可以是目录或文件的相对路径也可以是绝对路径。 当 为单个文件时，直接 就行了； 当 为目录时，需要加上参数 (Recursive…"},"next":{"fields":{"slug":"/posts/concise-is-superme"},"html":"<p>复杂的产品不可持续：增加的功能越多，就越难发现真正对用户有价值的新功能。盲目增加新功能早晚会成为垃圾功能。增加复杂性意味着遗留代码越来越沉重，产品维护成本越来越高，进而也越来越难以灵活应对市场变化。</p>\n<p>做技术产品的设计时，至少有三个角度：管理人员、工程师和用户。</p>\n<p>大多数用户根本不会看使用说明，他们只想拿来就用。</p>\n<p>长期坚持理解用户生活的世界，理解他们的偏好和行为，始终都是第一位的。</p>\n<p>三种用户：<strong>专家型用户</strong>、<strong>随意型用户</strong>和<strong>主流用户</strong>。</p>\n<p>简单的体验会让用户没有后顾之忧，因为产品的响应方式都是意料之中的。</p>\n<p>只有知道用户是谁以及他们的真实想法，你才可能有自己深刻的见解。</p>\n<p>关注主要的行动，并且要从用户的视角把它描述出来。</p>\n<p>故事可以把大量信息浓缩到寥寥数语之中，效率极高。</p>\n<p>好的故事应该简明、具体、可信，并且拥有相关细节。</p>\n<ul>\n<li>可信的环境（时间和地点）</li>\n<li>可信的角色（谁和为什么）</li>\n<li>流畅的情节（什么和怎么样）</li>\n</ul>\n<p>如果在情节上遇到麻烦，就返回角色，设想角色会怎么做。如果在角色上无法做文章，就去挖掘环境，看看环境怎样影响角色。</p>\n<p>通常，要做正确肯定得经过几轮反复，但这是值得的，因为反复可以让你关注真正重要的东西。</p>\n<p>没有什么窍门，只不过在你付出足够多的时间和精力后，终于实现了毫不费力的功能，一切就像是变魔术一般。</p>\n<p>理解核心问题需要时间，坚持不懈是达成简单最重要的一步。</p>\n<p>简约四策略：</p>\n<ul>\n<li>删除</li>\n<li>组织</li>\n<li>隐藏</li>\n<li>转移</li>\n</ul>\n<h1 id=\"删除\"><a href=\"#%E5%88%A0%E9%99%A4\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>删除</h1>\n<p>增加价值始于改进核心体验：与新增功能相比，客户更关注基本功能的改进。</p>\n<p>“假如用户想…”意味着任何待删功能都可以安然无恙地回到产品中。就像是一个要远行的人，“假如…”会让你把所有可能用到的东西统统塞进旅行包里，最终你会不堪重负。</p>\n<p>要想避免复杂性，退一步想，把注意力集中到客户的目的上面，问自己“还有其他的解决方式吗？”</p>\n<p>在为用户提供少量选择的情况下，用户购买的可能性要大于为他们提供大量选择的情况。而且，在选择少的情况下，用户购买之后的满意度要高于选择多的情况。</p>\n<p>记住，主流用户希望“够好就行，快点”，而专家则希望“尽可能地完美，等多长时间都愿意”。如果你想要设计受主流用户喜爱的简单体验，就问问自己，向用户提供这些选项会不会因为追求完美而牺牲速度和简单。如果是，删除那些选项。</p>\n<p>把每一页中的文字删掉一半，然后把剩下的再删掉一半。</p>\n<h1 id=\"组织\"><a href=\"#%E7%BB%84%E7%BB%87\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>组织</h1>\n<ul>\n<li>分块</li>\n<li>围绕行为</li>\n<li>是非分明</li>\n<li>字母表</li>\n<li>搜索</li>\n<li>时间和空间</li>\n<li>网格</li>\n<li>大小和位置</li>\n<li>分层</li>\n<li>色标</li>\n<li>期望路径</li>\n</ul>\n<p>注册流程和有效性检查：如果不能去掉这个步骤，至少要想办法推迟；如果不能推迟，就尽量简化。</p>\n<p>所谓最简单的分类，通常指的是重复交叉最少的分类。</p>\n<p>简单的组织，意味着你在使用软件时会对什么感觉不错，而不是你在规划中看到了什么逻辑。</p>\n<h1 id=\"隐藏\"><a href=\"#%E9%9A%90%E8%97%8F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>隐藏</h1>\n<ul>\n<li>不常用但不能少</li>\n<li>渐进展示</li>\n<li>阶段展示</li>\n<li>适时出现</li>\n<li>提示与线索</li>\n</ul>\n<h1 id=\"转移\"><a href=\"#%E8%BD%AC%E7%A7%BB\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>转移</h1>\n<ul>\n<li>菜刀与钢琴：主流用户与专家用户能够各自发挥出应有的水平，只因为只提供基础功能，把其它转移到用户身上。</li>\n</ul>","frontmatter":{"title":"阅读笔记《简约至上》","date":"2014-07-15T11:12:08.000Z","category":"阅读笔记","tags":["设计","互联网","产品","备忘","阅读"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/concise-is-superme/#%E5%88%A0%E9%99%A4\">删除</a></li>\n<li><a href=\"/posts/concise-is-superme/#%E7%BB%84%E7%BB%87\">组织</a></li>\n<li><a href=\"/posts/concise-is-superme/#%E9%9A%90%E8%97%8F\">隐藏</a></li>\n<li><a href=\"/posts/concise-is-superme/#%E8%BD%AC%E7%A7%BB\">转移</a></li>\n</ul>","excerpt":"…"}}}