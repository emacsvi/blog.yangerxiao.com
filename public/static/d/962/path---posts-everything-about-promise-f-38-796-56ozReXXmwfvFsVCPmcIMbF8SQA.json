{"pageContext":{"slug":"/posts/everything-about-promise","html":"<p><img src=\"https://zerosoul.github.io/2016/05/26/everything-about-promise/promise.jpg\" alt=\"javascript promise\"></p>\n<h1 id=\"引子\"><a href=\"#%E5%BC%95%E5%AD%90\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引子</h1>\n<p>先看一段代码：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// do something with the result</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>如果有似曾相识的感觉，那么你在理解javascript中的promise道路上已经迈出了一步。如果完全懵逼，别怕，接下来我们通过例子来了解promise为何物。</p>\n<p>作为新概念，一些人理解promise起来会有些困难，因为这需要思维上的转变。但是请相信我，经过几个实例的讲解，你会发现它的优雅：它使得让人头痛的异步代码写起来更为轻松，而且可以避免“回调大坑”（<a href=\"http://callbackhell.com/\">callback hell</a>）。</p>\n<p>promise背后的思想是：</p>\n<blockquote>\n<p>promise代表的是异步操作的<strong>最终</strong>（eventual）结果</p>\n</blockquote>\n<p>这意味着异步操作的结果并不能立即获取，而是要等到promise稳定了（settled）。</p>\n<p>想想你在日常生活中做出承诺（promise）的例子：小时候，你出门对老妈说：我保证（promise）把垃圾带出去。这句话的意思是在稍后的某个时间点你会去做<strong>扔垃圾</strong>这件事并兑现你的承诺。也许几分钟，也许几小时，也许…</p>\n<p>promise亦是如此。当一个函数返回一个promise，它其实是在说：嘿！我向你承诺，一旦完事，我将带着结果去找你！</p>\n<h1 id=\"举例\"><a href=\"#%E4%B8%BE%E4%BE%8B\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>举例</h1>\n<p>好啦，理论和术语的东西讲多了让人烦，下面我们来例证上面说的一堆话。</p>\n<p>AJAX的概念应该不陌生吧，相信你之前使用过原生<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>，或者jQuery的<a href=\"http://api.jquery.com/jquery.ajax/\">$.ajax()</a>，或者其它类库。不过，XMLHttpRequest API既复杂又难记忆。谢天谢地，新API <a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">fetch</a>简化了ajax的应用，并且，它用到了promise！</p>\n<p>这意味着什么？其实，每当你使用fetch()发出请求，像这样：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some/endpoint'</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>它就会返回一个promise对象。</p>\n<p>通常我们会使用回调函数来响应异步请求完成时的操作。但是，在promise的世界里，我们得使用<code class=\"language-text\">then()</code>来达到这一目的。</p>\n<p>通过链式调用<code class=\"language-text\">.then(onFulfilled, onRejected)</code>来访问<code class=\"language-text\">fetch</code>的结果：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some/endpoint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Response from the endpoint '</span> \\<span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An error occurred: '</span> \\<span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p><code class=\"language-text\">then</code>方法提供两个参数：</p>\n<ol>\n<li><code class=\"language-text\">onFulfilled</code>：当promise完成（fulfilled）时调用，第一个参数表示promise的结果。</li>\n<li><code class=\"language-text\">onRejected</code>：当promise被拒（rejected）时调用，第一个参数表示promise被拒的原因。</li>\n</ol>\n<p><strong>完成</strong>和<strong>被拒</strong>是promise的两个状态，其实还有第三种状态：挂起（pending）。现在，我们来总结下<code class=\"language-text\">fetch</code>使用promise的经过：</p>\n<ol>\n<li>从调用<code class=\"language-text\">fetch()</code>那一刻，它就返回了一个promise对象</li>\n<li>在请求完成之前，promise的状态一直处于<strong>挂起</strong></li>\n<li>promise由挂起状态，可能会转为<strong>完成</strong>，也可能会是<strong>被拒</strong>。</li>\n</ol>\n<p>值得一提的是，一旦promise的状态转为完成或被拒，其值将不再改变。</p>\n<h1 id=\"使用code-classlanguage-textcatchcode错误处理\"><a href=\"#%E4%BD%BF%E7%94%A8code-classlanguage-textcatchcode%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用<code class=\"language-text\">catch()</code>错误处理</h1>\n<p><a href=\"https://promisesaplus.com/\">Promises/A+ 规范</a> 提供了一种语法糖来处理promise的错误。</p>\n<p>假设有个<code class=\"language-text\">lookupPrice(itemId)</code>函数，功能是查找数据库中特定商品的价格，如果存在记录则表示成功，否则表示失败。无论如何，最终返回一个promise对象，我们可以使用<code class=\"language-text\">catch()</code>来使代码更具可读性：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The item costs: '</span> \\<span class=\"token operator\">+</span> price<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Could not find an item with that ID'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>如果商品存在，将会打印：<code class=\"language-text\">The item costs: 50</code>，如果不存在，则打印：<code class=\"language-text\">Could not find an item with that ID</code>。</p>\n<p>如果你对<code class=\"language-text\">then()</code>情有独钟，上面的那段代码可以改写成下面的链式调用：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The item costs: '</span> \\<span class=\"token operator\">+</span> price<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Could not find an item with that ID'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<blockquote>\n<p>如果一个promise被拒，代码将直接跳到第一个<code class=\"language-text\">catch</code>或者有<code class=\"language-text\">onRejected</code>的<code class=\"language-text\">then</code>链式调用处。</p>\n</blockquote>\n<p>比如当我们使用一个不存在的商品id来调用<code class=\"language-text\">lookupPrice()</code>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">99999</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The item costs: '</span> \\<span class=\"token operator\">+</span> price<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> price\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Double the price: '</span> \\<span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Could not find an item with that ID'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>由于两个<code class=\"language-text\">then</code>都没有<code class=\"language-text\">onRejected</code>，均被忽略了，代码直接跳到<code class=\"language-text\">catch</code>执行。</p>\n<p>接下来再列举两个代码片段，它们有细微差别，您瞧好了：<br>\n片段1：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用 then(onFulfilled, onRejected)</span>\n\n<span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// lookup another price and return the promise created by lookupPrice(456)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Item 123 does not exist'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>片段2：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用 catch()</span>\n\n<span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// lookup another price and return the promise created by lookupPrice(456)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">lookupPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Either item 123 OR 456 does not exist'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>片段1中，如果商品123不存在，带有<code class=\"language-text\">onRejected</code>的<code class=\"language-text\">then</code>将会被立即执行：</p>\n<ul>\n<li>在这个例子中将会打印“Item 123 does not exist”</li>\n<li>然而，并没有给<code class=\"language-text\">lookupPrice(456)</code>指定错误处理函数，所以，如果商品456不存在，什么都不会打印。这是个未捕捉到的错误(Uncaught error)。</li>\n</ul>\n<p>需要提醒的一点：当你链式调用<code class=\"language-text\">then(onFulfilled, onRejected)</code>，被执行的或者是<code class=\"language-text\">onFulfilled</code>，或者是<code class=\"language-text\">onRejected</code>，绝对不是两个都执行。</p>\n<p>片段2中：</p>\n<ul>\n<li>如果商品123不存在，代码直接进入<code class=\"language-text\">catch</code>，打印“Either item 123 OR 456 does not exist”</li>\n<li>由于在<code class=\"language-text\">then</code>之后链式调用了<code class=\"language-text\">catch</code>，在此之前任何promise转到了被拒状态，都将进入<code class=\"language-text\">catch</code>。所以，如果商品456也不存在，也会在屏幕上看到“Either item 123 OR 456 does not exist”。</li>\n</ul>\n<h1 id=\"使用code-classlanguage-textnew-promisecode创建promise\"><a href=\"#%E4%BD%BF%E7%94%A8code-classlanguage-textnew-promisecode%E5%88%9B%E5%BB%BApromise\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用<code class=\"language-text\">new Promise()</code>创建promise</h1>\n<p>目前为止，我们通过<code class=\"language-text\">fetch</code>API来了解了promise，通过<code class=\"language-text\">then</code>来使用promise的结果。多数情况下，我们会用到各式各样的类库来使用promise。然而，有时还是需要自己创建promise，自主决定什么情况下转入完成，什么情况下转入被拒。</p>\n<p>使用构造函数<code class=\"language-text\">Promise(resolver)</code>来创建promise实例，其中<code class=\"language-text\">resolver</code>接收两个参数：resolve和reject。似曾相识？恩哼？！</p>\n<p>举个栗子：比如我们想创建一个随机数1到10生成函数，并且返回一个promise。如果数字小于5，进入<code class=\"language-text\">resolve</code>（意味着操作成功），如果大于5，进入<code class=\"language-text\">reject</code>（意味着操作失败）。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">generateRandomNumber</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> randomNumber <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> \\<span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>randomNumber <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>randomNumber<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>randomNumber<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">generateRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success: '</span> \\<span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error: '</span> \\<span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<h1 id=\"链式调用：一次只完成一个任务\"><a href=\"#%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%EF%BC%9A%E4%B8%80%E6%AC%A1%E5%8F%AA%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>链式调用：一次只完成一个任务</h1>\n<p>链式调用多个<code class=\"language-text\">then</code>，可以做到进一步处理返回值，并且顺序化执行其它异步任务。</p>\n<p>在一些业务场景，这非常有用。比如，你要调用某个终端来认证用户，一旦认证成功，我们调用另一个终端来获取用户资料。</p>\n<p>上面那个场景用代码来表示的话，类似这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 认证id为333的用户</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/auth/333'</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token comment\">//将响应对象传值给authStatus，用以确认认证成功与否</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>authStatus<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//认证成功了，则继续调用loadProfile，并传入用户名</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>loadProfile<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//认证失败了，进入catch处理程序</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">authStatus</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//用户名将传入下一个\\`then\\`，即loadProfile</span>\n\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 认证失败，进入reject</span>\n\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User cannot be authenticated'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadProfile</span> <span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/profile/'</span> \\<span class=\"token operator\">+</span> userName<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>profileData<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>建议花上一两分钟看上几遍上面代码，研究下各个部分是如何组合在一起的。</p>\n<p>有两个地方需要特别注意下：</p>\n<ul>\n<li>一旦promise转为<strong>完成</strong>状态，它的值将被当做参数自动传入下一个<code class=\"language-text\">then</code>方法中。</li>\n<li>如果认证失败，将立即进入<code class=\"language-text\">catch</code>，并略过<code class=\"language-text\">.then(loadProfile)</code>。</li>\n</ul>\n<h1 id=\"promiseall：一次搞定！\"><a href=\"#promiseall%EF%BC%9A%E4%B8%80%E6%AC%A1%E6%90%9E%E5%AE%9A%EF%BC%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.all()：一次搞定！</h1>\n<p>如果我们不关心异步操作的执行顺序，换句话说，假如我们想在获取用户信息的同时，把最近发表的文章也获取了，该怎么办？</p>\n<p>这时候就该<code class=\"language-text\">Promise.all()</code>上场了。它将promise数组作为参数传入，并且实例化一个promise，只有当数组中所有的promise都转为完成状态时，该实例化promise才进入完成状态。但是，请记住，一旦参数中有一个promise是被拒状态，Promise.all()也就进入了被拒状态。要么所有的promise都完成，要么全部被拒。</p>\n<p>Promise.all()完成返回的结果是一个数组，其中的值对应参数中的promise数组。下面根据刚刚提到的那个场景，我们使用Promise.all()来实现下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">[</span>\n\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/profile/333'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 获取用户信息</span>\n\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/posts/user/333'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取用户文章</span>\n\n\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// \\`result\\`是一个长度为2的数组</span>\n\n  <span class=\"token keyword\">var</span> profileInfo <span class=\"token operator\">=</span> result\\<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>profileData\n\n  <span class=\"token keyword\">var</span> recentPosts <span class=\"token operator\">=</span> result\\<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>posts\n\n  <span class=\"token comment\">//处理数据 BLA BLA ~~~</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<h1 id=\"就这些了！我保证！（i-promise）\"><a href=\"#%E5%B0%B1%E8%BF%99%E4%BA%9B%E4%BA%86%EF%BC%81%E6%88%91%E4%BF%9D%E8%AF%81%EF%BC%81%EF%BC%88i-promise%EF%BC%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>就这些了！我保证！（I Promise）</h1>\n<p>一旦开始在代码中实践Promise，你会发现一切都变得相当简单。因此我建议你打开Chrome/Firefox的开发者工具，走一遍这篇文章里的例子。</p>\n<p>需要指出的是，有一个Promise的API我还没有提及:<code class=\"language-text\">Promise.race()</code>。它和<code class=\"language-text\">Promise.all()</code>类似，传入一个promise数组，并实例化一个promise，但不同之处在于传入的promise有任何一个转为完成，实例化的promise便进入完成，任何一个promise转为被拒，便进入被拒。个人认为，这并不十分实用，但我认为有一些特定业务场景会用得上它，你可以在<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\">这儿</a>熟悉下这个API，祝好运！</p>\n<h1 id=\"参考链接\"><a href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考链接</h1>\n<ul>\n<li>\n<p><a href=\"https://coligo.io/javascript-promises-plain-simple/\">JavaScript Promises: Plain and Simple</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN:Promise</a></p>\n</li>\n</ul>","frontmatter":{"title":"探索 Javascript Promise","date":"2016-05-26T09:31:37.000Z","category":"它山之石","tags":["译文","技术","javascript","promise"],"cover":"https://zerosoul.github.io/2016/05/26/everything-about-promise/promise.jpg"},"excerpt":"引子 先看一段代码：   如果有似曾相识的感觉，那么你在理解javascript中的promise道路上已经迈出了一步。如果完全懵逼，别怕，接下来我们通过例子来了解promise为何物。 作为新概念，一些人理解promise…","tableOfContents":"<ul>\n<li><a href=\"/posts/everything-about-promise/#%E5%BC%95%E5%AD%90\">引子</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E4%B8%BE%E4%BE%8B\">举例</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E4%BD%BF%E7%94%A8code-classlanguage-textcatchcode%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\">使用&#x3C;code class=\"language-text\">catch()&#x3C;/code>错误处理</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E4%BD%BF%E7%94%A8code-classlanguage-textnew-promisecode%E5%88%9B%E5%BB%BApromise\">使用&#x3C;code class=\"language-text\">new Promise()&#x3C;/code>创建promise</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%EF%BC%9A%E4%B8%80%E6%AC%A1%E5%8F%AA%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1\">链式调用：一次只完成一个任务</a></li>\n<li><a href=\"/posts/everything-about-promise/#promiseall%EF%BC%9A%E4%B8%80%E6%AC%A1%E6%90%9E%E5%AE%9A%EF%BC%81\">Promise.all()：一次搞定！</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E5%B0%B1%E8%BF%99%E4%BA%9B%E4%BA%86%EF%BC%81%E6%88%91%E4%BF%9D%E8%AF%81%EF%BC%81%EF%BC%88i-promise%EF%BC%89\">就这些了！我保证！（I Promise）</a></li>\n<li><a href=\"/posts/everything-about-promise/#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\">参考链接</a></li>\n</ul>","prev":{"fields":{"slug":"/posts/building-my-first-ios-app-with-react-native-part-one"},"html":"<p><img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/rn.png\" alt=\"React Native\"></p>\n<h1 id=\"写在前面的话\"><a href=\"#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写在前面的话</h1>\n<p>严格来说这是一篇译文，但与一般的翻译有所不同，我会修正原文中一些小错误，也会指出没有提及的一些坑，还会基于原文的想法做一些扩展开发。所以，读的时候有些是原作者的话，有些是我的添油加醋，但整体绝对保证流畅。另，基于原文改动较多，也就懒得一一标注出来，或许显得有些不负责，但是…<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/ldwy.jpg\" alt=\"来打我呀\"><br>\n好了，下面开始进入正题：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/zb.jpg\" alt=\"装逼\"></p>\n<h1 id=\"之前的困惑\"><a href=\"#%E4%B9%8B%E5%89%8D%E7%9A%84%E5%9B%B0%E6%83%91\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>之前的困惑</h1>\n<p>使用<code class=\"language-text\">Javascript</code>来构建移动应用已经不是什么新鲜事了。<a href=\"http://ionicframework.com/\">Ionic</a>和<a href=\"http://phonegap.com/\">Phonegap</a>已经做了大量的探索，建立了各自的开发生态圈，吸引了相当多的开发者，不得不说都获得了一定程度的成功。</p>\n<p>但是，尝试做了一些小Demo后，这些框架变得毫无吸引力，主要原因应该是<strong>很难做到原生体验</strong>。后来，转念一想，为啥不使用<code class=\"language-text\">Swift/Objective-C</code>或者<code class=\"language-text\">Java</code>构建原生app呢，诚然，这对于从前端开发转向app开发，需要学习的挺多，但这不正是一名现代Web开发者所擅长的吗：快速学习。那么，从哪儿开头呢？在Google过程中遇到了一篇文章：<a href=\"https://medium.com/ios-os-x-development/an-ios-developer-on-react-native-1f24786c29f0#.avhlz9qsr\">An iOS Developer on React Native</a>，其中一句话打动了我：</p>\n<blockquote>\n<p>Fast-forward a couple of months, and I’m confident enough to say I may never write an iOS app in Objective-C or Swift again.（快进几个月，我有足够的信心说：再也不会用Objective-C或者Swift来写iOS app了！）</p>\n</blockquote>\n<p>一切的遇见都不是偶然的。看来，官方语言也有不少坑，那为啥不选择<code class=\"language-text\">React Native</code>呢，更何况自己是前端工（Ban）程（Zhuan）师（De）。好吧，我承认绕了个不必要的圈子，但走一些弯路能看到更多的风景，不是吗？<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/ym.png\" alt=\"姚明\"><br>\n好的，下面先了解下需求。（难道不应该是先说一下<code class=\"language-text\">React Native</code>么 (╯‵□′)╯︵┻━┻）</p>\n<h1 id=\"先谈谈需求\"><a href=\"#%E5%85%88%E8%B0%88%E8%B0%88%E9%9C%80%E6%B1%82\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先谈谈需求</h1>\n<p>很不幸，我从未在苹果商店找到过一个设置手机壁纸的完美APP。在Mac上，<a href=\"http://unsplash.com/\">Unsplash</a>承包了我的所有这方面的需求，很完美，然而在手机上…对不起，打开<code class=\"language-text\">Setting</code>，找到<code class=\"language-text\">Wallpaper</code>…。</p>\n<p>为何不试着做一个满足自己需求的APP呢？下面是我目前希望有的功能点：</p>\n<ul>\n<li>随机展示适合当做手机壁纸的图片</li>\n<li>可以滑动浏览</li>\n<li>可以保存到相册</li>\n<li>保存前可以预览设置后的效果</li>\n</ul>\n<p>虽然最后一项不知道能否做到，但至少可以开始撸其它功能点了。额，等等，开始之前，我觉得有必要提醒一下你应该知道的事情：</p>\n<ul>\n<li>Javascript</li>\n<li>一些<code class=\"language-text\">ES6</code>的特性：<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\">类</a>，<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">箭头函数</a>,<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">解构</a>和<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/template_strings\">模板字符串</a></li>\n<li>Mac OS X 终端 （好吧，你应该有个Mac或者Macbook）</li>\n<li>CSS：flexbox (<a href=\"http://flexboxfroggy.com/\">这里</a>有个非常棒的flexbox游戏教程)</li>\n<li><a href=\"https://facebook.github.io/react/\">React</a>：React的一些基本概念需要知道，比如<code class=\"language-text\">JSX</code>、<code class=\"language-text\">state</code>和<code class=\"language-text\">prop</code>的区别、<code class=\"language-text\">Virtual DOM</code>。</li>\n</ul>\n<h1 id=\"再谈谈文章的规划\"><a href=\"#%E5%86%8D%E8%B0%88%E8%B0%88%E6%96%87%E7%AB%A0%E7%9A%84%E8%A7%84%E5%88%92\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>再谈谈文章的规划</h1>\n<p>由于涉及的知识点较多，<code class=\"language-text\">构建我的第一个iOS app</code>将分为两篇来完成。每一篇有<strong>五个章节</strong>，每个章节会推进一步，直至完成预期。文章略长，一旦开始，最好以章节为单位来进行。建议先收藏，回家坐在电脑前慢慢品。</p>\n<h2 id=\"1first-blood建一个空react-native项目\"><a href=\"#1first-blood%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A9%BAreact-native%E9%A1%B9%E7%9B%AE\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.First Blood:建一个空React Native项目</h2>\n<p>首先确认已安装：</p>\n<ul>\n<li><a href=\"https://developer.apple.com/xcode/\">XCode 7.0或更高版本</a></li>\n<li><a href=\"https://nodejs.org/en/\">Node</a></li>\n</ul>\n<p>然后，在终端输入：<code class=\"language-text\">npm install -g react-native-cli</code>，全局安装React Native。</p>\n<p>如果你觉得我说的不够详细，请移步<a href=\"https://facebook.github.io/react-native/docs/getting-started.html#content\">React Native的官方安装文档</a></p>\n<p>在你电脑找块风水宝地，用于初始化项目目录。在该文件夹下执行命令：<code class=\"language-text\">react-native init PIW</code>。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/init.png\" alt=\"init\"><br>\n（<code class=\"language-text\">PIW</code>是<code class=\"language-text\">Pick Image as Wallpaper</code>的缩写，不要在意这个细节，我为了装X起的。另，鉴于网络因素，等待时间应该较长，此时可以去小个便，或者逗逗你的宠物。）</p>\n<p><code class=\"language-text\">init</code>后的项目目录：</p>\n<p><img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/dir.png\" alt=\"项目目录\"></p>\n<p>很显然，<code class=\"language-text\">index.android.js</code>和<code class=\"language-text\">index.ios.js</code>分别是安卓和苹果应用的入口执行文件，由于我们构建的是iOS APP，所以接下来只跟<code class=\"language-text\">index.ios.js</code>打交道。接下来，移步<code class=\"language-text\">ios</code>文件夹，并双击打开<code class=\"language-text\">PIW.xcodeproj</code>。（Xcode的工程文件）<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/xcode.png\" alt=\"第一眼看到的xcode项目页面\"><br>\n注意有个警告：<code class=\"language-text\">No matching provisioning profiles found.</code>。得想办法修复它。先改个名字，<strong>Bundle Identifier</strong>：<code class=\"language-text\">com.zerosoul.me.tutorial.PIW</code>怎么样？有木有感觉很高大上！只要遵循<a href=\"https://en.wikipedia.org/wiki/Reverse_domain_name_notation\">Reverse DNS Convention</a>，请随意。然后选择<strong>Team</strong>，没有则按照指示新建一个。最后，点击<strong>Fix Issue</strong>。</p>\n<p><strong>Deployment Info</strong>一栏需要改动些默认设置，让app不能横屏，并且隐藏顶部的状态栏，下图红框已标出：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/deployinfo.png\" alt=\"deployment info\"></p>\n<p>好了，可以点击左上角的<strong>Run</strong>，看一看模拟器的效果了。中途应该会蹦出一个终端弹窗，不要慌，正常现象。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/popup.png\" alt=\"terminal popup\"></p>\n<p>一旦Xcode构建完，在模拟器里你会看到这一幕：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/welcome.jpg\" alt=\"welcome to React Native\"></p>\n<p><strong>注：此处有坑，如果你用真机模拟，会出现这么一幕：</strong><br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/localhost.png\" alt=\"大红的懵逼\"><br>\n大红的懵逼！不过别慌，官方文档有对应的解决方法，移步<a href=\"https://facebook.github.io/react-native/docs/running-on-device-ios.html\">这里</a>可以找到解决方式。</p>\n<h2 id=\"2-从第三方获取壁纸数据\"><a href=\"#2-%E4%BB%8E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96%E5%A3%81%E7%BA%B8%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 从第三方获取壁纸数据</h2>\n<p>既然要做壁纸APP，大量适合做手机壁纸的图片从哪里来？还记得前面提到的Unsplash吗？一切的遇见都不是偶然，好心的歪果仁做了一个<a href=\"https://unsplash.it/\">Unsplash图片调用接口</a>，用于生成一些精美占位图，非常方便！</p>\n<h3 id=\"有关code-classlanguage-textes6code中类的解释\"><a href=\"#%E6%9C%89%E5%85%B3code-classlanguage-textes6code%E4%B8%AD%E7%B1%BB%E7%9A%84%E8%A7%A3%E9%87%8A\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>有关<code class=\"language-text\">ES6</code>中“类”的解释</h3>\n<p>你可能会注意到，有些React代码会出现<code class=\"language-text\">var PIW = React.createClass({ ... })</code>，有些会是<code class=\"language-text\">class PIW extends Component{ ... }</code>。呵呵，这是个历史遗留问题，用哪种风格是个人选择问题，不存在孰优孰劣，有选择恐惧症的同学可以看看<a href=\"https://reactjsnews.com/composing-components\">这篇文章</a>。</p>\n<p>此处，我选择<code class=\"language-text\">Recat.Component</code>风格，别问我为什么，就这么任性！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/renxing.jpg\" alt=\"任性\"></p>\n<h3 id=\"开始做一些改动\"><a href=\"#%E5%BC%80%E5%A7%8B%E5%81%9A%E4%B8%80%E4%BA%9B%E6%94%B9%E5%8A%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>开始做一些改动</h3>\n<p>在<code class=\"language-text\">PIW</code>类里面，第一件事情便是加个构造函数<code class=\"language-text\">constructor</code>，在此初始化两个State：<code class=\"language-text\">wallsJSON</code>和<code class=\"language-text\">isLoading</code>。<code class=\"language-text\">wallsJSON</code>用于存储从第三方接口获取的json数组数据，<code class=\"language-text\">isLoading</code>是个布尔变量，用于标识数据是否加载完毕。  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PIW</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n      wallsJSON<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n      isLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><strong>注：方便起见，涉及的代码改动，我用`/*</strong>/<code class=\"language-text\">隔离标识出，下同。** 既然有存放数据的变量了，就得有给之赋值的函数，好吧，在</code>constructor<code class=\"language-text\">下面加一个占位函数</code>fetchWallsJSON`:  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetchWallsJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>‘壁纸数据从这里加载<span class=\"token operator\">...</span>’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>从业务逻辑来讲，组件一旦加载完毕，就应该触发该函数。那么，该<code class=\"language-text\">componentDidMount</code>上场了，它是React Native组件的生命周期函数之一，在首次渲染（<code class=\"language-text\">render</code>）成功后会触发。想要更系统地理解组件的生命周期，请移步<a href=\"https://facebook.github.io/react/docs/component-specs.html\">这里</a>。注意，既然我们用的ES6的类语法，就可以省略<code class=\"language-text\">getInitialState</code>了，取而代之的是在<code class=\"language-text\">constructor</code>中给<code class=\"language-text\">this.state</code>赋值。  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchWallsJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"language-text\">fetchWallsJSON</code>里会打印信息，我们应该从哪儿看到呢？首先，让模拟器获取焦点，使用<code class=\"language-text\">CMD + D</code>组合键调出调试菜单，选择<strong>Debug in Chrome</strong>，好吧，顺便把<strong>Enable live reload</strong>也打开吧，妈妈再也不用担心每次都要手动重启APP了。将会在Chrome里打开一个新标签，按照上面的说明调出<strong>console</strong>的界面。啊哈！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/console.png\" alt=\"console data loaded tip\"><br>\n坑占好了，下面，可以开始考虑引入真实数据了。访问URL：<a href=\"http://unsplash.it/list\">unsplash.it/list</a> ，你将会看到铺满全屏的数据，接下来我们就基于这些数据做文章啦~~~<br>\n首先，替换掉<code class=\"language-text\">console</code>:  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetchWallsJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/***/</span>\n\n    <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://unsplash.it/list'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> jsonData <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> error <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>‘获取数据有误： ‘ <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/***/</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><strong>注：用到了<code class=\"language-text\">fetch</code>函数，不熟悉的同学请参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">这里</a></strong><br>\n保存然后刷新，几秒过后，啊哈！<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/consolerealdata.png\" alt=\"console real data\"></p>\n<p>太好了，我们已经能从第三方拿到数据了！在打印出数据前会有点延迟，这很正常，因为从请求到响应回数据会有个等待时间，此处应有<strong>加载提示</strong>。</p>\n<h2 id=\"3-增加加载提示\"><a href=\"#3-%E5%A2%9E%E5%8A%A0%E5%8A%A0%E8%BD%BD%E6%8F%90%E7%A4%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 增加加载提示</h2>\n<p>首先，把<code class=\"language-text\">PIW</code>类里<code class=\"language-text\">render</code>代码全部删除，新增以下代码：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>isLoading<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isLoading<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderLoadingScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">else</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>里面新增了两个函数，我们来实现它：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">renderLoadingScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\n        <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>loadingContainer<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n\n            <span class=\"token operator\">&lt;</span>ActivityIndicatorIOS\n\n              animating<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n\n              color<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'#fff'</span><span class=\"token punctuation\">}</span>\n\n              size<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'small'</span><span class=\"token punctuation\">}</span> \n\n              style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>margin<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n              <span class=\"token operator\">&lt;</span>Text style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">:</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>正在加载数据<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n\n       <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">renderResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\n        <span class=\"token operator\">&lt;</span>View<span class=\"token operator\">></span>\n\n            <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>\n\n             数据已加载\n\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>根据<code class=\"language-text\">isLoading</code>的不同状态，渲染不同的界面。但是请注意，我们好像忘了什么。啊哈，<code class=\"language-text\">isLoading</code>并没有改变状态，应该在哪儿将其状态变过来呢？<code class=\"language-text\">fetchWallsJSON</code>！  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> jsonData <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//更新 isLoading </span>\n\n<span class=\"token comment\">/***/</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> error <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>‘获取数据有误：‘ <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span></code></pre>\n      </div>\n<p>有关<code class=\"language-text\">setState</code>的详细说明请移步<a href=\"https://facebook.github.io/react/docs/component-api.html\">这里</a>，一句话描述其作用就是用于触发UI更新。<br>\n另外，我们在<code class=\"language-text\">renderLoadingScreen</code>调用了一个新组件<code class=\"language-text\">ActivityIndicatorIOS</code>，因此，需要在头部引入之：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n\n  AppRegistry<span class=\"token punctuation\">,</span>\n\n  StyleSheet<span class=\"token punctuation\">,</span>\n\n  Text<span class=\"token punctuation\">,</span>\n\n  View<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">/***/</span>\n\n  ActivityIndicatorIOS <span class=\"token comment\">// 增加新组件</span>\n\n  <span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>在看到最终效果前，还有一件事情：注意到<code class=\"language-text\">&lt;View&gt;</code>标签内有个<code class=\"language-text\">styles.loadingContainer</code>没有？没错，这是用来定义<code class=\"language-text\">View</code>的样式的，目前可以这样理解：React内的样式全部用行内样式来定义的。而样式则通过<code class=\"language-text\">var styles = StyleSheet.create({…</code>来创建，只需要在相应的组件里加以引用即可：<br>\n创建<code class=\"language-text\">loadingContainer</code>:  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> styles <span class=\"token operator\">=</span> StyleSheet<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n  loadingContainer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\n    flex<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n    flexDirection<span class=\"token punctuation\">:</span> <span class=\"token string\">'row'</span><span class=\"token punctuation\">,</span>\n\n    justifyContent<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n    alignItems<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n    backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'#000'</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/***/</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>引用<code class=\"language-text\">loadingContainer</code>:  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>View</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>loadingContainer<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span></code></pre>\n      </div>\n<p>当然，也可以这样使用：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>View</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n\n    flex<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n    flexDirection<span class=\"token punctuation\">:</span> <span class=\"token string\">'row'</span><span class=\"token punctuation\">,</span>\n\n    justifyContent<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n    alignItems<span class=\"token punctuation\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n\n    backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'#000'</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n      </div>\n<p>不过这样做代码的可读性和可维护性较差，尤其在有很多组件的时候，容易乱套，所以并不是一个好的实践。另外，注意到没，React Native严重依赖<code class=\"language-text\">flexbox</code>布局元素，所以，学好<code class=\"language-text\">flexbox</code>这个知识点就很有必要。</p>\n<p>保存这些改动，你将会在模拟器中看到以下加载页面：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/loading.png\" alt=\"loading screen\"><br>\n过个几秒钟，将会转为：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/loaded.png\" alt=\"data loaded\"></p>\n<h2 id=\"4-筛选出随机的壁纸\"><a href=\"#4-%E7%AD%9B%E9%80%89%E5%87%BA%E9%9A%8F%E6%9C%BA%E7%9A%84%E5%A3%81%E7%BA%B8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 筛选出随机的壁纸</h2>\n<p>这一章节侧重于Javascript的编码，将创建一个专门的模块用于生成随机数。如果模块的概念感到陌生，请先移步<a href=\"https://nodejs.org/api/modules.html#modules_modules\">Node.js的模块文档</a>。</p>\n<p>首先，我们在<code class=\"language-text\">index.ios.js</code>的<code class=\"language-text\">class</code>声明前定义一个常量，用于决定要随机选取的壁纸数量。  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">NUM_WALLPAPERS</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>然后创建一个用户生成随机数的模块，这个模块内有两个函数：</p>\n<ul>\n<li><code class=\"language-text\">uniqueRandomNumbers</code>：该函数有三个参数，第一个决定了将要返回的随机数数量，后面两个定义随机数选取的范围。比如调用<code class=\"language-text\">uniqueRandomNumbers(5,10,20)</code>将获得包含5个随机数的数组，他们的范围在10到20之间。</li>\n<li><code class=\"language-text\">randomNumberInRange</code>：该函数有两个参数，定义了随机数范围，并返回一个随机数。比如调用<code class=\"language-text\">randomNumberInRange(2,10)</code>将返回介于2到10的随机的一个数。</li>\n</ul>\n<p>当然，我们完全可以将这两个函数合并为一个，但遵循<a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\"><strong>单一职责原则</strong></a>应该是编码的最佳实践：一个函数只做一件事并将其做好。相信我，遵循好的编程原则能让以后的日子好过一些。</p>\n<p>好了，思路表述完了，开始编码。首先，在根目录下新建一个js文件<code class=\"language-text\">RandManager.js</code>，以下是代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">uniqueRandomNumbers</span><span class=\"token punctuation\">(</span>numRandomNumbers<span class=\"token punctuation\">,</span> lowerLimit<span class=\"token punctuation\">,</span> upperLimit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">var</span> uniqueNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> uniqueNumbers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> numRandomNumbers <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">var</span> currentRandomNumber <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumberInRange</span><span class=\"token punctuation\">(</span>lowerLimit<span class=\"token punctuation\">,</span> upperLimit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> uniqueNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>currentRandomNumber<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> \n\n                uniqueNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentRandomNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> uniqueNumbers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">randomNumberInRange</span><span class=\"token punctuation\">(</span>lowerLimit<span class=\"token punctuation\">,</span> upperLimit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> upperLimit <span class=\"token operator\">-</span> lowerLimit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> lowerLimit<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>在<code class=\"language-text\">index.ios.js</code>中引用<code class=\"language-text\">RandManager</code>模块：<code class=\"language-text\">var RandManager = require(&#39;./RandManager.js&#39;);</code>，然后我们就可以在<code class=\"language-text\">fetchWallsJSON</code>中调用啦：  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetchWallsJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://unsplash.it/list'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> jsonData <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/***/</span>\n\n      <span class=\"token keyword\">var</span> randomIds <span class=\"token operator\">=</span> RandManager<span class=\"token punctuation\">.</span><span class=\"token function\">uniqueRandomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NUM_WALLPAPERS</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> jsonData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">var</span> walls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      randomIds<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>randomId <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n        walls<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>jsonData\\<span class=\"token punctuation\">[</span>randomId\\<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n        isLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n        wallsJSON<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>walls<span class=\"token punctuation\">)</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/***/</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> error <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'获取数据有误：'</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>上面代码应该不用过多解释了，使用<code class=\"language-text\">uniqueRandomNumbers</code>生成5个随机数作为<code class=\"language-text\">jsonData</code>的索引值，进而获取5个随机壁纸数据并存入<code class=\"language-text\">wallsJSON</code>，哦对了，别忘了更新<code class=\"language-text\">isLoading</code>。</p>\n<p>有了随机数据，就可以在<code class=\"language-text\">renderResults</code>里使用了：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">renderResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">/***/</span>\n\n   <span class=\"token comment\">//这里用到了ES6中的解构</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">,</span> isLoading<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>isLoading <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\n    <span class=\"token operator\">&lt;</span>View<span class=\"token operator\">></span>\n\n        <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wallpaper<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n\n            <span class=\"token operator\">&lt;</span>Text key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n\n              <span class=\"token punctuation\">{</span>wallpaper<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>以上代码有个地方值得注意：React Native通过循环数组或集合渲染子元素时，需要给每个元素制定一个唯一的<code class=\"language-text\">key</code>，这也是为啥<code class=\"language-text\">&lt;Text key={index}&gt;</code>这样写的原因。</p>\n<p>保存代码，模拟器刷新后，我们看到了五个不同的id：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/randid.png\" alt=\"random id\"><br>\n当然，可以将<code class=\"language-text\">id</code>改为<code class=\"language-text\">author</code>，这样，我们看到的是五个不同的名字：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/randname.png\" alt=\"random name\"></p>\n<p>非常好，我们现在已经可以自如地操控数据了。</p>\n<h2 id=\"5-新增swiper组件\"><a href=\"#5-%E6%96%B0%E5%A2%9Eswiper%E7%BB%84%E4%BB%B6\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 新增Swiper组件</h2>\n<p>React Native有强大的社区支持和<a href=\"https://react.parts/native\">丰富的组件库</a>。这一章节学习如何引入第三方组件。<br>\n对于我们当前的APP，需要一个可滑动浏览图片的组件，推荐<a href=\"https://github.com/leecade/react-native-swiper\">react-native-swiper</a>。</p>\n<p>终端切换到项目根目录，运行命令：<code class=\"language-text\">npm install react-native-swiper --save</code>，然后<code class=\"language-text\">require</code>到代码里：<code class=\"language-text\">var Swiper=require(&#39;react-native-swiper&#39;)</code>。<br>\n将<code class=\"language-text\">renderResults</code>里的<code class=\"language-text\">View</code>替换为<code class=\"language-text\">Swiper</code>：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">renderResults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">,</span> isLoading<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>isLoading <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Swiper<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wallpaper<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>Text key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>wallpaper<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Swiper<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>不出意外的话，界面将变成下面这样：<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/swiperwithdata.png\" alt=\"swiper with name data\"><br>\n下面，根据<a href=\"https://github.com/leecade/react-native-swiper\">Swiper组件的文档</a>，我们来微调一下样式：  </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Swiper</span> \n<span class=\"token attr-name\">dot</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>View</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>backgroundColor<span class=\"token punctuation\">:</span><span class=\"token string\">'rgba(255,255,255,.4)'</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>borderRadius<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> marginLeft<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> marginRight<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> marginTop<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> marginBottom<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n<span class=\"token attr-name\">activeDot</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>View</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> borderRadius<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> marginLeft<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> marginRight<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span>\n<span class=\"token attr-name\">loop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token attr-name\">onMomentumScrollEnd</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onMomentumScrollEnd<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">{</span>wallsJSON<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>wallpaper<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Text</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span>wallpaper<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Text</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Swiper</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<ul>\n<li>微调了下底部分页小圆点，更大更黑了（卧槽，我在说什么…）</li>\n<li>禁用了循环，这样，一旦浏览到最后一页，然后就没有然后了。</li>\n<li>新增了每一页滑动完毕后的触发事件：<code class=\"language-text\">onMomentumScrollEnd</code>（这个会在下一篇文章中用到，此处先占个坑）</li>\n</ul>\n<p>我们已经把Swiper加上了，好啦，这一节就写到这里，因为…我累了。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/shuaiqi.jpg\"></p>\n<h1 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h1>\n<p>写到这里，我发现文章已经挺长的了。那么…再加个总结吧，都这么长了，应该不介意再长一点吧。<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/youdaoli.jpg\" alt=\"有道理\"></p>\n<ul>\n<li>第一节讲的是如何新建一个空的React Native项目</li>\n<li>第二节讲的是如何从第三方API获取原始数据，并建议用ES6新语法来构建程序</li>\n<li>第三节我们根据APP不同的状态渲染出不同的界面</li>\n<li>第四节我们新建了一个模块，引入并解决了产生随机数的问题</li>\n<li>第五节我们新增了一个第三方组件，并做了简单设置。</li>\n</ul>\n<p>好吧，必须承认，目前为止，我们的APP看起来似乎没啥特殊之处。不过，刚入门嘛，一步一步走到这里，也不容易了。下一篇文章，我们将继续打磨这个APP，新增特性预告：</p>\n<ul>\n<li>作者名字将替换为图片，没错，高清无码大图</li>\n<li>自定义双击事件，保存图片到相册：<code class=\"language-text\">PanHandler</code></li>\n<li>通过Xcode新增类库并获取相应授权，比如访问相册</li>\n<li>增加预览功能</li>\n<li>创建更多的自定义组件<br>\n哦对了，最终代码在<a href=\"https://github.com/zerosoul/PIW\">这儿</a>。年轻人，我们下一回合见…<br>\n<img src=\"https://zerosoul.github.io/2016/06/05/building-my-first-ios-app-with-react-native-part-one/dengyan.png\"></li>\n</ul>\n<h1 id=\"原文链接\"><a href=\"#%E5%8E%9F%E6%96%87%E9%93%BE%E6%8E%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原文链接</h1>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2016/04/the-beauty-of-react-native-building-your-first-ios-app-with-javascript-part-1/\">The Beauty Of React Native: Building Your First iOS App With JavaScript (Part 1)</a></li>\n</ul>","frontmatter":{"title":"React Native之美：构建我的第一个iOS APP（1）","date":"2016-06-05T09:31:37.000Z","category":"它山之石","tags":["react native","react","翻译"],"cover":null},"tableOfContents":"<ul>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E8%AF%9D\">写在前面的话</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E4%B9%8B%E5%89%8D%E7%9A%84%E5%9B%B0%E6%83%91\">之前的困惑</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E5%85%88%E8%B0%88%E8%B0%88%E9%9C%80%E6%B1%82\">先谈谈需求</a></li>\n<li>\n<p><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E5%86%8D%E8%B0%88%E8%B0%88%E6%96%87%E7%AB%A0%E7%9A%84%E8%A7%84%E5%88%92\">再谈谈文章的规划</a></p>\n<ul>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#1first-blood%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A9%BAreact-native%E9%A1%B9%E7%9B%AE\">1.First Blood:建一个空React Native项目</a></li>\n<li>\n<p><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#2-%E4%BB%8E%E7%AC%AC%E4%B8%89%E6%96%B9%E8%8E%B7%E5%8F%96%E5%A3%81%E7%BA%B8%E6%95%B0%E6%8D%AE\">2. 从第三方获取壁纸数据</a></p>\n<ul>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E6%9C%89%E5%85%B3code-classlanguage-textes6code%E4%B8%AD%E7%B1%BB%E7%9A%84%E8%A7%A3%E9%87%8A\">有关&#x3C;code class=\"language-text\">ES6&#x3C;/code>中“类”的解释</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E5%BC%80%E5%A7%8B%E5%81%9A%E4%B8%80%E4%BA%9B%E6%94%B9%E5%8A%A8\">开始做一些改动</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#3-%E5%A2%9E%E5%8A%A0%E5%8A%A0%E8%BD%BD%E6%8F%90%E7%A4%BA\">3. 增加加载提示</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#4-%E7%AD%9B%E9%80%89%E5%87%BA%E9%9A%8F%E6%9C%BA%E7%9A%84%E5%A3%81%E7%BA%B8\">4. 筛选出随机的壁纸</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#5-%E6%96%B0%E5%A2%9Eswiper%E7%BB%84%E4%BB%B6\">5. 新增Swiper组件</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"/posts/building-my-first-ios-app-with-react-native-part-one/#%E5%8E%9F%E6%96%87%E9%93%BE%E6%8E%A5\">原文链接</a></li>\n</ul>","excerpt":"…"},"next":{"fields":{"slug":"/posts/shooting-china"},"html":"<p>不管新闻摄影、纪实摄影，都应该反映社会的变化，你拍下来了，照片就有意义。摄影最应该表现那些即将产生的和随时将要消失的事物。如果脑子里没有独立的品格或者独立的思想，我不相信能拍出多么优秀的作品来。</p>\n<p>珍贵的作品就是要记录历史、记录时代。</p>\n<p>在久患“浮躁病”的时代，我有幸见过一群笃实的人。</p>\n<h1 id=\"沙飞\"><a href=\"#%E6%B2%99%E9%A3%9E\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>沙飞</h1>\n<p><img src=\"/images/baiqiuen.jpg\" alt=\"白求恩\"></p>\n<p><img src=\"/images/luxun.jpeg\" alt=\"鲁迅\"></p>\n<h1 id=\"翁乃强\"><a href=\"#%E7%BF%81%E4%B9%83%E5%BC%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>翁乃强</h1>\n<p><img src=\"/images/hongweibing.jpg\" alt=\"红卫兵\"></p>\n<h1 id=\"候登科\"><a href=\"#%E5%80%99%E7%99%BB%E7%A7%91\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>候登科</h1>\n<p><img src=\"/images/maike.jpg\" alt=\"麦客\"></p>\n<p><img src=\"/images/nvmaike.jpeg\" alt=\"女麦客\"></p>\n<h1 id=\"四月影会\"><a href=\"#%E5%9B%9B%E6%9C%88%E5%BD%B1%E4%BC%9A\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>四月影会</h1>\n<p><img src=\"/images/siyueyinghui.jpg\" alt=\"四月影会第一次展览\"></p>\n<h1 id=\"解海龙\"><a href=\"#%E8%A7%A3%E6%B5%B7%E9%BE%99\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解海龙</h1>\n<p><img src=\"/images/%E5%B8%8C%E6%9C%9B%E5%B7%A5%E7%A8%8B.jpg\" alt=\"希望工程\"></p>\n<p><img src=\"/images/%E5%8A%AA%E5%8A%9B%E8%AF%BB%E4%B9%A6%E7%9A%84%E7%94%B7%E5%AD%A9.jpg\" alt=\"努力读书的男孩\"></p>\n<h1 id=\"王福春\"><a href=\"#%E7%8E%8B%E7%A6%8F%E6%98%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>王福春</h1>\n<p><img src=\"/images/%E6%8B%A5%E6%8C%A4%E7%9A%84%E7%81%AB%E8%BD%A6.jpg\" alt=\"拥挤的火车\"></p>\n<h1 id=\"贺延光\"><a href=\"#%E8%B4%BA%E5%BB%B6%E5%85%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>贺延光</h1>\n<p><img src=\"/images/%E9%9D%9E%E5%85%B8.jpg\" alt=\"非典\"></p>\n<h1 id=\"结语\"><a href=\"#%E7%BB%93%E8%AF%AD\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结语</h1>\n<p>某位摄影家说过：端起相机，不过是我打量这个世界的借口。</p>","frontmatter":{"title":"阅读笔记《影像中的国》","date":"2016-05-22T05:23:08.000Z","category":"阅读笔记","tags":["摄影","中国","经典","阅读"],"cover":"/images/希望工程.jpg"},"tableOfContents":"<ul>\n<li><a href=\"/posts/shooting-china/#%E6%B2%99%E9%A3%9E\">沙飞</a></li>\n<li><a href=\"/posts/shooting-china/#%E7%BF%81%E4%B9%83%E5%BC%BA\">翁乃强</a></li>\n<li><a href=\"/posts/shooting-china/#%E5%80%99%E7%99%BB%E7%A7%91\">候登科</a></li>\n<li><a href=\"/posts/shooting-china/#%E5%9B%9B%E6%9C%88%E5%BD%B1%E4%BC%9A\">四月影会</a></li>\n<li><a href=\"/posts/shooting-china/#%E8%A7%A3%E6%B5%B7%E9%BE%99\">解海龙</a></li>\n<li><a href=\"/posts/shooting-china/#%E7%8E%8B%E7%A6%8F%E6%98%A5\">王福春</a></li>\n<li><a href=\"/posts/shooting-china/#%E8%B4%BA%E5%BB%B6%E5%85%89\">贺延光</a></li>\n<li><a href=\"/posts/shooting-china/#%E7%BB%93%E8%AF%AD\">结语</a></li>\n</ul>","excerpt":"…"}}}